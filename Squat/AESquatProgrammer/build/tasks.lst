ARM GAS  /tmp/cciF1PDz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/cciF1PDz.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/cciF1PDz.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreate,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreate
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	xTaskCreate:
 153              	.LFB5:
 154              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  /tmp/cciF1PDz.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
ARM GAS  /tmp/cciF1PDz.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
ARM GAS  /tmp/cciF1PDz.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cciF1PDz.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
ARM GAS  /tmp/cciF1PDz.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
ARM GAS  /tmp/cciF1PDz.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/cciF1PDz.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
ARM GAS  /tmp/cciF1PDz.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
ARM GAS  /tmp/cciF1PDz.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 14


 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/cciF1PDz.s 			page 15


 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 682 0
 156              		.cfi_startproc
 157              		@ args = 8, pretend = 0, frame = 32
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8CB0     		sub	sp, sp, #48
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 56
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 40
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 3B60     		str	r3, [r7]
 173 000c 1346     		mov	r3, r2	@ movhi
 174 000e FB80     		strh	r3, [r7, #6]	@ movhi
 175              	.LBB95:
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
ARM GAS  /tmp/cciF1PDz.s 			page 16


 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 176              		.loc 1 716 0
 177 0010 FB88     		ldrh	r3, [r7, #6]
 178 0012 9B00     		lsls	r3, r3, #2
 179 0014 1846     		mov	r0, r3
 180 0016 FFF7FEFF 		bl	pvPortMalloc
 181 001a 7861     		str	r0, [r7, #20]
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 182              		.loc 1 718 0
 183 001c 7B69     		ldr	r3, [r7, #20]
 184 001e 002B     		cmp	r3, #0
 185 0020 0ED0     		beq	.L2
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 186              		.loc 1 721 0
 187 0022 5420     		movs	r0, #84
 188 0024 FFF7FEFF 		bl	pvPortMalloc
 189 0028 F861     		str	r0, [r7, #28]
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 190              		.loc 1 723 0
 191 002a FB69     		ldr	r3, [r7, #28]
 192 002c 002B     		cmp	r3, #0
 193 002e 03D0     		beq	.L3
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              		.loc 1 726 0
 195 0030 FB69     		ldr	r3, [r7, #28]
 196 0032 7A69     		ldr	r2, [r7, #20]
 197 0034 1A63     		str	r2, [r3, #48]
 198 0036 05E0     		b	.L5
 199              	.L3:
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
ARM GAS  /tmp/cciF1PDz.s 			page 17


 200              		.loc 1 732 0
 201 0038 7869     		ldr	r0, [r7, #20]
 202 003a FFF7FEFF 		bl	vPortFree
 203 003e 01E0     		b	.L5
 204              	.L2:
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 205              		.loc 1 737 0
 206 0040 0023     		movs	r3, #0
 207 0042 FB61     		str	r3, [r7, #28]
 208              	.L5:
 209              	.LBE95:
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 210              		.loc 1 742 0
 211 0044 FB69     		ldr	r3, [r7, #28]
 212 0046 002B     		cmp	r3, #0
 213 0048 13D0     		beq	.L6
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              		.loc 1 752 0
 215 004a FA88     		ldrh	r2, [r7, #6]
 216 004c 0023     		movs	r3, #0
 217 004e 0393     		str	r3, [sp, #12]
 218 0050 FB69     		ldr	r3, [r7, #28]
 219 0052 0293     		str	r3, [sp, #8]
 220 0054 FB6A     		ldr	r3, [r7, #44]
 221 0056 0193     		str	r3, [sp, #4]
 222 0058 BB6A     		ldr	r3, [r7, #40]
 223 005a 0093     		str	r3, [sp]
 224 005c 3B68     		ldr	r3, [r7]
 225 005e B968     		ldr	r1, [r7, #8]
 226 0060 F868     		ldr	r0, [r7, #12]
 227 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              		.loc 1 753 0
 229 0066 F869     		ldr	r0, [r7, #28]
 230 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 231              		.loc 1 754 0
 232 006c 0123     		movs	r3, #1
 233 006e BB61     		str	r3, [r7, #24]
 234 0070 02E0     		b	.L7
ARM GAS  /tmp/cciF1PDz.s 			page 18


 235              	.L6:
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 758 0
 237 0072 4FF0FF33 		mov	r3, #-1
 238 0076 BB61     		str	r3, [r7, #24]
 239              	.L7:
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 240              		.loc 1 761 0
 241 0078 BB69     		ldr	r3, [r7, #24]
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 242              		.loc 1 762 0
 243 007a 1846     		mov	r0, r3
 244 007c 2037     		adds	r7, r7, #32
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247 007e BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0080 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE5:
 255              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	prvInitialiseNewTask:
 263              	.LFB6:
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 264              		.loc 1 775 0
 265              		.cfi_startproc
 266              		@ args = 16, pretend = 0, frame = 32
 267              		@ frame_needed = 1, uses_anonymous_args = 0
 268 0000 80B5     		push	{r7, lr}
 269              	.LCFI5:
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
ARM GAS  /tmp/cciF1PDz.s 			page 19


 273 0002 88B0     		sub	sp, sp, #32
 274              	.LCFI6:
 275              		.cfi_def_cfa_offset 40
 276 0004 00AF     		add	r7, sp, #0
 277              	.LCFI7:
 278              		.cfi_def_cfa_register 7
 279 0006 F860     		str	r0, [r7, #12]
 280 0008 B960     		str	r1, [r7, #8]
 281 000a 7A60     		str	r2, [r7, #4]
 282 000c 3B60     		str	r3, [r7]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 283              		.loc 1 797 0
 284 000e 3B6B     		ldr	r3, [r7, #48]
 285 0010 186B     		ldr	r0, [r3, #48]
 286 0012 7B68     		ldr	r3, [r7, #4]
 287 0014 9B00     		lsls	r3, r3, #2
 288 0016 1A46     		mov	r2, r3
 289 0018 A521     		movs	r1, #165
 290 001a FFF7FEFF 		bl	memset
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 291              		.loc 1 807 0
 292 001e 3B6B     		ldr	r3, [r7, #48]
 293 0020 1A6B     		ldr	r2, [r3, #48]
 294 0022 7B68     		ldr	r3, [r7, #4]
 295 0024 03F18043 		add	r3, r3, #1073741824
 296 0028 013B     		subs	r3, r3, #1
 297 002a 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cciF1PDz.s 			page 20


 298 002c 1344     		add	r3, r3, r2
 299 002e BB61     		str	r3, [r7, #24]
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 300              		.loc 1 808 0
 301 0030 BB69     		ldr	r3, [r7, #24]
 302 0032 23F00703 		bic	r3, r3, #7
 303 0036 BB61     		str	r3, [r7, #24]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 304              		.loc 1 811 0
 305 0038 BB69     		ldr	r3, [r7, #24]
 306 003a 03F00703 		and	r3, r3, #7
 307 003e 002B     		cmp	r3, #0
 308 0040 09D0     		beq	.L10
 309              	.LBB96:
 310              	.LBB97:
 311              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
ARM GAS  /tmp/cciF1PDz.s 			page 21


  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cciF1PDz.s 			page 22


  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  /tmp/cciF1PDz.s 			page 23


 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cciF1PDz.s 			page 24


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 312              		.loc 2 237 0 discriminator 1
 313              		.syntax unified
 314              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 315 0042 4FF05003 			mov r3, #80												
 316 0046 83F31188 		msr basepri, r3											
 317 004a BFF36F8F 		isb														
 318 004e BFF34F8F 		dsb														
 319              	
 320              	@ 0 "" 2
 321              		.thumb
 322              		.syntax unified
 323 0052 7B61     		str	r3, [r7, #20]
 324              	.L11:
 325              	.LBE97:
 326              	.LBE96:
 327              		.loc 1 811 0 discriminator 1
 328 0054 FEE7     		b	.L11
 329              	.L10:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cciF1PDz.s 			page 25


 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 330              		.loc 1 827 0
 331 0056 0023     		movs	r3, #0
 332 0058 FB61     		str	r3, [r7, #28]
 333 005a 12E0     		b	.L12
 334              	.L15:
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 335              		.loc 1 829 0
 336 005c BA68     		ldr	r2, [r7, #8]
 337 005e FB69     		ldr	r3, [r7, #28]
 338 0060 1344     		add	r3, r3, r2
 339 0062 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 340 0064 3A6B     		ldr	r2, [r7, #48]
 341 0066 FB69     		ldr	r3, [r7, #28]
 342 0068 1344     		add	r3, r3, r2
 343 006a 3433     		adds	r3, r3, #52
 344 006c 0A46     		mov	r2, r1
 345 006e 1A70     		strb	r2, [r3]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 346              		.loc 1 834 0
 347 0070 BA68     		ldr	r2, [r7, #8]
 348 0072 FB69     		ldr	r3, [r7, #28]
 349 0074 1344     		add	r3, r3, r2
 350 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 0078 002B     		cmp	r3, #0
 352 007a 06D0     		beq	.L18
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 353              		.loc 1 827 0 discriminator 2
 354 007c FB69     		ldr	r3, [r7, #28]
 355 007e 0133     		adds	r3, r3, #1
 356 0080 FB61     		str	r3, [r7, #28]
 357              	.L12:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 358              		.loc 1 827 0 is_stmt 0 discriminator 1
 359 0082 FB69     		ldr	r3, [r7, #28]
 360 0084 0F2B     		cmp	r3, #15
 361 0086 E9D9     		bls	.L15
 362 0088 00E0     		b	.L14
 363              	.L18:
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 364              		.loc 1 836 0 is_stmt 1
 365 008a 00BF     		nop
 366              	.L14:
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciF1PDz.s 			page 26


 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 367              		.loc 1 846 0
 368 008c 3B6B     		ldr	r3, [r7, #48]
 369 008e 0022     		movs	r2, #0
 370 0090 83F84320 		strb	r2, [r3, #67]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 371              		.loc 1 850 0
 372 0094 BB6A     		ldr	r3, [r7, #40]
 373 0096 062B     		cmp	r3, #6
 374 0098 01D9     		bls	.L16
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 375              		.loc 1 852 0
 376 009a 0623     		movs	r3, #6
 377 009c BB62     		str	r3, [r7, #40]
 378              	.L16:
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 379              		.loc 1 859 0
 380 009e 3B6B     		ldr	r3, [r7, #48]
 381 00a0 BA6A     		ldr	r2, [r7, #40]
 382 00a2 DA62     		str	r2, [r3, #44]
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 383              		.loc 1 867 0
 384 00a4 3B6B     		ldr	r3, [r7, #48]
 385 00a6 0433     		adds	r3, r3, #4
 386 00a8 1846     		mov	r0, r3
 387 00aa FFF7FEFF 		bl	vListInitialiseItem
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 388              		.loc 1 868 0
 389 00ae 3B6B     		ldr	r3, [r7, #48]
 390 00b0 1833     		adds	r3, r3, #24
 391 00b2 1846     		mov	r0, r3
 392 00b4 FFF7FEFF 		bl	vListInitialiseItem
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
ARM GAS  /tmp/cciF1PDz.s 			page 27


 393              		.loc 1 872 0
 394 00b8 3B6B     		ldr	r3, [r7, #48]
 395 00ba 3A6B     		ldr	r2, [r7, #48]
 396 00bc 1A61     		str	r2, [r3, #16]
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 397              		.loc 1 875 0
 398 00be BB6A     		ldr	r3, [r7, #40]
 399 00c0 C3F10702 		rsb	r2, r3, #7
 400 00c4 3B6B     		ldr	r3, [r7, #48]
 401 00c6 9A61     		str	r2, [r3, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 402              		.loc 1 876 0
 403 00c8 3B6B     		ldr	r3, [r7, #48]
 404 00ca 3A6B     		ldr	r2, [r7, #48]
 405 00cc 5A62     		str	r2, [r3, #36]
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/cciF1PDz.s 			page 28


 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 406              		.loc 1 918 0
 407 00ce 3B6B     		ldr	r3, [r7, #48]
 408 00d0 0022     		movs	r2, #0
 409 00d2 DA64     		str	r2, [r3, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 410              		.loc 1 919 0
 411 00d4 3B6B     		ldr	r3, [r7, #48]
 412 00d6 0022     		movs	r2, #0
 413 00d8 83F85020 		strb	r2, [r3, #80]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 414              		.loc 1 946 0
 415 00dc 3A68     		ldr	r2, [r7]
 416 00de F968     		ldr	r1, [r7, #12]
 417 00e0 B869     		ldr	r0, [r7, #24]
 418 00e2 FFF7FEFF 		bl	pxPortInitialiseStack
 419 00e6 0246     		mov	r2, r0
 420 00e8 3B6B     		ldr	r3, [r7, #48]
 421 00ea 1A60     		str	r2, [r3]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 422              		.loc 1 950 0
 423 00ec FB6A     		ldr	r3, [r7, #44]
 424 00ee 002B     		cmp	r3, #0
 425 00f0 02D0     		beq	.L19
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
ARM GAS  /tmp/cciF1PDz.s 			page 29


 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 426              		.loc 1 954 0
 427 00f2 FB6A     		ldr	r3, [r7, #44]
 428 00f4 3A6B     		ldr	r2, [r7, #48]
 429 00f6 1A60     		str	r2, [r3]
 430              	.L19:
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 431              		.loc 1 960 0
 432 00f8 00BF     		nop
 433 00fa 2037     		adds	r7, r7, #32
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 8
 436 00fc BD46     		mov	sp, r7
 437              	.LCFI9:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 00fe 80BD     		pop	{r7, pc}
 441              		.cfi_endproc
 442              	.LFE6:
 444              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv4-sp-d16
 451              	prvAddNewTaskToReadyList:
 452              	.LFB7:
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 453              		.loc 1 964 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              	.LCFI10:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
 461              		.cfi_offset 14, -4
 462 0002 82B0     		sub	sp, sp, #8
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 16
 465 0004 00AF     		add	r7, sp, #0
 466              	.LCFI12:
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 469              		.loc 1 967 0
 470 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/cciF1PDz.s 			page 30


 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 471              		.loc 1 969 0
 472 000c 264B     		ldr	r3, .L25
 473 000e 1B68     		ldr	r3, [r3]
 474 0010 0133     		adds	r3, r3, #1
 475 0012 254A     		ldr	r2, .L25
 476 0014 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 477              		.loc 1 970 0
 478 0016 254B     		ldr	r3, .L25+4
 479 0018 1B68     		ldr	r3, [r3]
 480 001a 002B     		cmp	r3, #0
 481 001c 09D1     		bne	.L21
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 482              		.loc 1 974 0
 483 001e 234A     		ldr	r2, .L25+4
 484 0020 7B68     		ldr	r3, [r7, #4]
 485 0022 1360     		str	r3, [r2]
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 486              		.loc 1 976 0
 487 0024 204B     		ldr	r3, .L25
 488 0026 1B68     		ldr	r3, [r3]
 489 0028 012B     		cmp	r3, #1
 490 002a 10D1     		bne	.L22
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 491              		.loc 1 981 0
 492 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 493 0030 0DE0     		b	.L22
 494              	.L21:
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 495              		.loc 1 993 0
 496 0032 1F4B     		ldr	r3, .L25+8
 497 0034 1B68     		ldr	r3, [r3]
 498 0036 002B     		cmp	r3, #0
 499 0038 09D1     		bne	.L22
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
ARM GAS  /tmp/cciF1PDz.s 			page 31


 500              		.loc 1 995 0
 501 003a 1C4B     		ldr	r3, .L25+4
 502 003c 1B68     		ldr	r3, [r3]
 503 003e DA6A     		ldr	r2, [r3, #44]
 504 0040 7B68     		ldr	r3, [r7, #4]
 505 0042 DB6A     		ldr	r3, [r3, #44]
 506 0044 9A42     		cmp	r2, r3
 507 0046 02D8     		bhi	.L22
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 508              		.loc 1 997 0
 509 0048 184A     		ldr	r2, .L25+4
 510 004a 7B68     		ldr	r3, [r7, #4]
 511 004c 1360     		str	r3, [r2]
 512              	.L22:
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 513              		.loc 1 1010 0
 514 004e 194B     		ldr	r3, .L25+12
 515 0050 1B68     		ldr	r3, [r3]
 516 0052 0133     		adds	r3, r3, #1
 517 0054 174A     		ldr	r2, .L25+12
 518 0056 1360     		str	r3, [r2]
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 519              		.loc 1 1015 0
 520 0058 164B     		ldr	r3, .L25+12
 521 005a 1A68     		ldr	r2, [r3]
 522 005c 7B68     		ldr	r3, [r7, #4]
 523 005e 5A64     		str	r2, [r3, #68]
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 524              		.loc 1 1020 0
 525 0060 7B68     		ldr	r3, [r7, #4]
 526 0062 DB6A     		ldr	r3, [r3, #44]
 527 0064 0122     		movs	r2, #1
 528 0066 9A40     		lsls	r2, r2, r3
 529 0068 134B     		ldr	r3, .L25+16
 530 006a 1B68     		ldr	r3, [r3]
 531 006c 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/cciF1PDz.s 			page 32


 532 006e 124A     		ldr	r2, .L25+16
 533 0070 1360     		str	r3, [r2]
 534 0072 7B68     		ldr	r3, [r7, #4]
 535 0074 DA6A     		ldr	r2, [r3, #44]
 536 0076 1346     		mov	r3, r2
 537 0078 9B00     		lsls	r3, r3, #2
 538 007a 1344     		add	r3, r3, r2
 539 007c 9B00     		lsls	r3, r3, #2
 540 007e 0F4A     		ldr	r2, .L25+20
 541 0080 1A44     		add	r2, r2, r3
 542 0082 7B68     		ldr	r3, [r7, #4]
 543 0084 0433     		adds	r3, r3, #4
 544 0086 1946     		mov	r1, r3
 545 0088 1046     		mov	r0, r2
 546 008a FFF7FEFF 		bl	vListInsertEnd
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 547              		.loc 1 1024 0
 548 008e FFF7FEFF 		bl	vPortExitCritical
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 549              		.loc 1 1026 0
 550 0092 074B     		ldr	r3, .L25+8
 551 0094 1B68     		ldr	r3, [r3]
 552 0096 002B     		cmp	r3, #0
 553 0098 01D0     		beq	.L24
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 554              		.loc 1 1030 0
 555 009a 044B     		ldr	r3, .L25+4
 556 009c 1B68     		ldr	r3, [r3]
 557              	.L24:
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 558              		.loc 1 1043 0
 559 009e 00BF     		nop
 560 00a0 0837     		adds	r7, r7, #8
 561              	.LCFI13:
 562              		.cfi_def_cfa_offset 8
 563 00a2 BD46     		mov	sp, r7
 564              	.LCFI14:
 565              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cciF1PDz.s 			page 33


 566              		@ sp needed
 567 00a4 80BD     		pop	{r7, pc}
 568              	.L26:
 569 00a6 00BF     		.align	2
 570              	.L25:
 571 00a8 00000000 		.word	uxCurrentNumberOfTasks
 572 00ac 00000000 		.word	pxCurrentTCB
 573 00b0 00000000 		.word	xSchedulerRunning
 574 00b4 00000000 		.word	uxTaskNumber
 575 00b8 00000000 		.word	uxTopReadyPriority
 576 00bc 00000000 		.word	pxReadyTasksLists
 577              		.cfi_endproc
 578              	.LFE7:
 580              		.section	.text.vTaskDelete,"ax",%progbits
 581              		.align	1
 582              		.global	vTaskDelete
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	vTaskDelete:
 589              	.LFB8:
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 590              		.loc 1 1049 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 16
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594 0000 80B5     		push	{r7, lr}
 595              	.LCFI15:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 7, -8
 598              		.cfi_offset 14, -4
 599 0002 84B0     		sub	sp, sp, #16
 600              	.LCFI16:
 601              		.cfi_def_cfa_offset 24
 602 0004 00AF     		add	r7, sp, #0
 603              	.LCFI17:
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 606              		.loc 1 1052 0
 607 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 608              		.loc 1 1056 0
 609 000c 7B68     		ldr	r3, [r7, #4]
 610 000e 002B     		cmp	r3, #0
 611 0010 02D1     		bne	.L28
ARM GAS  /tmp/cciF1PDz.s 			page 34


 612              		.loc 1 1056 0 is_stmt 0 discriminator 1
 613 0012 384B     		ldr	r3, .L39
 614 0014 1B68     		ldr	r3, [r3]
 615 0016 00E0     		b	.L29
 616              	.L28:
 617              		.loc 1 1056 0 discriminator 2
 618 0018 7B68     		ldr	r3, [r7, #4]
 619              	.L29:
 620              		.loc 1 1056 0 discriminator 4
 621 001a FB60     		str	r3, [r7, #12]
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 622              		.loc 1 1059 0 is_stmt 1 discriminator 4
 623 001c FB68     		ldr	r3, [r7, #12]
 624 001e 0433     		adds	r3, r3, #4
 625 0020 1846     		mov	r0, r3
 626 0022 FFF7FEFF 		bl	uxListRemove
 627 0026 0346     		mov	r3, r0
 628 0028 002B     		cmp	r3, #0
 629 002a 15D1     		bne	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 630              		.loc 1 1061 0
 631 002c FB68     		ldr	r3, [r7, #12]
 632 002e DA6A     		ldr	r2, [r3, #44]
 633 0030 3149     		ldr	r1, .L39+4
 634 0032 1346     		mov	r3, r2
 635 0034 9B00     		lsls	r3, r3, #2
 636 0036 1344     		add	r3, r3, r2
 637 0038 9B00     		lsls	r3, r3, #2
 638 003a 0B44     		add	r3, r3, r1
 639 003c 1B68     		ldr	r3, [r3]
 640 003e 002B     		cmp	r3, #0
 641 0040 0AD1     		bne	.L30
 642              		.loc 1 1061 0 is_stmt 0 discriminator 1
 643 0042 FB68     		ldr	r3, [r7, #12]
 644 0044 DB6A     		ldr	r3, [r3, #44]
 645 0046 0122     		movs	r2, #1
 646 0048 02FA03F3 		lsl	r3, r2, r3
 647 004c DA43     		mvns	r2, r3
 648 004e 2B4B     		ldr	r3, .L39+8
 649 0050 1B68     		ldr	r3, [r3]
 650 0052 1340     		ands	r3, r3, r2
 651 0054 294A     		ldr	r2, .L39+8
 652 0056 1360     		str	r3, [r2]
 653              	.L30:
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 654              		.loc 1 1069 0 is_stmt 1
 655 0058 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cciF1PDz.s 			page 35


 656 005a 9B6A     		ldr	r3, [r3, #40]
 657 005c 002B     		cmp	r3, #0
 658 005e 04D0     		beq	.L32
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 659              		.loc 1 1071 0
 660 0060 FB68     		ldr	r3, [r7, #12]
 661 0062 1833     		adds	r3, r3, #24
 662 0064 1846     		mov	r0, r3
 663 0066 FFF7FEFF 		bl	uxListRemove
 664              	.L32:
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 665              		.loc 1 1082 0
 666 006a 254B     		ldr	r3, .L39+12
 667 006c 1B68     		ldr	r3, [r3]
 668 006e 0133     		adds	r3, r3, #1
 669 0070 234A     		ldr	r2, .L39+12
 670 0072 1360     		str	r3, [r2]
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 671              		.loc 1 1084 0
 672 0074 1F4B     		ldr	r3, .L39
 673 0076 1B68     		ldr	r3, [r3]
 674 0078 FA68     		ldr	r2, [r7, #12]
 675 007a 9A42     		cmp	r2, r3
 676 007c 0BD1     		bne	.L33
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 677              		.loc 1 1091 0
 678 007e FB68     		ldr	r3, [r7, #12]
 679 0080 0433     		adds	r3, r3, #4
 680 0082 1946     		mov	r1, r3
 681 0084 1F48     		ldr	r0, .L39+16
 682 0086 FFF7FEFF 		bl	vListInsertEnd
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 683              		.loc 1 1096 0
 684 008a 1F4B     		ldr	r3, .L39+20
 685 008c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciF1PDz.s 			page 36


 686 008e 0133     		adds	r3, r3, #1
 687 0090 1D4A     		ldr	r2, .L39+20
 688 0092 1360     		str	r3, [r2]
 689 0094 09E0     		b	.L34
 690              	.L33:
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 691              		.loc 1 1107 0
 692 0096 1D4B     		ldr	r3, .L39+24
 693 0098 1B68     		ldr	r3, [r3]
 694 009a 013B     		subs	r3, r3, #1
 695 009c 1B4A     		ldr	r2, .L39+24
 696 009e 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 697              		.loc 1 1108 0
 698 00a0 F868     		ldr	r0, [r7, #12]
 699 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 700              		.loc 1 1112 0
 701 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 702              	.L34:
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 703              		.loc 1 1117 0
 704 00aa FFF7FEFF 		bl	vPortExitCritical
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 705              		.loc 1 1121 0
 706 00ae 184B     		ldr	r3, .L39+28
 707 00b0 1B68     		ldr	r3, [r3]
 708 00b2 002B     		cmp	r3, #0
 709 00b4 1AD0     		beq	.L38
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 710              		.loc 1 1123 0
 711 00b6 0F4B     		ldr	r3, .L39
 712 00b8 1B68     		ldr	r3, [r3]
 713 00ba FA68     		ldr	r2, [r7, #12]
 714 00bc 9A42     		cmp	r2, r3
 715 00be 15D1     		bne	.L38
ARM GAS  /tmp/cciF1PDz.s 			page 37


1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 716              		.loc 1 1125 0
 717 00c0 144B     		ldr	r3, .L39+32
 718 00c2 1B68     		ldr	r3, [r3]
 719 00c4 002B     		cmp	r3, #0
 720 00c6 09D0     		beq	.L36
 721              	.LBB98:
 722              	.LBB99:
 723              		.loc 2 237 0 discriminator 1
 724              		.syntax unified
 725              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 726 00c8 4FF05003 			mov r3, #80												
 727 00cc 83F31188 		msr basepri, r3											
 728 00d0 BFF36F8F 		isb														
 729 00d4 BFF34F8F 		dsb														
 730              	
 731              	@ 0 "" 2
 732              		.thumb
 733              		.syntax unified
 734 00d8 BB60     		str	r3, [r7, #8]
 735              	.L37:
 736              	.LBE99:
 737              	.LBE98:
 738              		.loc 1 1125 0 discriminator 1
 739 00da FEE7     		b	.L37
 740              	.L36:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 741              		.loc 1 1126 0
 742 00dc 0E4B     		ldr	r3, .L39+36
 743 00de 4FF08052 		mov	r2, #268435456
 744 00e2 1A60     		str	r2, [r3]
 745              		.syntax unified
 746              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 747 00e4 BFF34F8F 		dsb
 748              	@ 0 "" 2
 749              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 750 00e8 BFF36F8F 		isb
 751              	@ 0 "" 2
 752              		.thumb
 753              		.syntax unified
 754              	.L38:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 755              		.loc 1 1133 0
 756 00ec 00BF     		nop
 757 00ee 1037     		adds	r7, r7, #16
 758              	.LCFI18:
 759              		.cfi_def_cfa_offset 8
 760 00f0 BD46     		mov	sp, r7
 761              	.LCFI19:
 762              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cciF1PDz.s 			page 38


 763              		@ sp needed
 764 00f2 80BD     		pop	{r7, pc}
 765              	.L40:
 766              		.align	2
 767              	.L39:
 768 00f4 00000000 		.word	pxCurrentTCB
 769 00f8 00000000 		.word	pxReadyTasksLists
 770 00fc 00000000 		.word	uxTopReadyPriority
 771 0100 00000000 		.word	uxTaskNumber
 772 0104 00000000 		.word	xTasksWaitingTermination
 773 0108 00000000 		.word	uxDeletedTasksWaitingCleanUp
 774 010c 00000000 		.word	uxCurrentNumberOfTasks
 775 0110 00000000 		.word	xSchedulerRunning
 776 0114 00000000 		.word	uxSchedulerSuspended
 777 0118 04ED00E0 		.word	-536810236
 778              		.cfi_endproc
 779              	.LFE8:
 781              		.section	.text.vTaskDelayUntil,"ax",%progbits
 782              		.align	1
 783              		.global	vTaskDelayUntil
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 787              		.fpu fpv4-sp-d16
 789              	vTaskDelayUntil:
 790              	.LFB9:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 791              		.loc 1 1141 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 40
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 0000 80B5     		push	{r7, lr}
 796              	.LCFI20:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 8AB0     		sub	sp, sp, #40
 801              	.LCFI21:
 802              		.cfi_def_cfa_offset 48
 803 0004 00AF     		add	r7, sp, #0
 804              	.LCFI22:
 805              		.cfi_def_cfa_register 7
 806 0006 7860     		str	r0, [r7, #4]
 807 0008 3960     		str	r1, [r7]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 808              		.loc 1 1143 0
 809 000a 0023     		movs	r3, #0
 810 000c 7B62     		str	r3, [r7, #36]
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 39


1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 811              		.loc 1 1145 0
 812 000e 7B68     		ldr	r3, [r7, #4]
 813 0010 002B     		cmp	r3, #0
 814 0012 09D1     		bne	.L42
 815              	.LBB100:
 816              	.LBB101:
 817              		.loc 2 237 0 discriminator 1
 818              		.syntax unified
 819              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 820 0014 4FF05003 			mov r3, #80												
 821 0018 83F31188 		msr basepri, r3											
 822 001c BFF36F8F 		isb														
 823 0020 BFF34F8F 		dsb														
 824              	
 825              	@ 0 "" 2
 826              		.thumb
 827              		.syntax unified
 828 0024 7B61     		str	r3, [r7, #20]
 829              	.L43:
 830              	.LBE101:
 831              	.LBE100:
 832              		.loc 1 1145 0 discriminator 1
 833 0026 FEE7     		b	.L43
 834              	.L42:
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 835              		.loc 1 1146 0
 836 0028 3B68     		ldr	r3, [r7]
 837 002a 002B     		cmp	r3, #0
 838 002c 09D1     		bne	.L44
 839              	.LBB102:
 840              	.LBB103:
 841              		.loc 2 237 0 discriminator 1
 842              		.syntax unified
 843              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 844 002e 4FF05003 			mov r3, #80												
 845 0032 83F31188 		msr basepri, r3											
 846 0036 BFF36F8F 		isb														
 847 003a BFF34F8F 		dsb														
 848              	
 849              	@ 0 "" 2
 850              		.thumb
 851              		.syntax unified
 852 003e 3B61     		str	r3, [r7, #16]
 853              	.L45:
 854              	.LBE103:
 855              	.LBE102:
 856              		.loc 1 1146 0 discriminator 2
 857 0040 FEE7     		b	.L45
 858              	.L44:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 859              		.loc 1 1147 0
 860 0042 294B     		ldr	r3, .L54
 861 0044 1B68     		ldr	r3, [r3]
 862 0046 002B     		cmp	r3, #0
 863 0048 09D0     		beq	.L46
 864              	.LBB104:
ARM GAS  /tmp/cciF1PDz.s 			page 40


 865              	.LBB105:
 866              		.loc 2 237 0 discriminator 1
 867              		.syntax unified
 868              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 869 004a 4FF05003 			mov r3, #80												
 870 004e 83F31188 		msr basepri, r3											
 871 0052 BFF36F8F 		isb														
 872 0056 BFF34F8F 		dsb														
 873              	
 874              	@ 0 "" 2
 875              		.thumb
 876              		.syntax unified
 877 005a FB60     		str	r3, [r7, #12]
 878              	.L47:
 879              	.LBE105:
 880              	.LBE104:
 881              		.loc 1 1147 0 discriminator 3
 882 005c FEE7     		b	.L47
 883              	.L46:
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 884              		.loc 1 1149 0
 885 005e FFF7FEFF 		bl	vTaskSuspendAll
 886              	.LBB106:
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 887              		.loc 1 1153 0
 888 0062 224B     		ldr	r3, .L54+4
 889 0064 1B68     		ldr	r3, [r3]
 890 0066 3B62     		str	r3, [r7, #32]
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 891              		.loc 1 1156 0
 892 0068 7B68     		ldr	r3, [r7, #4]
 893 006a 1A68     		ldr	r2, [r3]
 894 006c 3B68     		ldr	r3, [r7]
 895 006e 1344     		add	r3, r3, r2
 896 0070 FB61     		str	r3, [r7, #28]
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 897              		.loc 1 1158 0
 898 0072 7B68     		ldr	r3, [r7, #4]
 899 0074 1A68     		ldr	r2, [r3]
 900 0076 3B6A     		ldr	r3, [r7, #32]
 901 0078 9A42     		cmp	r2, r3
 902 007a 0BD9     		bls	.L48
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 903              		.loc 1 1165 0
ARM GAS  /tmp/cciF1PDz.s 			page 41


 904 007c 7B68     		ldr	r3, [r7, #4]
 905 007e 1A68     		ldr	r2, [r3]
 906 0080 FB69     		ldr	r3, [r7, #28]
 907 0082 9A42     		cmp	r2, r3
 908 0084 11D9     		bls	.L49
 909              		.loc 1 1165 0 is_stmt 0 discriminator 1
 910 0086 FA69     		ldr	r2, [r7, #28]
 911 0088 3B6A     		ldr	r3, [r7, #32]
 912 008a 9A42     		cmp	r2, r3
 913 008c 0DD9     		bls	.L49
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 914              		.loc 1 1167 0 is_stmt 1
 915 008e 0123     		movs	r3, #1
 916 0090 7B62     		str	r3, [r7, #36]
 917 0092 0AE0     		b	.L49
 918              	.L48:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 919              		.loc 1 1179 0
 920 0094 7B68     		ldr	r3, [r7, #4]
 921 0096 1A68     		ldr	r2, [r3]
 922 0098 FB69     		ldr	r3, [r7, #28]
 923 009a 9A42     		cmp	r2, r3
 924 009c 03D8     		bhi	.L50
 925              		.loc 1 1179 0 is_stmt 0 discriminator 1
 926 009e FA69     		ldr	r2, [r7, #28]
 927 00a0 3B6A     		ldr	r3, [r7, #32]
 928 00a2 9A42     		cmp	r2, r3
 929 00a4 01D9     		bls	.L49
 930              	.L50:
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 931              		.loc 1 1181 0 is_stmt 1
 932 00a6 0123     		movs	r3, #1
 933 00a8 7B62     		str	r3, [r7, #36]
 934              	.L49:
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 935              		.loc 1 1190 0
ARM GAS  /tmp/cciF1PDz.s 			page 42


 936 00aa 7B68     		ldr	r3, [r7, #4]
 937 00ac FA69     		ldr	r2, [r7, #28]
 938 00ae 1A60     		str	r2, [r3]
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 939              		.loc 1 1192 0
 940 00b0 7B6A     		ldr	r3, [r7, #36]
 941 00b2 002B     		cmp	r3, #0
 942 00b4 06D0     		beq	.L51
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 943              		.loc 1 1198 0
 944 00b6 FA69     		ldr	r2, [r7, #28]
 945 00b8 3B6A     		ldr	r3, [r7, #32]
 946 00ba D31A     		subs	r3, r2, r3
 947 00bc 0021     		movs	r1, #0
 948 00be 1846     		mov	r0, r3
 949 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 950              	.L51:
 951              	.LBE106:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 952              		.loc 1 1205 0
 953 00c4 FFF7FEFF 		bl	xTaskResumeAll
 954 00c8 B861     		str	r0, [r7, #24]
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 955              		.loc 1 1209 0
 956 00ca BB69     		ldr	r3, [r7, #24]
 957 00cc 002B     		cmp	r3, #0
 958 00ce 07D1     		bne	.L53
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 959              		.loc 1 1211 0
 960 00d0 074B     		ldr	r3, .L54+8
 961 00d2 4FF08052 		mov	r2, #268435456
 962 00d6 1A60     		str	r2, [r3]
 963              		.syntax unified
 964              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 965 00d8 BFF34F8F 		dsb
 966              	@ 0 "" 2
 967              	@ 1211 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 968 00dc BFF36F8F 		isb
 969              	@ 0 "" 2
 970              		.thumb
 971              		.syntax unified
ARM GAS  /tmp/cciF1PDz.s 			page 43


 972              	.L53:
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 973              		.loc 1 1217 0
 974 00e0 00BF     		nop
 975 00e2 2837     		adds	r7, r7, #40
 976              	.LCFI23:
 977              		.cfi_def_cfa_offset 8
 978 00e4 BD46     		mov	sp, r7
 979              	.LCFI24:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 00e6 80BD     		pop	{r7, pc}
 983              	.L55:
 984              		.align	2
 985              	.L54:
 986 00e8 00000000 		.word	uxSchedulerSuspended
 987 00ec 00000000 		.word	xTickCount
 988 00f0 04ED00E0 		.word	-536810236
 989              		.cfi_endproc
 990              	.LFE9:
 992              		.section	.text.vTaskDelay,"ax",%progbits
 993              		.align	1
 994              		.global	vTaskDelay
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 998              		.fpu fpv4-sp-d16
 1000              	vTaskDelay:
 1001              	.LFB10:
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1002              		.loc 1 1225 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 16
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006 0000 80B5     		push	{r7, lr}
 1007              	.LCFI25:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 7, -8
 1010              		.cfi_offset 14, -4
 1011 0002 84B0     		sub	sp, sp, #16
 1012              	.LCFI26:
 1013              		.cfi_def_cfa_offset 24
 1014 0004 00AF     		add	r7, sp, #0
 1015              	.LCFI27:
 1016              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cciF1PDz.s 			page 44


 1017 0006 7860     		str	r0, [r7, #4]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1018              		.loc 1 1226 0
 1019 0008 0023     		movs	r3, #0
 1020 000a FB60     		str	r3, [r7, #12]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1021              		.loc 1 1229 0
 1022 000c 7B68     		ldr	r3, [r7, #4]
 1023 000e 002B     		cmp	r3, #0
 1024 0010 16D0     		beq	.L57
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1025              		.loc 1 1231 0
 1026 0012 134B     		ldr	r3, .L62
 1027 0014 1B68     		ldr	r3, [r3]
 1028 0016 002B     		cmp	r3, #0
 1029 0018 09D0     		beq	.L58
 1030              	.LBB107:
 1031              	.LBB108:
 1032              		.loc 2 237 0 discriminator 1
 1033              		.syntax unified
 1034              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1035 001a 4FF05003 			mov r3, #80												
 1036 001e 83F31188 		msr basepri, r3											
 1037 0022 BFF36F8F 		isb														
 1038 0026 BFF34F8F 		dsb														
 1039              	
 1040              	@ 0 "" 2
 1041              		.thumb
 1042              		.syntax unified
 1043 002a BB60     		str	r3, [r7, #8]
 1044              	.L59:
 1045              	.LBE108:
 1046              	.LBE107:
 1047              		.loc 1 1231 0 discriminator 1
 1048 002c FEE7     		b	.L59
 1049              	.L58:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1050              		.loc 1 1232 0
 1051 002e FFF7FEFF 		bl	vTaskSuspendAll
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1052              		.loc 1 1243 0
 1053 0032 0021     		movs	r1, #0
 1054 0034 7868     		ldr	r0, [r7, #4]
 1055 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/cciF1PDz.s 			page 45


1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1056              		.loc 1 1245 0
 1057 003a FFF7FEFF 		bl	xTaskResumeAll
 1058 003e F860     		str	r0, [r7, #12]
 1059              	.L57:
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1060              		.loc 1 1254 0
 1061 0040 FB68     		ldr	r3, [r7, #12]
 1062 0042 002B     		cmp	r3, #0
 1063 0044 07D1     		bne	.L61
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1064              		.loc 1 1256 0
 1065 0046 074B     		ldr	r3, .L62+4
 1066 0048 4FF08052 		mov	r2, #268435456
 1067 004c 1A60     		str	r2, [r3]
 1068              		.syntax unified
 1069              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1070 004e BFF34F8F 		dsb
 1071              	@ 0 "" 2
 1072              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1073 0052 BFF36F8F 		isb
 1074              	@ 0 "" 2
 1075              		.thumb
 1076              		.syntax unified
 1077              	.L61:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1078              		.loc 1 1262 0
 1079 0056 00BF     		nop
 1080 0058 1037     		adds	r7, r7, #16
 1081              	.LCFI28:
 1082              		.cfi_def_cfa_offset 8
 1083 005a BD46     		mov	sp, r7
 1084              	.LCFI29:
 1085              		.cfi_def_cfa_register 13
 1086              		@ sp needed
 1087 005c 80BD     		pop	{r7, pc}
 1088              	.L63:
 1089 005e 00BF     		.align	2
 1090              	.L62:
 1091 0060 00000000 		.word	uxSchedulerSuspended
 1092 0064 04ED00E0 		.word	-536810236
 1093              		.cfi_endproc
ARM GAS  /tmp/cciF1PDz.s 			page 46


 1094              	.LFE10:
 1096              		.section	.text.eTaskGetState,"ax",%progbits
 1097              		.align	1
 1098              		.global	eTaskGetState
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1102              		.fpu fpv4-sp-d16
 1104              	eTaskGetState:
 1105              	.LFB11:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1106              		.loc 1 1270 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 24
 1109              		@ frame_needed = 1, uses_anonymous_args = 0
 1110 0000 80B5     		push	{r7, lr}
 1111              	.LCFI30:
 1112              		.cfi_def_cfa_offset 8
 1113              		.cfi_offset 7, -8
 1114              		.cfi_offset 14, -4
 1115 0002 86B0     		sub	sp, sp, #24
 1116              	.LCFI31:
 1117              		.cfi_def_cfa_offset 32
 1118 0004 00AF     		add	r7, sp, #0
 1119              	.LCFI32:
 1120              		.cfi_def_cfa_register 7
 1121 0006 7860     		str	r0, [r7, #4]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1122              		.loc 1 1273 0
 1123 0008 7B68     		ldr	r3, [r7, #4]
 1124 000a 3B61     		str	r3, [r7, #16]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1125              		.loc 1 1275 0
 1126 000c 3B69     		ldr	r3, [r7, #16]
 1127 000e 002B     		cmp	r3, #0
 1128 0010 09D1     		bne	.L65
 1129              	.LBB109:
 1130              	.LBB110:
 1131              		.loc 2 237 0 discriminator 1
 1132              		.syntax unified
 1133              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1134 0012 4FF05003 			mov r3, #80												
 1135 0016 83F31188 		msr basepri, r3											
 1136 001a BFF36F8F 		isb														
 1137 001e BFF34F8F 		dsb														
 1138              	
 1139              	@ 0 "" 2
ARM GAS  /tmp/cciF1PDz.s 			page 47


 1140              		.thumb
 1141              		.syntax unified
 1142 0022 BB60     		str	r3, [r7, #8]
 1143              	.L66:
 1144              	.LBE110:
 1145              	.LBE109:
 1146              		.loc 1 1275 0 discriminator 1
 1147 0024 FEE7     		b	.L66
 1148              	.L65:
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1149              		.loc 1 1277 0
 1150 0026 1D4B     		ldr	r3, .L77
 1151 0028 1B68     		ldr	r3, [r3]
 1152 002a 3A69     		ldr	r2, [r7, #16]
 1153 002c 9A42     		cmp	r2, r3
 1154 002e 02D1     		bne	.L67
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1155              		.loc 1 1280 0
 1156 0030 0023     		movs	r3, #0
 1157 0032 FB75     		strb	r3, [r7, #23]
 1158 0034 2DE0     		b	.L68
 1159              	.L67:
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1160              		.loc 1 1284 0
 1161 0036 FFF7FEFF 		bl	vPortEnterCritical
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1162              		.loc 1 1286 0
 1163 003a 3B69     		ldr	r3, [r7, #16]
 1164 003c 5B69     		ldr	r3, [r3, #20]
 1165 003e FB60     		str	r3, [r7, #12]
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1166              		.loc 1 1288 0
 1167 0040 FFF7FEFF 		bl	vPortExitCritical
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 1168              		.loc 1 1290 0
 1169 0044 164B     		ldr	r3, .L77+4
 1170 0046 1B68     		ldr	r3, [r3]
 1171 0048 FA68     		ldr	r2, [r7, #12]
 1172 004a 9A42     		cmp	r2, r3
 1173 004c 04D0     		beq	.L69
 1174              		.loc 1 1290 0 is_stmt 0 discriminator 1
 1175 004e 154B     		ldr	r3, .L77+8
 1176 0050 1B68     		ldr	r3, [r3]
 1177 0052 FA68     		ldr	r2, [r7, #12]
 1178 0054 9A42     		cmp	r2, r3
 1179 0056 02D1     		bne	.L70
 1180              	.L69:
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cciF1PDz.s 			page 48


1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1181              		.loc 1 1294 0 is_stmt 1
 1182 0058 0223     		movs	r3, #2
 1183 005a FB75     		strb	r3, [r7, #23]
 1184 005c 19E0     		b	.L68
 1185              	.L70:
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1186              		.loc 1 1298 0
 1187 005e FB68     		ldr	r3, [r7, #12]
 1188 0060 114A     		ldr	r2, .L77+12
 1189 0062 9342     		cmp	r3, r2
 1190 0064 09D1     		bne	.L71
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1191              		.loc 1 1303 0
 1192 0066 3B69     		ldr	r3, [r7, #16]
 1193 0068 9B6A     		ldr	r3, [r3, #40]
 1194 006a 002B     		cmp	r3, #0
 1195 006c 02D1     		bne	.L72
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
 1196              		.loc 1 1305 0
 1197 006e 0323     		movs	r3, #3
 1198 0070 FB75     		strb	r3, [r7, #23]
 1199 0072 0EE0     		b	.L68
 1200              	.L72:
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1201              		.loc 1 1309 0
 1202 0074 0223     		movs	r3, #2
 1203 0076 FB75     		strb	r3, [r7, #23]
 1204 0078 0BE0     		b	.L68
 1205              	.L71:
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1206              		.loc 1 1315 0
 1207 007a FB68     		ldr	r3, [r7, #12]
 1208 007c 0B4A     		ldr	r2, .L77+16
 1209 007e 9342     		cmp	r3, r2
 1210 0080 02D0     		beq	.L74
 1211              		.loc 1 1315 0 is_stmt 0 discriminator 1
 1212 0082 FB68     		ldr	r3, [r7, #12]
 1213 0084 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 49


 1214 0086 02D1     		bne	.L75
 1215              	.L74:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1216              		.loc 1 1320 0 is_stmt 1
 1217 0088 0423     		movs	r3, #4
 1218 008a FB75     		strb	r3, [r7, #23]
 1219 008c 01E0     		b	.L68
 1220              	.L75:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1221              		.loc 1 1328 0
 1222 008e 0123     		movs	r3, #1
 1223 0090 FB75     		strb	r3, [r7, #23]
 1224              	.L68:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1225              		.loc 1 1332 0
 1226 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1227              		.loc 1 1333 0
 1228 0094 1846     		mov	r0, r3
 1229 0096 1837     		adds	r7, r7, #24
 1230              	.LCFI33:
 1231              		.cfi_def_cfa_offset 8
 1232 0098 BD46     		mov	sp, r7
 1233              	.LCFI34:
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 009a 80BD     		pop	{r7, pc}
 1237              	.L78:
 1238              		.align	2
 1239              	.L77:
 1240 009c 00000000 		.word	pxCurrentTCB
 1241 00a0 00000000 		.word	pxDelayedTaskList
 1242 00a4 00000000 		.word	pxOverflowDelayedTaskList
 1243 00a8 00000000 		.word	xSuspendedTaskList
 1244 00ac 00000000 		.word	xTasksWaitingTermination
 1245              		.cfi_endproc
 1246              	.LFE11:
 1248              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1249              		.align	1
 1250              		.global	uxTaskPriorityGet
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
ARM GAS  /tmp/cciF1PDz.s 			page 50


 1254              		.fpu fpv4-sp-d16
 1256              	uxTaskPriorityGet:
 1257              	.LFB12:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1258              		.loc 1 1341 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 16
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262 0000 80B5     		push	{r7, lr}
 1263              	.LCFI35:
 1264              		.cfi_def_cfa_offset 8
 1265              		.cfi_offset 7, -8
 1266              		.cfi_offset 14, -4
 1267 0002 84B0     		sub	sp, sp, #16
 1268              	.LCFI36:
 1269              		.cfi_def_cfa_offset 24
 1270 0004 00AF     		add	r7, sp, #0
 1271              	.LCFI37:
 1272              		.cfi_def_cfa_register 7
 1273 0006 7860     		str	r0, [r7, #4]
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1274              		.loc 1 1345 0
 1275 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1276              		.loc 1 1349 0
 1277 000c 7B68     		ldr	r3, [r7, #4]
 1278 000e 002B     		cmp	r3, #0
 1279 0010 02D1     		bne	.L80
 1280              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1281 0012 074B     		ldr	r3, .L83
 1282 0014 1B68     		ldr	r3, [r3]
 1283 0016 00E0     		b	.L81
 1284              	.L80:
 1285              		.loc 1 1349 0 discriminator 2
 1286 0018 7B68     		ldr	r3, [r7, #4]
 1287              	.L81:
 1288              		.loc 1 1349 0 discriminator 4
 1289 001a FB60     		str	r3, [r7, #12]
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1290              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1291 001c FB68     		ldr	r3, [r7, #12]
 1292 001e DB6A     		ldr	r3, [r3, #44]
 1293 0020 BB60     		str	r3, [r7, #8]
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciF1PDz.s 			page 51


1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1294              		.loc 1 1352 0 discriminator 4
 1295 0022 FFF7FEFF 		bl	vPortExitCritical
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1296              		.loc 1 1354 0 discriminator 4
 1297 0026 BB68     		ldr	r3, [r7, #8]
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1298              		.loc 1 1355 0 discriminator 4
 1299 0028 1846     		mov	r0, r3
 1300 002a 1037     		adds	r7, r7, #16
 1301              	.LCFI38:
 1302              		.cfi_def_cfa_offset 8
 1303 002c BD46     		mov	sp, r7
 1304              	.LCFI39:
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 002e 80BD     		pop	{r7, pc}
 1308              	.L84:
 1309              		.align	2
 1310              	.L83:
 1311 0030 00000000 		.word	pxCurrentTCB
 1312              		.cfi_endproc
 1313              	.LFE12:
 1315              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1316              		.align	1
 1317              		.global	uxTaskPriorityGetFromISR
 1318              		.syntax unified
 1319              		.thumb
 1320              		.thumb_func
 1321              		.fpu fpv4-sp-d16
 1323              	uxTaskPriorityGetFromISR:
 1324              	.LFB13:
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1325              		.loc 1 1363 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 32
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329 0000 80B5     		push	{r7, lr}
 1330              	.LCFI40:
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334 0002 88B0     		sub	sp, sp, #32
 1335              	.LCFI41:
 1336              		.cfi_def_cfa_offset 40
 1337 0004 00AF     		add	r7, sp, #0
 1338              	.LCFI42:
 1339              		.cfi_def_cfa_register 7
 1340 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 52


1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1341              		.loc 1 1383 0
 1342 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1343              	.LBB111:
 1344              	.LBB112:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1345              		.loc 2 253 0
 1346              		.syntax unified
 1347              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1348 000c EFF31182 			mrs r2, basepri											
 1349 0010 4FF05003 		mov r3, #80												
 1350 0014 83F31188 		msr basepri, r3											
 1351 0018 BFF36F8F 		isb														
 1352 001c BFF34F8F 		dsb														
 1353              	
 1354              	@ 0 "" 2
 1355              		.thumb
 1356              		.syntax unified
 1357 0020 3A61     		str	r2, [r7, #16]
 1358 0022 FB60     		str	r3, [r7, #12]
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
ARM GAS  /tmp/cciF1PDz.s 			page 53


 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1359              		.loc 2 265 0
 1360 0024 3B69     		ldr	r3, [r7, #16]
 1361              	.LBE112:
 1362              	.LBE111:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1363              		.loc 1 1385 0
 1364 0026 FB61     		str	r3, [r7, #28]
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1365              		.loc 1 1389 0
 1366 0028 7B68     		ldr	r3, [r7, #4]
 1367 002a 002B     		cmp	r3, #0
 1368 002c 02D1     		bne	.L87
 1369              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1370 002e 094B     		ldr	r3, .L90
 1371 0030 1B68     		ldr	r3, [r3]
 1372 0032 00E0     		b	.L88
 1373              	.L87:
 1374              		.loc 1 1389 0 discriminator 2
 1375 0034 7B68     		ldr	r3, [r7, #4]
 1376              	.L88:
 1377              		.loc 1 1389 0 discriminator 4
 1378 0036 BB61     		str	r3, [r7, #24]
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1379              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1380 0038 BB69     		ldr	r3, [r7, #24]
 1381 003a DB6A     		ldr	r3, [r3, #44]
 1382 003c 7B61     		str	r3, [r7, #20]
 1383 003e FB69     		ldr	r3, [r7, #28]
 1384 0040 BB60     		str	r3, [r7, #8]
 1385              	.LBB113:
 1386              	.LBB114:
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1387              		.loc 2 271 0 discriminator 4
 1388 0042 BB68     		ldr	r3, [r7, #8]
 1389              		.syntax unified
 1390              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1391 0044 83F31188 			msr basepri, r3	
 1392              	@ 0 "" 2
 1393              		.thumb
ARM GAS  /tmp/cciF1PDz.s 			page 54


 1394              		.syntax unified
 1395              	.LBE114:
 1396              	.LBE113:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1397              		.loc 1 1394 0 discriminator 4
 1398 0048 7B69     		ldr	r3, [r7, #20]
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1399              		.loc 1 1395 0 discriminator 4
 1400 004a 1846     		mov	r0, r3
 1401 004c 2037     		adds	r7, r7, #32
 1402              	.LCFI43:
 1403              		.cfi_def_cfa_offset 8
 1404 004e BD46     		mov	sp, r7
 1405              	.LCFI44:
 1406              		.cfi_def_cfa_register 13
 1407              		@ sp needed
 1408 0050 80BD     		pop	{r7, pc}
 1409              	.L91:
 1410 0052 00BF     		.align	2
 1411              	.L90:
 1412 0054 00000000 		.word	pxCurrentTCB
 1413              		.cfi_endproc
 1414              	.LFE13:
 1416              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1417              		.align	1
 1418              		.global	vTaskPrioritySet
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu fpv4-sp-d16
 1424              	vTaskPrioritySet:
 1425              	.LFB14:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1426              		.loc 1 1403 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 32
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430 0000 80B5     		push	{r7, lr}
 1431              	.LCFI45:
 1432              		.cfi_def_cfa_offset 8
 1433              		.cfi_offset 7, -8
 1434              		.cfi_offset 14, -4
 1435 0002 88B0     		sub	sp, sp, #32
 1436              	.LCFI46:
 1437              		.cfi_def_cfa_offset 40
 1438 0004 00AF     		add	r7, sp, #0
 1439              	.LCFI47:
ARM GAS  /tmp/cciF1PDz.s 			page 55


 1440              		.cfi_def_cfa_register 7
 1441 0006 7860     		str	r0, [r7, #4]
 1442 0008 3960     		str	r1, [r7]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1443              		.loc 1 1406 0
 1444 000a 0023     		movs	r3, #0
 1445 000c FB61     		str	r3, [r7, #28]
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1446              		.loc 1 1408 0
 1447 000e 3B68     		ldr	r3, [r7]
 1448 0010 062B     		cmp	r3, #6
 1449 0012 09D9     		bls	.L93
 1450              	.LBB115:
 1451              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1452              		.loc 2 237 0 discriminator 1
 1453              		.syntax unified
 1454              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1455 0014 4FF05003 			mov r3, #80												
 1456 0018 83F31188 		msr basepri, r3											
 1457 001c BFF36F8F 		isb														
 1458 0020 BFF34F8F 		dsb														
 1459              	
 1460              	@ 0 "" 2
 1461              		.thumb
 1462              		.syntax unified
 1463 0024 FB60     		str	r3, [r7, #12]
 1464              	.L94:
 1465              	.LBE116:
 1466              	.LBE115:
 1467              		.loc 1 1408 0 discriminator 1
 1468 0026 FEE7     		b	.L94
 1469              	.L93:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1470              		.loc 1 1411 0
 1471 0028 3B68     		ldr	r3, [r7]
 1472 002a 062B     		cmp	r3, #6
 1473 002c 01D9     		bls	.L95
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1474              		.loc 1 1413 0
 1475 002e 0623     		movs	r3, #6
 1476 0030 3B60     		str	r3, [r7]
 1477              	.L95:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1478              		.loc 1 1420 0
ARM GAS  /tmp/cciF1PDz.s 			page 56


 1479 0032 FFF7FEFF 		bl	vPortEnterCritical
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1480              		.loc 1 1424 0
 1481 0036 7B68     		ldr	r3, [r7, #4]
 1482 0038 002B     		cmp	r3, #0
 1483 003a 02D1     		bne	.L96
 1484              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1485 003c 394B     		ldr	r3, .L105
 1486 003e 1B68     		ldr	r3, [r3]
 1487 0040 00E0     		b	.L97
 1488              	.L96:
 1489              		.loc 1 1424 0 discriminator 2
 1490 0042 7B68     		ldr	r3, [r7, #4]
 1491              	.L97:
 1492              		.loc 1 1424 0 discriminator 4
 1493 0044 BB61     		str	r3, [r7, #24]
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
 1494              		.loc 1 1434 0 is_stmt 1 discriminator 4
 1495 0046 BB69     		ldr	r3, [r7, #24]
 1496 0048 DB6A     		ldr	r3, [r3, #44]
 1497 004a 7B61     		str	r3, [r7, #20]
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1498              		.loc 1 1438 0 discriminator 4
 1499 004c 7A69     		ldr	r2, [r7, #20]
 1500 004e 3B68     		ldr	r3, [r7]
 1501 0050 9A42     		cmp	r2, r3
 1502 0052 60D0     		beq	.L98
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1503              		.loc 1 1442 0
 1504 0054 3A68     		ldr	r2, [r7]
 1505 0056 7B69     		ldr	r3, [r7, #20]
 1506 0058 9A42     		cmp	r2, r3
 1507 005a 0DD9     		bls	.L99
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1508              		.loc 1 1444 0
 1509 005c 314B     		ldr	r3, .L105
 1510 005e 1B68     		ldr	r3, [r3]
 1511 0060 BA69     		ldr	r2, [r7, #24]
ARM GAS  /tmp/cciF1PDz.s 			page 57


 1512 0062 9A42     		cmp	r2, r3
 1513 0064 0FD0     		beq	.L100
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1514              		.loc 1 1449 0
 1515 0066 2F4B     		ldr	r3, .L105
 1516 0068 1B68     		ldr	r3, [r3]
 1517 006a DA6A     		ldr	r2, [r3, #44]
 1518 006c 3B68     		ldr	r3, [r7]
 1519 006e 9A42     		cmp	r2, r3
 1520 0070 09D8     		bhi	.L100
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1521              		.loc 1 1451 0
 1522 0072 0123     		movs	r3, #1
 1523 0074 FB61     		str	r3, [r7, #28]
 1524 0076 06E0     		b	.L100
 1525              	.L99:
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1526              		.loc 1 1465 0
 1527 0078 2A4B     		ldr	r3, .L105
 1528 007a 1B68     		ldr	r3, [r3]
 1529 007c BA69     		ldr	r2, [r7, #24]
 1530 007e 9A42     		cmp	r2, r3
 1531 0080 01D1     		bne	.L100
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1532              		.loc 1 1470 0
 1533 0082 0123     		movs	r3, #1
 1534 0084 FB61     		str	r3, [r7, #28]
 1535              	.L100:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cciF1PDz.s 			page 58


1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1536              		.loc 1 1482 0
 1537 0086 BB69     		ldr	r3, [r7, #24]
 1538 0088 DB6A     		ldr	r3, [r3, #44]
 1539 008a 3B61     		str	r3, [r7, #16]
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 1540              		.loc 1 1502 0
 1541 008c BB69     		ldr	r3, [r7, #24]
 1542 008e 3A68     		ldr	r2, [r7]
 1543 0090 DA62     		str	r2, [r3, #44]
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1544              		.loc 1 1508 0
 1545 0092 BB69     		ldr	r3, [r7, #24]
 1546 0094 9B69     		ldr	r3, [r3, #24]
 1547 0096 002B     		cmp	r3, #0
 1548 0098 04DB     		blt	.L101
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1549              		.loc 1 1510 0
 1550 009a 3B68     		ldr	r3, [r7]
 1551 009c C3F10702 		rsb	r2, r3, #7
 1552 00a0 BB69     		ldr	r3, [r7, #24]
 1553 00a2 9A61     		str	r2, [r3, #24]
 1554              	.L101:
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cciF1PDz.s 			page 59


1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1555              		.loc 1 1521 0
 1556 00a4 BB69     		ldr	r3, [r7, #24]
 1557 00a6 5969     		ldr	r1, [r3, #20]
 1558 00a8 3A69     		ldr	r2, [r7, #16]
 1559 00aa 1346     		mov	r3, r2
 1560 00ac 9B00     		lsls	r3, r3, #2
 1561 00ae 1344     		add	r3, r3, r2
 1562 00b0 9B00     		lsls	r3, r3, #2
 1563 00b2 1D4A     		ldr	r2, .L105+4
 1564 00b4 1344     		add	r3, r3, r2
 1565 00b6 9942     		cmp	r1, r3
 1566 00b8 01D1     		bne	.L102
 1567              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1568 00ba 0123     		movs	r3, #1
 1569 00bc 00E0     		b	.L103
 1570              	.L102:
 1571              		.loc 1 1521 0 discriminator 2
 1572 00be 0023     		movs	r3, #0
 1573              	.L103:
 1574              		.loc 1 1521 0 discriminator 4
 1575 00c0 002B     		cmp	r3, #0
 1576 00c2 28D0     		beq	.L98
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1577              		.loc 1 1526 0 is_stmt 1
 1578 00c4 BB69     		ldr	r3, [r7, #24]
 1579 00c6 0433     		adds	r3, r3, #4
 1580 00c8 1846     		mov	r0, r3
 1581 00ca FFF7FEFF 		bl	uxListRemove
 1582 00ce 0346     		mov	r3, r0
 1583 00d0 002B     		cmp	r3, #0
 1584 00d2 09D1     		bne	.L104
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1585              		.loc 1 1531 0
 1586 00d4 0122     		movs	r2, #1
 1587 00d6 3B69     		ldr	r3, [r7, #16]
 1588 00d8 02FA03F3 		lsl	r3, r2, r3
 1589 00dc DA43     		mvns	r2, r3
 1590 00de 134B     		ldr	r3, .L105+8
 1591 00e0 1B68     		ldr	r3, [r3]
 1592 00e2 1340     		ands	r3, r3, r2
 1593 00e4 114A     		ldr	r2, .L105+8
 1594 00e6 1360     		str	r3, [r2]
 1595              	.L104:
ARM GAS  /tmp/cciF1PDz.s 			page 60


1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1596              		.loc 1 1537 0
 1597 00e8 BB69     		ldr	r3, [r7, #24]
 1598 00ea DB6A     		ldr	r3, [r3, #44]
 1599 00ec 0122     		movs	r2, #1
 1600 00ee 9A40     		lsls	r2, r2, r3
 1601 00f0 0E4B     		ldr	r3, .L105+8
 1602 00f2 1B68     		ldr	r3, [r3]
 1603 00f4 1343     		orrs	r3, r3, r2
 1604 00f6 0D4A     		ldr	r2, .L105+8
 1605 00f8 1360     		str	r3, [r2]
 1606 00fa BB69     		ldr	r3, [r7, #24]
 1607 00fc DA6A     		ldr	r2, [r3, #44]
 1608 00fe 1346     		mov	r3, r2
 1609 0100 9B00     		lsls	r3, r3, #2
 1610 0102 1344     		add	r3, r3, r2
 1611 0104 9B00     		lsls	r3, r3, #2
 1612 0106 084A     		ldr	r2, .L105+4
 1613 0108 1A44     		add	r2, r2, r3
 1614 010a BB69     		ldr	r3, [r7, #24]
 1615 010c 0433     		adds	r3, r3, #4
 1616 010e 1946     		mov	r1, r3
 1617 0110 1046     		mov	r0, r2
 1618 0112 FFF7FEFF 		bl	vListInsertEnd
 1619              	.L98:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1620              		.loc 1 1558 0
 1621 0116 FFF7FEFF 		bl	vPortExitCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1622              		.loc 1 1559 0
 1623 011a 00BF     		nop
 1624 011c 2037     		adds	r7, r7, #32
ARM GAS  /tmp/cciF1PDz.s 			page 61


 1625              	.LCFI48:
 1626              		.cfi_def_cfa_offset 8
 1627 011e BD46     		mov	sp, r7
 1628              	.LCFI49:
 1629              		.cfi_def_cfa_register 13
 1630              		@ sp needed
 1631 0120 80BD     		pop	{r7, pc}
 1632              	.L106:
 1633 0122 00BF     		.align	2
 1634              	.L105:
 1635 0124 00000000 		.word	pxCurrentTCB
 1636 0128 00000000 		.word	pxReadyTasksLists
 1637 012c 00000000 		.word	uxTopReadyPriority
 1638              		.cfi_endproc
 1639              	.LFE14:
 1641              		.section	.text.vTaskSuspend,"ax",%progbits
 1642              		.align	1
 1643              		.global	vTaskSuspend
 1644              		.syntax unified
 1645              		.thumb
 1646              		.thumb_func
 1647              		.fpu fpv4-sp-d16
 1649              	vTaskSuspend:
 1650              	.LFB15:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1651              		.loc 1 1567 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 16
 1654              		@ frame_needed = 1, uses_anonymous_args = 0
 1655 0000 80B5     		push	{r7, lr}
 1656              	.LCFI50:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 7, -8
 1659              		.cfi_offset 14, -4
 1660 0002 84B0     		sub	sp, sp, #16
 1661              	.LCFI51:
 1662              		.cfi_def_cfa_offset 24
 1663 0004 00AF     		add	r7, sp, #0
 1664              	.LCFI52:
 1665              		.cfi_def_cfa_register 7
 1666 0006 7860     		str	r0, [r7, #4]
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1667              		.loc 1 1570 0
 1668 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
ARM GAS  /tmp/cciF1PDz.s 			page 62


 1669              		.loc 1 1574 0
 1670 000c 7B68     		ldr	r3, [r7, #4]
 1671 000e 002B     		cmp	r3, #0
 1672 0010 02D1     		bne	.L108
 1673              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1674 0012 374B     		ldr	r3, .L121
 1675 0014 1B68     		ldr	r3, [r3]
 1676 0016 00E0     		b	.L109
 1677              	.L108:
 1678              		.loc 1 1574 0 discriminator 2
 1679 0018 7B68     		ldr	r3, [r7, #4]
 1680              	.L109:
 1681              		.loc 1 1574 0 discriminator 4
 1682 001a FB60     		str	r3, [r7, #12]
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1683              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1684 001c FB68     		ldr	r3, [r7, #12]
 1685 001e 0433     		adds	r3, r3, #4
 1686 0020 1846     		mov	r0, r3
 1687 0022 FFF7FEFF 		bl	uxListRemove
 1688 0026 0346     		mov	r3, r0
 1689 0028 002B     		cmp	r3, #0
 1690 002a 15D1     		bne	.L110
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1691              		.loc 1 1582 0
 1692 002c FB68     		ldr	r3, [r7, #12]
 1693 002e DA6A     		ldr	r2, [r3, #44]
 1694 0030 3049     		ldr	r1, .L121+4
 1695 0032 1346     		mov	r3, r2
 1696 0034 9B00     		lsls	r3, r3, #2
 1697 0036 1344     		add	r3, r3, r2
 1698 0038 9B00     		lsls	r3, r3, #2
 1699 003a 0B44     		add	r3, r3, r1
 1700 003c 1B68     		ldr	r3, [r3]
 1701 003e 002B     		cmp	r3, #0
 1702 0040 0AD1     		bne	.L110
 1703              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1704 0042 FB68     		ldr	r3, [r7, #12]
 1705 0044 DB6A     		ldr	r3, [r3, #44]
 1706 0046 0122     		movs	r2, #1
 1707 0048 02FA03F3 		lsl	r3, r2, r3
 1708 004c DA43     		mvns	r2, r3
 1709 004e 2A4B     		ldr	r3, .L121+8
 1710 0050 1B68     		ldr	r3, [r3]
 1711 0052 1340     		ands	r3, r3, r2
 1712 0054 284A     		ldr	r2, .L121+8
 1713 0056 1360     		str	r3, [r2]
 1714              	.L110:
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cciF1PDz.s 			page 63


1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1715              		.loc 1 1590 0 is_stmt 1
 1716 0058 FB68     		ldr	r3, [r7, #12]
 1717 005a 9B6A     		ldr	r3, [r3, #40]
 1718 005c 002B     		cmp	r3, #0
 1719 005e 04D0     		beq	.L112
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1720              		.loc 1 1592 0
 1721 0060 FB68     		ldr	r3, [r7, #12]
 1722 0062 1833     		adds	r3, r3, #24
 1723 0064 1846     		mov	r0, r3
 1724 0066 FFF7FEFF 		bl	uxListRemove
 1725              	.L112:
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1726              		.loc 1 1599 0
 1727 006a FB68     		ldr	r3, [r7, #12]
 1728 006c 0433     		adds	r3, r3, #4
 1729 006e 1946     		mov	r1, r3
 1730 0070 2248     		ldr	r0, .L121+12
 1731 0072 FFF7FEFF 		bl	vListInsertEnd
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1732              		.loc 1 1601 0
 1733 0076 FFF7FEFF 		bl	vPortExitCritical
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1734              		.loc 1 1603 0
 1735 007a 214B     		ldr	r3, .L121+16
 1736 007c 1B68     		ldr	r3, [r3]
 1737 007e 002B     		cmp	r3, #0
 1738 0080 05D0     		beq	.L113
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1739              		.loc 1 1607 0
 1740 0082 FFF7FEFF 		bl	vPortEnterCritical
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1741              		.loc 1 1609 0
 1742 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1743              		.loc 1 1611 0
 1744 008a FFF7FEFF 		bl	vPortExitCritical
 1745              	.L113:
ARM GAS  /tmp/cciF1PDz.s 			page 64


1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1746              		.loc 1 1618 0
 1747 008e 184B     		ldr	r3, .L121
 1748 0090 1B68     		ldr	r3, [r3]
 1749 0092 FA68     		ldr	r2, [r7, #12]
 1750 0094 9A42     		cmp	r2, r3
 1751 0096 26D1     		bne	.L120
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1752              		.loc 1 1620 0
 1753 0098 194B     		ldr	r3, .L121+16
 1754 009a 1B68     		ldr	r3, [r3]
 1755 009c 002B     		cmp	r3, #0
 1756 009e 16D0     		beq	.L115
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1757              		.loc 1 1623 0
 1758 00a0 184B     		ldr	r3, .L121+20
 1759 00a2 1B68     		ldr	r3, [r3]
 1760 00a4 002B     		cmp	r3, #0
 1761 00a6 09D0     		beq	.L116
 1762              	.LBB117:
 1763              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1764              		.loc 2 237 0 discriminator 1
 1765              		.syntax unified
 1766              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1767 00a8 4FF05003 			mov r3, #80												
 1768 00ac 83F31188 		msr basepri, r3											
 1769 00b0 BFF36F8F 		isb														
 1770 00b4 BFF34F8F 		dsb														
 1771              	
 1772              	@ 0 "" 2
 1773              		.thumb
 1774              		.syntax unified
 1775 00b8 BB60     		str	r3, [r7, #8]
 1776              	.L117:
 1777              	.LBE118:
 1778              	.LBE117:
 1779              		.loc 1 1623 0 discriminator 1
 1780 00ba FEE7     		b	.L117
 1781              	.L116:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1782              		.loc 1 1624 0
 1783 00bc 124B     		ldr	r3, .L121+24
 1784 00be 4FF08052 		mov	r2, #268435456
 1785 00c2 1A60     		str	r2, [r3]
 1786              		.syntax unified
 1787              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1788 00c4 BFF34F8F 		dsb
ARM GAS  /tmp/cciF1PDz.s 			page 65


 1789              	@ 0 "" 2
 1790              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1791 00c8 BFF36F8F 		isb
 1792              	@ 0 "" 2
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1793              		.loc 1 1649 0
 1794              		.thumb
 1795              		.syntax unified
 1796 00cc 0BE0     		b	.L120
 1797              	.L115:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1798              		.loc 1 1631 0
 1799 00ce 0B4B     		ldr	r3, .L121+12
 1800 00d0 1A68     		ldr	r2, [r3]
 1801 00d2 0E4B     		ldr	r3, .L121+28
 1802 00d4 1B68     		ldr	r3, [r3]
 1803 00d6 9A42     		cmp	r2, r3
 1804 00d8 03D1     		bne	.L119
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1805              		.loc 1 1637 0
 1806 00da 054B     		ldr	r3, .L121
 1807 00dc 0022     		movs	r2, #0
 1808 00de 1A60     		str	r2, [r3]
 1809              		.loc 1 1649 0
 1810 00e0 01E0     		b	.L120
 1811              	.L119:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1812              		.loc 1 1641 0
 1813 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 1814              	.L120:
 1815              		.loc 1 1649 0
 1816 00e6 00BF     		nop
 1817 00e8 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cciF1PDz.s 			page 66


 1818              	.LCFI53:
 1819              		.cfi_def_cfa_offset 8
 1820 00ea BD46     		mov	sp, r7
 1821              	.LCFI54:
 1822              		.cfi_def_cfa_register 13
 1823              		@ sp needed
 1824 00ec 80BD     		pop	{r7, pc}
 1825              	.L122:
 1826 00ee 00BF     		.align	2
 1827              	.L121:
 1828 00f0 00000000 		.word	pxCurrentTCB
 1829 00f4 00000000 		.word	pxReadyTasksLists
 1830 00f8 00000000 		.word	uxTopReadyPriority
 1831 00fc 00000000 		.word	xSuspendedTaskList
 1832 0100 00000000 		.word	xSchedulerRunning
 1833 0104 00000000 		.word	uxSchedulerSuspended
 1834 0108 04ED00E0 		.word	-536810236
 1835 010c 00000000 		.word	uxCurrentNumberOfTasks
 1836              		.cfi_endproc
 1837              	.LFE15:
 1839              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1840              		.align	1
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu fpv4-sp-d16
 1846              	prvTaskIsTaskSuspended:
 1847              	.LFB16:
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1848              		.loc 1 1657 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 24
 1851              		@ frame_needed = 1, uses_anonymous_args = 0
 1852              		@ link register save eliminated.
 1853 0000 80B4     		push	{r7}
 1854              	.LCFI55:
 1855              		.cfi_def_cfa_offset 4
 1856              		.cfi_offset 7, -4
 1857 0002 87B0     		sub	sp, sp, #28
 1858              	.LCFI56:
 1859              		.cfi_def_cfa_offset 32
 1860 0004 00AF     		add	r7, sp, #0
 1861              	.LCFI57:
 1862              		.cfi_def_cfa_register 7
 1863 0006 7860     		str	r0, [r7, #4]
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1864              		.loc 1 1658 0
 1865 0008 0023     		movs	r3, #0
 1866 000a 7B61     		str	r3, [r7, #20]
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
ARM GAS  /tmp/cciF1PDz.s 			page 67


 1867              		.loc 1 1659 0
 1868 000c 7B68     		ldr	r3, [r7, #4]
 1869 000e 3B61     		str	r3, [r7, #16]
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1870              		.loc 1 1665 0
 1871 0010 7B68     		ldr	r3, [r7, #4]
 1872 0012 002B     		cmp	r3, #0
 1873 0014 09D1     		bne	.L124
 1874              	.LBB119:
 1875              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1876              		.loc 2 237 0 discriminator 1
 1877              		.syntax unified
 1878              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1879 0016 4FF05003 			mov r3, #80												
 1880 001a 83F31188 		msr basepri, r3											
 1881 001e BFF36F8F 		isb														
 1882 0022 BFF34F8F 		dsb														
 1883              	
 1884              	@ 0 "" 2
 1885              		.thumb
 1886              		.syntax unified
 1887 0026 FB60     		str	r3, [r7, #12]
 1888              	.L125:
 1889              	.LBE120:
 1890              	.LBE119:
 1891              		.loc 1 1665 0 discriminator 1
 1892 0028 FEE7     		b	.L125
 1893              	.L124:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1894              		.loc 1 1668 0
 1895 002a 3B69     		ldr	r3, [r7, #16]
 1896 002c 5B69     		ldr	r3, [r3, #20]
 1897 002e 0F4A     		ldr	r2, .L132
 1898 0030 9342     		cmp	r3, r2
 1899 0032 01D1     		bne	.L126
 1900              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1901 0034 0123     		movs	r3, #1
 1902 0036 00E0     		b	.L127
 1903              	.L126:
 1904              		.loc 1 1668 0 discriminator 2
 1905 0038 0023     		movs	r3, #0
 1906              	.L127:
 1907              		.loc 1 1668 0 discriminator 4
 1908 003a 002B     		cmp	r3, #0
 1909 003c 0FD0     		beq	.L128
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1910              		.loc 1 1671 0 is_stmt 1
ARM GAS  /tmp/cciF1PDz.s 			page 68


 1911 003e 3B69     		ldr	r3, [r7, #16]
 1912 0040 9B6A     		ldr	r3, [r3, #40]
 1913 0042 0B4A     		ldr	r2, .L132+4
 1914 0044 9342     		cmp	r3, r2
 1915 0046 0AD0     		beq	.L128
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1916              		.loc 1 1675 0
 1917 0048 3B69     		ldr	r3, [r7, #16]
 1918 004a 9B6A     		ldr	r3, [r3, #40]
 1919 004c 002B     		cmp	r3, #0
 1920 004e 01D1     		bne	.L129
 1921              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1922 0050 0123     		movs	r3, #1
 1923 0052 00E0     		b	.L130
 1924              	.L129:
 1925              		.loc 1 1675 0 discriminator 2
 1926 0054 0023     		movs	r3, #0
 1927              	.L130:
 1928              		.loc 1 1675 0 discriminator 4
 1929 0056 002B     		cmp	r3, #0
 1930 0058 01D0     		beq	.L128
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1931              		.loc 1 1677 0 is_stmt 1
 1932 005a 0123     		movs	r3, #1
 1933 005c 7B61     		str	r3, [r7, #20]
 1934              	.L128:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1935              		.loc 1 1694 0
 1936 005e 7B69     		ldr	r3, [r7, #20]
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1937              		.loc 1 1695 0
 1938 0060 1846     		mov	r0, r3
 1939 0062 1C37     		adds	r7, r7, #28
 1940              	.LCFI58:
 1941              		.cfi_def_cfa_offset 4
 1942 0064 BD46     		mov	sp, r7
 1943              	.LCFI59:
ARM GAS  /tmp/cciF1PDz.s 			page 69


 1944              		.cfi_def_cfa_register 13
 1945              		@ sp needed
 1946 0066 5DF8047B 		ldr	r7, [sp], #4
 1947              	.LCFI60:
 1948              		.cfi_restore 7
 1949              		.cfi_def_cfa_offset 0
 1950 006a 7047     		bx	lr
 1951              	.L133:
 1952              		.align	2
 1953              	.L132:
 1954 006c 00000000 		.word	xSuspendedTaskList
 1955 0070 00000000 		.word	xPendingReadyList
 1956              		.cfi_endproc
 1957              	.LFE16:
 1959              		.section	.text.vTaskResume,"ax",%progbits
 1960              		.align	1
 1961              		.global	vTaskResume
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	vTaskResume:
 1968              	.LFB17:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1969              		.loc 1 1703 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 16
 1972              		@ frame_needed = 1, uses_anonymous_args = 0
 1973 0000 80B5     		push	{r7, lr}
 1974              	.LCFI61:
 1975              		.cfi_def_cfa_offset 8
 1976              		.cfi_offset 7, -8
 1977              		.cfi_offset 14, -4
 1978 0002 84B0     		sub	sp, sp, #16
 1979              	.LCFI62:
 1980              		.cfi_def_cfa_offset 24
 1981 0004 00AF     		add	r7, sp, #0
 1982              	.LCFI63:
 1983              		.cfi_def_cfa_register 7
 1984 0006 7860     		str	r0, [r7, #4]
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1985              		.loc 1 1704 0
 1986 0008 7B68     		ldr	r3, [r7, #4]
 1987 000a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1988              		.loc 1 1707 0
 1989 000c 7B68     		ldr	r3, [r7, #4]
 1990 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 70


 1991 0010 09D1     		bne	.L135
 1992              	.LBB121:
 1993              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1994              		.loc 2 237 0 discriminator 1
 1995              		.syntax unified
 1996              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1997 0012 4FF05003 			mov r3, #80												
 1998 0016 83F31188 		msr basepri, r3											
 1999 001a BFF36F8F 		isb														
 2000 001e BFF34F8F 		dsb														
 2001              	
 2002              	@ 0 "" 2
 2003              		.thumb
 2004              		.syntax unified
 2005 0022 BB60     		str	r3, [r7, #8]
 2006              	.L136:
 2007              	.LBE122:
 2008              	.LBE121:
 2009              		.loc 1 1707 0 discriminator 1
 2010 0024 FEE7     		b	.L136
 2011              	.L135:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 2012              		.loc 1 1711 0
 2013 0026 FB68     		ldr	r3, [r7, #12]
 2014 0028 002B     		cmp	r3, #0
 2015 002a 2CD0     		beq	.L139
 2016              		.loc 1 1711 0 is_stmt 0 discriminator 1
 2017 002c 184B     		ldr	r3, .L140
 2018 002e 1B68     		ldr	r3, [r3]
 2019 0030 FA68     		ldr	r2, [r7, #12]
 2020 0032 9A42     		cmp	r2, r3
 2021 0034 27D0     		beq	.L139
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2022              		.loc 1 1713 0 is_stmt 1
 2023 0036 FFF7FEFF 		bl	vPortEnterCritical
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2024              		.loc 1 1715 0
 2025 003a F868     		ldr	r0, [r7, #12]
 2026 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2027 0040 0346     		mov	r3, r0
 2028 0042 002B     		cmp	r3, #0
 2029 0044 1DD0     		beq	.L138
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2030              		.loc 1 1721 0
 2031 0046 FB68     		ldr	r3, [r7, #12]
 2032 0048 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cciF1PDz.s 			page 71


 2033 004a 1846     		mov	r0, r3
 2034 004c FFF7FEFF 		bl	uxListRemove
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2035              		.loc 1 1722 0
 2036 0050 FB68     		ldr	r3, [r7, #12]
 2037 0052 DB6A     		ldr	r3, [r3, #44]
 2038 0054 0122     		movs	r2, #1
 2039 0056 9A40     		lsls	r2, r2, r3
 2040 0058 0E4B     		ldr	r3, .L140+4
 2041 005a 1B68     		ldr	r3, [r3]
 2042 005c 1343     		orrs	r3, r3, r2
 2043 005e 0D4A     		ldr	r2, .L140+4
 2044 0060 1360     		str	r3, [r2]
 2045 0062 FB68     		ldr	r3, [r7, #12]
 2046 0064 DA6A     		ldr	r2, [r3, #44]
 2047 0066 1346     		mov	r3, r2
 2048 0068 9B00     		lsls	r3, r3, #2
 2049 006a 1344     		add	r3, r3, r2
 2050 006c 9B00     		lsls	r3, r3, #2
 2051 006e 0A4A     		ldr	r2, .L140+8
 2052 0070 1A44     		add	r2, r2, r3
 2053 0072 FB68     		ldr	r3, [r7, #12]
 2054 0074 0433     		adds	r3, r3, #4
 2055 0076 1946     		mov	r1, r3
 2056 0078 1046     		mov	r0, r2
 2057 007a FFF7FEFF 		bl	vListInsertEnd
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2058              		.loc 1 1725 0
 2059 007e 044B     		ldr	r3, .L140
 2060 0080 1B68     		ldr	r3, [r3]
 2061              	.L138:
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2062              		.loc 1 1742 0
 2063 0082 FFF7FEFF 		bl	vPortExitCritical
 2064              	.L139:
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cciF1PDz.s 			page 72


1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2065              		.loc 1 1748 0
 2066 0086 00BF     		nop
 2067 0088 1037     		adds	r7, r7, #16
 2068              	.LCFI64:
 2069              		.cfi_def_cfa_offset 8
 2070 008a BD46     		mov	sp, r7
 2071              	.LCFI65:
 2072              		.cfi_def_cfa_register 13
 2073              		@ sp needed
 2074 008c 80BD     		pop	{r7, pc}
 2075              	.L141:
 2076 008e 00BF     		.align	2
 2077              	.L140:
 2078 0090 00000000 		.word	pxCurrentTCB
 2079 0094 00000000 		.word	uxTopReadyPriority
 2080 0098 00000000 		.word	pxReadyTasksLists
 2081              		.cfi_endproc
 2082              	.LFE17:
 2084              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2085              		.align	1
 2086              		.global	xTaskResumeFromISR
 2087              		.syntax unified
 2088              		.thumb
 2089              		.thumb_func
 2090              		.fpu fpv4-sp-d16
 2092              	xTaskResumeFromISR:
 2093              	.LFB18:
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2094              		.loc 1 1757 0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 40
 2097              		@ frame_needed = 1, uses_anonymous_args = 0
 2098 0000 80B5     		push	{r7, lr}
 2099              	.LCFI66:
 2100              		.cfi_def_cfa_offset 8
 2101              		.cfi_offset 7, -8
 2102              		.cfi_offset 14, -4
 2103 0002 8AB0     		sub	sp, sp, #40
 2104              	.LCFI67:
 2105              		.cfi_def_cfa_offset 48
 2106 0004 00AF     		add	r7, sp, #0
 2107              	.LCFI68:
 2108              		.cfi_def_cfa_register 7
 2109 0006 7860     		str	r0, [r7, #4]
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2110              		.loc 1 1758 0
 2111 0008 0023     		movs	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 73


 2112 000a 7B62     		str	r3, [r7, #36]
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2113              		.loc 1 1759 0
 2114 000c 7B68     		ldr	r3, [r7, #4]
 2115 000e 3B62     		str	r3, [r7, #32]
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2116              		.loc 1 1762 0
 2117 0010 7B68     		ldr	r3, [r7, #4]
 2118 0012 002B     		cmp	r3, #0
 2119 0014 09D1     		bne	.L143
 2120              	.LBB123:
 2121              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2122              		.loc 2 237 0 discriminator 1
 2123              		.syntax unified
 2124              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2125 0016 4FF05003 			mov r3, #80												
 2126 001a 83F31188 		msr basepri, r3											
 2127 001e BFF36F8F 		isb														
 2128 0022 BFF34F8F 		dsb														
 2129              	
 2130              	@ 0 "" 2
 2131              		.thumb
 2132              		.syntax unified
 2133 0026 BB61     		str	r3, [r7, #24]
 2134              	.L144:
 2135              	.LBE124:
 2136              	.LBE123:
 2137              		.loc 1 1762 0 discriminator 1
 2138 0028 FEE7     		b	.L144
 2139              	.L143:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2140              		.loc 1 1780 0
 2141 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2142              	.LBB125:
 2143              	.LBB126:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2144              		.loc 2 253 0
ARM GAS  /tmp/cciF1PDz.s 			page 74


 2145              		.syntax unified
 2146              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2147 002e EFF31182 			mrs r2, basepri											
 2148 0032 4FF05003 		mov r3, #80												
 2149 0036 83F31188 		msr basepri, r3											
 2150 003a BFF36F8F 		isb														
 2151 003e BFF34F8F 		dsb														
 2152              	
 2153              	@ 0 "" 2
 2154              		.thumb
 2155              		.syntax unified
 2156 0042 7A61     		str	r2, [r7, #20]
 2157 0044 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2158              		.loc 2 265 0
 2159 0046 7B69     		ldr	r3, [r7, #20]
 2160              	.LBE126:
 2161              	.LBE125:
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2162              		.loc 1 1782 0
 2163 0048 FB61     		str	r3, [r7, #28]
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2164              		.loc 1 1784 0
 2165 004a 386A     		ldr	r0, [r7, #32]
 2166 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2167 0050 0346     		mov	r3, r0
 2168 0052 002B     		cmp	r3, #0
 2169 0054 2FD0     		beq	.L146
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2170              		.loc 1 1789 0
 2171 0056 1D4B     		ldr	r3, .L151
 2172 0058 1B68     		ldr	r3, [r3]
 2173 005a 002B     		cmp	r3, #0
 2174 005c 25D1     		bne	.L147
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2175              		.loc 1 1793 0
 2176 005e 3B6A     		ldr	r3, [r7, #32]
 2177 0060 DA6A     		ldr	r2, [r3, #44]
 2178 0062 1B4B     		ldr	r3, .L151+4
 2179 0064 1B68     		ldr	r3, [r3]
 2180 0066 DB6A     		ldr	r3, [r3, #44]
 2181 0068 9A42     		cmp	r2, r3
 2182 006a 01D3     		bcc	.L148
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2183              		.loc 1 1795 0
 2184 006c 0123     		movs	r3, #1
 2185 006e 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/cciF1PDz.s 			page 75


 2186              	.L148:
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2187              		.loc 1 1802 0
 2188 0070 3B6A     		ldr	r3, [r7, #32]
 2189 0072 0433     		adds	r3, r3, #4
 2190 0074 1846     		mov	r0, r3
 2191 0076 FFF7FEFF 		bl	uxListRemove
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2192              		.loc 1 1803 0
 2193 007a 3B6A     		ldr	r3, [r7, #32]
 2194 007c DB6A     		ldr	r3, [r3, #44]
 2195 007e 0122     		movs	r2, #1
 2196 0080 9A40     		lsls	r2, r2, r3
 2197 0082 144B     		ldr	r3, .L151+8
 2198 0084 1B68     		ldr	r3, [r3]
 2199 0086 1343     		orrs	r3, r3, r2
 2200 0088 124A     		ldr	r2, .L151+8
 2201 008a 1360     		str	r3, [r2]
 2202 008c 3B6A     		ldr	r3, [r7, #32]
 2203 008e DA6A     		ldr	r2, [r3, #44]
 2204 0090 1346     		mov	r3, r2
 2205 0092 9B00     		lsls	r3, r3, #2
 2206 0094 1344     		add	r3, r3, r2
 2207 0096 9B00     		lsls	r3, r3, #2
 2208 0098 0F4A     		ldr	r2, .L151+12
 2209 009a 1A44     		add	r2, r2, r3
 2210 009c 3B6A     		ldr	r3, [r7, #32]
 2211 009e 0433     		adds	r3, r3, #4
 2212 00a0 1946     		mov	r1, r3
 2213 00a2 1046     		mov	r0, r2
 2214 00a4 FFF7FEFF 		bl	vListInsertEnd
 2215 00a8 05E0     		b	.L146
 2216              	.L147:
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2217              		.loc 1 1810 0
 2218 00aa 3B6A     		ldr	r3, [r7, #32]
 2219 00ac 1833     		adds	r3, r3, #24
 2220 00ae 1946     		mov	r1, r3
 2221 00b0 0A48     		ldr	r0, .L151+16
 2222 00b2 FFF7FEFF 		bl	vListInsertEnd
 2223              	.L146:
 2224 00b6 FB69     		ldr	r3, [r7, #28]
 2225 00b8 FB60     		str	r3, [r7, #12]
 2226              	.LBB127:
 2227              	.LBB128:
ARM GAS  /tmp/cciF1PDz.s 			page 76


 2228              		.loc 2 271 0
 2229 00ba FB68     		ldr	r3, [r7, #12]
 2230              		.syntax unified
 2231              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2232 00bc 83F31188 			msr basepri, r3	
 2233              	@ 0 "" 2
 2234              		.thumb
 2235              		.syntax unified
 2236              	.LBE128:
 2237              	.LBE127:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2238              		.loc 1 1820 0
 2239 00c0 7B6A     		ldr	r3, [r7, #36]
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2240              		.loc 1 1821 0
 2241 00c2 1846     		mov	r0, r3
 2242 00c4 2837     		adds	r7, r7, #40
 2243              	.LCFI69:
 2244              		.cfi_def_cfa_offset 8
 2245 00c6 BD46     		mov	sp, r7
 2246              	.LCFI70:
 2247              		.cfi_def_cfa_register 13
 2248              		@ sp needed
 2249 00c8 80BD     		pop	{r7, pc}
 2250              	.L152:
 2251 00ca 00BF     		.align	2
 2252              	.L151:
 2253 00cc 00000000 		.word	uxSchedulerSuspended
 2254 00d0 00000000 		.word	pxCurrentTCB
 2255 00d4 00000000 		.word	uxTopReadyPriority
 2256 00d8 00000000 		.word	pxReadyTasksLists
 2257 00dc 00000000 		.word	xPendingReadyList
 2258              		.cfi_endproc
 2259              	.LFE18:
 2261              		.section	.rodata
 2262              		.align	2
 2263              	.LC0:
 2264 0000 49444C45 		.ascii	"IDLE\000"
 2264      00
 2265              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2266              		.align	1
 2267              		.global	vTaskStartScheduler
 2268              		.syntax unified
 2269              		.thumb
 2270              		.thumb_func
 2271              		.fpu fpv4-sp-d16
 2273              	vTaskStartScheduler:
 2274              	.LFB19:
ARM GAS  /tmp/cciF1PDz.s 			page 77


1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2275              		.loc 1 1827 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 16
 2278              		@ frame_needed = 1, uses_anonymous_args = 0
 2279 0000 80B5     		push	{r7, lr}
 2280              	.LCFI71:
 2281              		.cfi_def_cfa_offset 8
 2282              		.cfi_offset 7, -8
 2283              		.cfi_offset 14, -4
 2284 0002 86B0     		sub	sp, sp, #24
 2285              	.LCFI72:
 2286              		.cfi_def_cfa_offset 32
 2287 0004 02AF     		add	r7, sp, #8
 2288              	.LCFI73:
 2289              		.cfi_def_cfa 7, 24
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2290              		.loc 1 1860 0
 2291 0006 1B4B     		ldr	r3, .L158
 2292 0008 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 78


 2293 000a 0023     		movs	r3, #0
 2294 000c 0093     		str	r3, [sp]
 2295 000e 0023     		movs	r3, #0
 2296 0010 8022     		movs	r2, #128
 2297 0012 1949     		ldr	r1, .L158+4
 2298 0014 1948     		ldr	r0, .L158+8
 2299 0016 FFF7FEFF 		bl	xTaskCreate
 2300 001a F860     		str	r0, [r7, #12]
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2301              		.loc 1 1881 0
 2302 001c FB68     		ldr	r3, [r7, #12]
 2303 001e 012B     		cmp	r3, #1
 2304 0020 15D1     		bne	.L154
 2305              	.LBB129:
 2306              	.LBB130:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2307              		.loc 2 237 0
 2308              		.syntax unified
 2309              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2310 0022 4FF05003 			mov r3, #80												
 2311 0026 83F31188 		msr basepri, r3											
 2312 002a BFF36F8F 		isb														
 2313 002e BFF34F8F 		dsb														
 2314              	
 2315              	@ 0 "" 2
 2316              		.thumb
 2317              		.syntax unified
 2318 0032 BB60     		str	r3, [r7, #8]
 2319              	.LBE130:
 2320              	.LBE129:
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  /tmp/cciF1PDz.s 			page 79


1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2321              		.loc 1 1898 0
 2322 0034 124B     		ldr	r3, .L158+12
 2323 0036 4FF0FF32 		mov	r2, #-1
 2324 003a 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2325              		.loc 1 1899 0
 2326 003c 114B     		ldr	r3, .L158+16
 2327 003e 0122     		movs	r2, #1
 2328 0040 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2329              		.loc 1 1900 0
 2330 0042 114B     		ldr	r3, .L158+20
 2331 0044 0022     		movs	r2, #0
 2332 0046 1A60     		str	r2, [r3]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2333              		.loc 1 1909 0
 2334 0048 FFF7FEFF 		bl	xPortStartScheduler
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2335              		.loc 1 1930 0
ARM GAS  /tmp/cciF1PDz.s 			page 80


 2336 004c 0DE0     		b	.L157
 2337              	.L154:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2338              		.loc 1 1924 0
 2339 004e FB68     		ldr	r3, [r7, #12]
 2340 0050 B3F1FF3F 		cmp	r3, #-1
 2341 0054 09D1     		bne	.L157
 2342              	.LBB131:
 2343              	.LBB132:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2344              		.loc 2 237 0 discriminator 1
 2345              		.syntax unified
 2346              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2347 0056 4FF05003 			mov r3, #80												
 2348 005a 83F31188 		msr basepri, r3											
 2349 005e BFF36F8F 		isb														
 2350 0062 BFF34F8F 		dsb														
 2351              	
 2352              	@ 0 "" 2
 2353              		.thumb
 2354              		.syntax unified
 2355 0066 7B60     		str	r3, [r7, #4]
 2356              	.L156:
 2357              	.LBE132:
 2358              	.LBE131:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2359              		.loc 1 1924 0 discriminator 2
 2360 0068 FEE7     		b	.L156
 2361              	.L157:
 2362              		.loc 1 1930 0
 2363 006a 00BF     		nop
 2364 006c 1037     		adds	r7, r7, #16
 2365              	.LCFI74:
 2366              		.cfi_def_cfa_offset 8
 2367 006e BD46     		mov	sp, r7
 2368              	.LCFI75:
 2369              		.cfi_def_cfa_register 13
 2370              		@ sp needed
 2371 0070 80BD     		pop	{r7, pc}
 2372              	.L159:
 2373 0072 00BF     		.align	2
 2374              	.L158:
 2375 0074 00000000 		.word	xIdleTaskHandle
 2376 0078 00000000 		.word	.LC0
 2377 007c 00000000 		.word	prvIdleTask
 2378 0080 00000000 		.word	xNextTaskUnblockTime
 2379 0084 00000000 		.word	xSchedulerRunning
 2380 0088 00000000 		.word	xTickCount
 2381              		.cfi_endproc
 2382              	.LFE19:
 2384              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2385              		.align	1
 2386              		.global	vTaskEndScheduler
 2387              		.syntax unified
 2388              		.thumb
 2389              		.thumb_func
 2390              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cciF1PDz.s 			page 81


 2392              	vTaskEndScheduler:
 2393              	.LFB20:
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2394              		.loc 1 1934 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 8
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398 0000 80B5     		push	{r7, lr}
 2399              	.LCFI76:
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 7, -8
 2402              		.cfi_offset 14, -4
 2403 0002 82B0     		sub	sp, sp, #8
 2404              	.LCFI77:
 2405              		.cfi_def_cfa_offset 16
 2406 0004 00AF     		add	r7, sp, #0
 2407              	.LCFI78:
 2408              		.cfi_def_cfa_register 7
 2409              	.LBB133:
 2410              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2411              		.loc 2 237 0
 2412              		.syntax unified
 2413              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2414 0006 4FF05003 			mov r3, #80												
 2415 000a 83F31188 		msr basepri, r3											
 2416 000e BFF36F8F 		isb														
 2417 0012 BFF34F8F 		dsb														
 2418              	
 2419              	@ 0 "" 2
 2420              		.thumb
 2421              		.syntax unified
 2422 0016 7B60     		str	r3, [r7, #4]
 2423              	.LBE134:
 2424              	.LBE133:
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2425              		.loc 1 1939 0
 2426 0018 044B     		ldr	r3, .L161
 2427 001a 0022     		movs	r2, #0
 2428 001c 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2429              		.loc 1 1940 0
 2430 001e FFF7FEFF 		bl	vPortEndScheduler
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2431              		.loc 1 1941 0
 2432 0022 00BF     		nop
 2433 0024 0837     		adds	r7, r7, #8
 2434              	.LCFI79:
 2435              		.cfi_def_cfa_offset 8
 2436 0026 BD46     		mov	sp, r7
ARM GAS  /tmp/cciF1PDz.s 			page 82


 2437              	.LCFI80:
 2438              		.cfi_def_cfa_register 13
 2439              		@ sp needed
 2440 0028 80BD     		pop	{r7, pc}
 2441              	.L162:
 2442 002a 00BF     		.align	2
 2443              	.L161:
 2444 002c 00000000 		.word	xSchedulerRunning
 2445              		.cfi_endproc
 2446              	.LFE20:
 2448              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2449              		.align	1
 2450              		.global	vTaskSuspendAll
 2451              		.syntax unified
 2452              		.thumb
 2453              		.thumb_func
 2454              		.fpu fpv4-sp-d16
 2456              	vTaskSuspendAll:
 2457              	.LFB21:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2458              		.loc 1 1945 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 0
 2461              		@ frame_needed = 1, uses_anonymous_args = 0
 2462              		@ link register save eliminated.
 2463 0000 80B4     		push	{r7}
 2464              	.LCFI81:
 2465              		.cfi_def_cfa_offset 4
 2466              		.cfi_offset 7, -4
 2467 0002 00AF     		add	r7, sp, #0
 2468              	.LCFI82:
 2469              		.cfi_def_cfa_register 7
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2470              		.loc 1 1950 0
 2471 0004 044B     		ldr	r3, .L164
 2472 0006 1B68     		ldr	r3, [r3]
 2473 0008 0133     		adds	r3, r3, #1
 2474 000a 034A     		ldr	r2, .L164
 2475 000c 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2476              		.loc 1 1951 0
 2477 000e 00BF     		nop
 2478 0010 BD46     		mov	sp, r7
 2479              	.LCFI83:
 2480              		.cfi_def_cfa_register 13
 2481              		@ sp needed
 2482 0012 5DF8047B 		ldr	r7, [sp], #4
 2483              	.LCFI84:
 2484              		.cfi_restore 7
 2485              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cciF1PDz.s 			page 83


 2486 0016 7047     		bx	lr
 2487              	.L165:
 2488              		.align	2
 2489              	.L164:
 2490 0018 00000000 		.word	uxSchedulerSuspended
 2491              		.cfi_endproc
 2492              	.LFE21:
 2494              		.section	.text.xTaskResumeAll,"ax",%progbits
 2495              		.align	1
 2496              		.global	xTaskResumeAll
 2497              		.syntax unified
 2498              		.thumb
 2499              		.thumb_func
 2500              		.fpu fpv4-sp-d16
 2502              	xTaskResumeAll:
 2503              	.LFB22:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
ARM GAS  /tmp/cciF1PDz.s 			page 84


1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2504              		.loc 1 2018 0
 2505              		.cfi_startproc
 2506              		@ args = 0, pretend = 0, frame = 16
 2507              		@ frame_needed = 1, uses_anonymous_args = 0
 2508 0000 80B5     		push	{r7, lr}
 2509              	.LCFI85:
 2510              		.cfi_def_cfa_offset 8
 2511              		.cfi_offset 7, -8
 2512              		.cfi_offset 14, -4
 2513 0002 84B0     		sub	sp, sp, #16
 2514              	.LCFI86:
 2515              		.cfi_def_cfa_offset 24
 2516 0004 00AF     		add	r7, sp, #0
 2517              	.LCFI87:
 2518              		.cfi_def_cfa_register 7
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2519              		.loc 1 2019 0
 2520 0006 0023     		movs	r3, #0
 2521 0008 FB60     		str	r3, [r7, #12]
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2522              		.loc 1 2020 0
 2523 000a 0023     		movs	r3, #0
 2524 000c 7B60     		str	r3, [r7, #4]
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2525              		.loc 1 2024 0
 2526 000e 3B4B     		ldr	r3, .L177
 2527 0010 1B68     		ldr	r3, [r3]
 2528 0012 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 85


 2529 0014 09D1     		bne	.L167
 2530              	.LBB135:
 2531              	.LBB136:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2532              		.loc 2 237 0 discriminator 1
 2533              		.syntax unified
 2534              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2535 0016 4FF05003 			mov r3, #80												
 2536 001a 83F31188 		msr basepri, r3											
 2537 001e BFF36F8F 		isb														
 2538 0022 BFF34F8F 		dsb														
 2539              	
 2540              	@ 0 "" 2
 2541              		.thumb
 2542              		.syntax unified
 2543 0026 3B60     		str	r3, [r7]
 2544              	.L168:
 2545              	.LBE136:
 2546              	.LBE135:
 2547              		.loc 1 2024 0 discriminator 1
 2548 0028 FEE7     		b	.L168
 2549              	.L167:
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2550              		.loc 1 2031 0
 2551 002a FFF7FEFF 		bl	vPortEnterCritical
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2552              		.loc 1 2033 0
 2553 002e 334B     		ldr	r3, .L177
 2554 0030 1B68     		ldr	r3, [r3]
 2555 0032 013B     		subs	r3, r3, #1
 2556 0034 314A     		ldr	r2, .L177
 2557 0036 1360     		str	r3, [r2]
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2558              		.loc 1 2035 0
 2559 0038 304B     		ldr	r3, .L177
 2560 003a 1B68     		ldr	r3, [r3]
 2561 003c 002B     		cmp	r3, #0
 2562 003e 55D1     		bne	.L169
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2563              		.loc 1 2037 0
 2564 0040 2F4B     		ldr	r3, .L177+4
 2565 0042 1B68     		ldr	r3, [r3]
 2566 0044 002B     		cmp	r3, #0
 2567 0046 51D0     		beq	.L169
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
ARM GAS  /tmp/cciF1PDz.s 			page 86


 2568              		.loc 1 2041 0
 2569 0048 2EE0     		b	.L170
 2570              	.L171:
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2571              		.loc 1 2043 0
 2572 004a 2E4B     		ldr	r3, .L177+8
 2573 004c DB68     		ldr	r3, [r3, #12]
 2574 004e DB68     		ldr	r3, [r3, #12]
 2575 0050 FB60     		str	r3, [r7, #12]
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2576              		.loc 1 2044 0
 2577 0052 FB68     		ldr	r3, [r7, #12]
 2578 0054 1833     		adds	r3, r3, #24
 2579 0056 1846     		mov	r0, r3
 2580 0058 FFF7FEFF 		bl	uxListRemove
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2581              		.loc 1 2045 0
 2582 005c FB68     		ldr	r3, [r7, #12]
 2583 005e 0433     		adds	r3, r3, #4
 2584 0060 1846     		mov	r0, r3
 2585 0062 FFF7FEFF 		bl	uxListRemove
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2586              		.loc 1 2046 0
 2587 0066 FB68     		ldr	r3, [r7, #12]
 2588 0068 DB6A     		ldr	r3, [r3, #44]
 2589 006a 0122     		movs	r2, #1
 2590 006c 9A40     		lsls	r2, r2, r3
 2591 006e 264B     		ldr	r3, .L177+12
 2592 0070 1B68     		ldr	r3, [r3]
 2593 0072 1343     		orrs	r3, r3, r2
 2594 0074 244A     		ldr	r2, .L177+12
 2595 0076 1360     		str	r3, [r2]
 2596 0078 FB68     		ldr	r3, [r7, #12]
 2597 007a DA6A     		ldr	r2, [r3, #44]
 2598 007c 1346     		mov	r3, r2
 2599 007e 9B00     		lsls	r3, r3, #2
 2600 0080 1344     		add	r3, r3, r2
 2601 0082 9B00     		lsls	r3, r3, #2
 2602 0084 214A     		ldr	r2, .L177+16
 2603 0086 1A44     		add	r2, r2, r3
 2604 0088 FB68     		ldr	r3, [r7, #12]
 2605 008a 0433     		adds	r3, r3, #4
 2606 008c 1946     		mov	r1, r3
 2607 008e 1046     		mov	r0, r2
 2608 0090 FFF7FEFF 		bl	vListInsertEnd
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2609              		.loc 1 2050 0
 2610 0094 FB68     		ldr	r3, [r7, #12]
 2611 0096 DA6A     		ldr	r2, [r3, #44]
 2612 0098 1D4B     		ldr	r3, .L177+20
 2613 009a 1B68     		ldr	r3, [r3]
 2614 009c DB6A     		ldr	r3, [r3, #44]
 2615 009e 9A42     		cmp	r2, r3
ARM GAS  /tmp/cciF1PDz.s 			page 87


 2616 00a0 02D3     		bcc	.L170
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2617              		.loc 1 2052 0
 2618 00a2 1C4B     		ldr	r3, .L177+24
 2619 00a4 0122     		movs	r2, #1
 2620 00a6 1A60     		str	r2, [r3]
 2621              	.L170:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2622              		.loc 1 2041 0
 2623 00a8 164B     		ldr	r3, .L177+8
 2624 00aa 1B68     		ldr	r3, [r3]
 2625 00ac 002B     		cmp	r3, #0
 2626 00ae CCD1     		bne	.L171
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2627              		.loc 1 2060 0
 2628 00b0 FB68     		ldr	r3, [r7, #12]
 2629 00b2 002B     		cmp	r3, #0
 2630 00b4 01D0     		beq	.L172
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2631              		.loc 1 2068 0
 2632 00b6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2633              	.L172:
 2634              	.LBB137:
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2635              		.loc 1 2076 0
 2636 00ba 174B     		ldr	r3, .L177+28
 2637 00bc 1B68     		ldr	r3, [r3]
 2638 00be BB60     		str	r3, [r7, #8]
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2639              		.loc 1 2078 0
 2640 00c0 BB68     		ldr	r3, [r7, #8]
 2641 00c2 002B     		cmp	r3, #0
 2642 00c4 10D0     		beq	.L173
 2643              	.L175:
ARM GAS  /tmp/cciF1PDz.s 			page 88


2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2644              		.loc 1 2082 0
 2645 00c6 FFF7FEFF 		bl	xTaskIncrementTick
 2646 00ca 0346     		mov	r3, r0
 2647 00cc 002B     		cmp	r3, #0
 2648 00ce 02D0     		beq	.L174
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2649              		.loc 1 2084 0
 2650 00d0 104B     		ldr	r3, .L177+24
 2651 00d2 0122     		movs	r2, #1
 2652 00d4 1A60     		str	r2, [r3]
 2653              	.L174:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2654              		.loc 1 2090 0
 2655 00d6 BB68     		ldr	r3, [r7, #8]
 2656 00d8 013B     		subs	r3, r3, #1
 2657 00da BB60     		str	r3, [r7, #8]
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2658              		.loc 1 2091 0
 2659 00dc BB68     		ldr	r3, [r7, #8]
 2660 00de 002B     		cmp	r3, #0
 2661 00e0 F1D1     		bne	.L175
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2662              		.loc 1 2093 0
 2663 00e2 0D4B     		ldr	r3, .L177+28
 2664 00e4 0022     		movs	r2, #0
 2665 00e6 1A60     		str	r2, [r3]
 2666              	.L173:
 2667              	.LBE137:
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2668              		.loc 1 2101 0
 2669 00e8 0A4B     		ldr	r3, .L177+24
 2670 00ea 1B68     		ldr	r3, [r3]
 2671              	.L169:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
ARM GAS  /tmp/cciF1PDz.s 			page 89


2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2672              		.loc 1 2121 0
 2673 00ec FFF7FEFF 		bl	vPortExitCritical
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2674              		.loc 1 2123 0
 2675 00f0 7B68     		ldr	r3, [r7, #4]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2676              		.loc 1 2124 0
 2677 00f2 1846     		mov	r0, r3
 2678 00f4 1037     		adds	r7, r7, #16
 2679              	.LCFI88:
 2680              		.cfi_def_cfa_offset 8
 2681 00f6 BD46     		mov	sp, r7
 2682              	.LCFI89:
 2683              		.cfi_def_cfa_register 13
 2684              		@ sp needed
 2685 00f8 80BD     		pop	{r7, pc}
 2686              	.L178:
 2687 00fa 00BF     		.align	2
 2688              	.L177:
 2689 00fc 00000000 		.word	uxSchedulerSuspended
 2690 0100 00000000 		.word	uxCurrentNumberOfTasks
 2691 0104 00000000 		.word	xPendingReadyList
 2692 0108 00000000 		.word	uxTopReadyPriority
 2693 010c 00000000 		.word	pxReadyTasksLists
 2694 0110 00000000 		.word	pxCurrentTCB
 2695 0114 00000000 		.word	xYieldPending
 2696 0118 00000000 		.word	uxPendedTicks
 2697              		.cfi_endproc
 2698              	.LFE22:
 2700              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2701              		.align	1
 2702              		.global	xTaskGetTickCount
 2703              		.syntax unified
 2704              		.thumb
 2705              		.thumb_func
 2706              		.fpu fpv4-sp-d16
 2708              	xTaskGetTickCount:
 2709              	.LFB23:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cciF1PDz.s 			page 90


 2710              		.loc 1 2128 0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 8
 2713              		@ frame_needed = 1, uses_anonymous_args = 0
 2714              		@ link register save eliminated.
 2715 0000 80B4     		push	{r7}
 2716              	.LCFI90:
 2717              		.cfi_def_cfa_offset 4
 2718              		.cfi_offset 7, -4
 2719 0002 83B0     		sub	sp, sp, #12
 2720              	.LCFI91:
 2721              		.cfi_def_cfa_offset 16
 2722 0004 00AF     		add	r7, sp, #0
 2723              	.LCFI92:
 2724              		.cfi_def_cfa_register 7
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2725              		.loc 1 2134 0
 2726 0006 054B     		ldr	r3, .L181
 2727 0008 1B68     		ldr	r3, [r3]
 2728 000a 7B60     		str	r3, [r7, #4]
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2729              		.loc 1 2138 0
 2730 000c 7B68     		ldr	r3, [r7, #4]
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2731              		.loc 1 2139 0
 2732 000e 1846     		mov	r0, r3
 2733 0010 0C37     		adds	r7, r7, #12
 2734              	.LCFI93:
 2735              		.cfi_def_cfa_offset 4
 2736 0012 BD46     		mov	sp, r7
 2737              	.LCFI94:
 2738              		.cfi_def_cfa_register 13
 2739              		@ sp needed
 2740 0014 5DF8047B 		ldr	r7, [sp], #4
 2741              	.LCFI95:
 2742              		.cfi_restore 7
 2743              		.cfi_def_cfa_offset 0
 2744 0018 7047     		bx	lr
 2745              	.L182:
 2746 001a 00BF     		.align	2
 2747              	.L181:
 2748 001c 00000000 		.word	xTickCount
 2749              		.cfi_endproc
 2750              	.LFE23:
 2752              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2753              		.align	1
 2754              		.global	xTaskGetTickCountFromISR
 2755              		.syntax unified
 2756              		.thumb
ARM GAS  /tmp/cciF1PDz.s 			page 91


 2757              		.thumb_func
 2758              		.fpu fpv4-sp-d16
 2760              	xTaskGetTickCountFromISR:
 2761              	.LFB24:
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2762              		.loc 1 2143 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 8
 2765              		@ frame_needed = 1, uses_anonymous_args = 0
 2766 0000 80B5     		push	{r7, lr}
 2767              	.LCFI96:
 2768              		.cfi_def_cfa_offset 8
 2769              		.cfi_offset 7, -8
 2770              		.cfi_offset 14, -4
 2771 0002 82B0     		sub	sp, sp, #8
 2772              	.LCFI97:
 2773              		.cfi_def_cfa_offset 16
 2774 0004 00AF     		add	r7, sp, #0
 2775              	.LCFI98:
 2776              		.cfi_def_cfa_register 7
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2777              		.loc 1 2161 0
 2778 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2779              		.loc 1 2163 0
 2780 000a 0023     		movs	r3, #0
 2781 000c 7B60     		str	r3, [r7, #4]
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2782              		.loc 1 2165 0
 2783 000e 044B     		ldr	r3, .L185
 2784 0010 1B68     		ldr	r3, [r3]
 2785 0012 3B60     		str	r3, [r7]
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 92


2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2786              		.loc 1 2169 0
 2787 0014 3B68     		ldr	r3, [r7]
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2788              		.loc 1 2170 0
 2789 0016 1846     		mov	r0, r3
 2790 0018 0837     		adds	r7, r7, #8
 2791              	.LCFI99:
 2792              		.cfi_def_cfa_offset 8
 2793 001a BD46     		mov	sp, r7
 2794              	.LCFI100:
 2795              		.cfi_def_cfa_register 13
 2796              		@ sp needed
 2797 001c 80BD     		pop	{r7, pc}
 2798              	.L186:
 2799 001e 00BF     		.align	2
 2800              	.L185:
 2801 0020 00000000 		.word	xTickCount
 2802              		.cfi_endproc
 2803              	.LFE24:
 2805              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2806              		.align	1
 2807              		.global	uxTaskGetNumberOfTasks
 2808              		.syntax unified
 2809              		.thumb
 2810              		.thumb_func
 2811              		.fpu fpv4-sp-d16
 2813              	uxTaskGetNumberOfTasks:
 2814              	.LFB25:
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2815              		.loc 1 2174 0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 1, uses_anonymous_args = 0
 2819              		@ link register save eliminated.
 2820 0000 80B4     		push	{r7}
 2821              	.LCFI101:
 2822              		.cfi_def_cfa_offset 4
 2823              		.cfi_offset 7, -4
 2824 0002 00AF     		add	r7, sp, #0
 2825              	.LCFI102:
 2826              		.cfi_def_cfa_register 7
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2827              		.loc 1 2177 0
 2828 0004 034B     		ldr	r3, .L189
 2829 0006 1B68     		ldr	r3, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2830              		.loc 1 2178 0
 2831 0008 1846     		mov	r0, r3
 2832 000a BD46     		mov	sp, r7
 2833              	.LCFI103:
 2834              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cciF1PDz.s 			page 93


 2835              		@ sp needed
 2836 000c 5DF8047B 		ldr	r7, [sp], #4
 2837              	.LCFI104:
 2838              		.cfi_restore 7
 2839              		.cfi_def_cfa_offset 0
 2840 0010 7047     		bx	lr
 2841              	.L190:
 2842 0012 00BF     		.align	2
 2843              	.L189:
 2844 0014 00000000 		.word	uxCurrentNumberOfTasks
 2845              		.cfi_endproc
 2846              	.LFE25:
 2848              		.section	.text.pcTaskGetName,"ax",%progbits
 2849              		.align	1
 2850              		.global	pcTaskGetName
 2851              		.syntax unified
 2852              		.thumb
 2853              		.thumb_func
 2854              		.fpu fpv4-sp-d16
 2856              	pcTaskGetName:
 2857              	.LFB26:
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2858              		.loc 1 2182 0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 16
 2861              		@ frame_needed = 1, uses_anonymous_args = 0
 2862              		@ link register save eliminated.
 2863 0000 80B4     		push	{r7}
 2864              	.LCFI105:
 2865              		.cfi_def_cfa_offset 4
 2866              		.cfi_offset 7, -4
 2867 0002 85B0     		sub	sp, sp, #20
 2868              	.LCFI106:
 2869              		.cfi_def_cfa_offset 24
 2870 0004 00AF     		add	r7, sp, #0
 2871              	.LCFI107:
 2872              		.cfi_def_cfa_register 7
 2873 0006 7860     		str	r0, [r7, #4]
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2874              		.loc 1 2187 0
 2875 0008 7B68     		ldr	r3, [r7, #4]
 2876 000a 002B     		cmp	r3, #0
 2877 000c 02D1     		bne	.L192
 2878              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2879 000e 0D4B     		ldr	r3, .L197
 2880 0010 1B68     		ldr	r3, [r3]
 2881 0012 00E0     		b	.L193
 2882              	.L192:
 2883              		.loc 1 2187 0 discriminator 2
 2884 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 94


 2885              	.L193:
 2886              		.loc 1 2187 0 discriminator 4
 2887 0016 FB60     		str	r3, [r7, #12]
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2888              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2889 0018 FB68     		ldr	r3, [r7, #12]
 2890 001a 002B     		cmp	r3, #0
 2891 001c 09D1     		bne	.L194
 2892              	.LBB138:
 2893              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2894              		.loc 2 237 0 discriminator 1
 2895              		.syntax unified
 2896              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2897 001e 4FF05003 			mov r3, #80												
 2898 0022 83F31188 		msr basepri, r3											
 2899 0026 BFF36F8F 		isb														
 2900 002a BFF34F8F 		dsb														
 2901              	
 2902              	@ 0 "" 2
 2903              		.thumb
 2904              		.syntax unified
 2905 002e BB60     		str	r3, [r7, #8]
 2906              	.L195:
 2907              	.LBE139:
 2908              	.LBE138:
 2909              		.loc 1 2188 0 discriminator 1
 2910 0030 FEE7     		b	.L195
 2911              	.L194:
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2912              		.loc 1 2189 0
 2913 0032 FB68     		ldr	r3, [r7, #12]
 2914 0034 3433     		adds	r3, r3, #52
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2915              		.loc 1 2190 0
 2916 0036 1846     		mov	r0, r3
 2917 0038 1437     		adds	r7, r7, #20
 2918              	.LCFI108:
 2919              		.cfi_def_cfa_offset 4
 2920 003a BD46     		mov	sp, r7
 2921              	.LCFI109:
 2922              		.cfi_def_cfa_register 13
 2923              		@ sp needed
 2924 003c 5DF8047B 		ldr	r7, [sp], #4
 2925              	.LCFI110:
 2926              		.cfi_restore 7
 2927              		.cfi_def_cfa_offset 0
 2928 0040 7047     		bx	lr
 2929              	.L198:
 2930 0042 00BF     		.align	2
 2931              	.L197:
 2932 0044 00000000 		.word	pxCurrentTCB
 2933              		.cfi_endproc
 2934              	.LFE26:
 2936              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2937              		.align	1
 2938              		.global	uxTaskGetSystemState
ARM GAS  /tmp/cciF1PDz.s 			page 95


 2939              		.syntax unified
 2940              		.thumb
 2941              		.thumb_func
 2942              		.fpu fpv4-sp-d16
 2944              	uxTaskGetSystemState:
 2945              	.LFB27:
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  /tmp/cciF1PDz.s 			page 96


2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cciF1PDz.s 			page 97


2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2946              		.loc 1 2322 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 24
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950 0000 80B5     		push	{r7, lr}
 2951              	.LCFI111:
 2952              		.cfi_def_cfa_offset 8
 2953              		.cfi_offset 7, -8
 2954              		.cfi_offset 14, -4
 2955 0002 86B0     		sub	sp, sp, #24
 2956              	.LCFI112:
 2957              		.cfi_def_cfa_offset 32
 2958 0004 00AF     		add	r7, sp, #0
 2959              	.LCFI113:
 2960              		.cfi_def_cfa_register 7
 2961 0006 F860     		str	r0, [r7, #12]
 2962 0008 B960     		str	r1, [r7, #8]
 2963 000a 7A60     		str	r2, [r7, #4]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2964              		.loc 1 2323 0
 2965 000c 0023     		movs	r3, #0
 2966 000e 7B61     		str	r3, [r7, #20]
 2967 0010 0723     		movs	r3, #7
 2968 0012 3B61     		str	r3, [r7, #16]
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 2969              		.loc 1 2325 0
 2970 0014 FFF7FEFF 		bl	vTaskSuspendAll
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2971              		.loc 1 2328 0
 2972 0018 3A4B     		ldr	r3, .L204
ARM GAS  /tmp/cciF1PDz.s 			page 98


 2973 001a 1B68     		ldr	r3, [r3]
 2974 001c BA68     		ldr	r2, [r7, #8]
 2975 001e 9A42     		cmp	r2, r3
 2976 0020 68D3     		bcc	.L200
 2977              	.L201:
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 2978              		.loc 1 2334 0 discriminator 1
 2979 0022 3B69     		ldr	r3, [r7, #16]
 2980 0024 013B     		subs	r3, r3, #1
 2981 0026 3B61     		str	r3, [r7, #16]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2982              		.loc 1 2335 0 discriminator 1
 2983 0028 7A69     		ldr	r2, [r7, #20]
 2984 002a 1346     		mov	r3, r2
 2985 002c DB00     		lsls	r3, r3, #3
 2986 002e 1344     		add	r3, r3, r2
 2987 0030 9B00     		lsls	r3, r3, #2
 2988 0032 1A46     		mov	r2, r3
 2989 0034 FB68     		ldr	r3, [r7, #12]
 2990 0036 9818     		adds	r0, r3, r2
 2991 0038 3A69     		ldr	r2, [r7, #16]
 2992 003a 1346     		mov	r3, r2
 2993 003c 9B00     		lsls	r3, r3, #2
 2994 003e 1344     		add	r3, r3, r2
 2995 0040 9B00     		lsls	r3, r3, #2
 2996 0042 314A     		ldr	r2, .L204+4
 2997 0044 1344     		add	r3, r3, r2
 2998 0046 0122     		movs	r2, #1
 2999 0048 1946     		mov	r1, r3
 3000 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3001 004e 0246     		mov	r2, r0
 3002 0050 7B69     		ldr	r3, [r7, #20]
 3003 0052 1344     		add	r3, r3, r2
 3004 0054 7B61     		str	r3, [r7, #20]
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3005              		.loc 1 2337 0 discriminator 1
 3006 0056 3B69     		ldr	r3, [r7, #16]
 3007 0058 002B     		cmp	r3, #0
 3008 005a E2D1     		bne	.L201
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3009              		.loc 1 2341 0
 3010 005c 7A69     		ldr	r2, [r7, #20]
 3011 005e 1346     		mov	r3, r2
 3012 0060 DB00     		lsls	r3, r3, #3
 3013 0062 1344     		add	r3, r3, r2
 3014 0064 9B00     		lsls	r3, r3, #2
 3015 0066 1A46     		mov	r2, r3
 3016 0068 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cciF1PDz.s 			page 99


 3017 006a 9818     		adds	r0, r3, r2
 3018 006c 274B     		ldr	r3, .L204+8
 3019 006e 1B68     		ldr	r3, [r3]
 3020 0070 0222     		movs	r2, #2
 3021 0072 1946     		mov	r1, r3
 3022 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3023 0078 0246     		mov	r2, r0
 3024 007a 7B69     		ldr	r3, [r7, #20]
 3025 007c 1344     		add	r3, r3, r2
 3026 007e 7B61     		str	r3, [r7, #20]
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3027              		.loc 1 2342 0
 3028 0080 7A69     		ldr	r2, [r7, #20]
 3029 0082 1346     		mov	r3, r2
 3030 0084 DB00     		lsls	r3, r3, #3
 3031 0086 1344     		add	r3, r3, r2
 3032 0088 9B00     		lsls	r3, r3, #2
 3033 008a 1A46     		mov	r2, r3
 3034 008c FB68     		ldr	r3, [r7, #12]
 3035 008e 9818     		adds	r0, r3, r2
 3036 0090 1F4B     		ldr	r3, .L204+12
 3037 0092 1B68     		ldr	r3, [r3]
 3038 0094 0222     		movs	r2, #2
 3039 0096 1946     		mov	r1, r3
 3040 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3041 009c 0246     		mov	r2, r0
 3042 009e 7B69     		ldr	r3, [r7, #20]
 3043 00a0 1344     		add	r3, r3, r2
 3044 00a2 7B61     		str	r3, [r7, #20]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3045              		.loc 1 2348 0
 3046 00a4 7A69     		ldr	r2, [r7, #20]
 3047 00a6 1346     		mov	r3, r2
 3048 00a8 DB00     		lsls	r3, r3, #3
 3049 00aa 1344     		add	r3, r3, r2
 3050 00ac 9B00     		lsls	r3, r3, #2
 3051 00ae 1A46     		mov	r2, r3
 3052 00b0 FB68     		ldr	r3, [r7, #12]
 3053 00b2 1344     		add	r3, r3, r2
 3054 00b4 0422     		movs	r2, #4
 3055 00b6 1749     		ldr	r1, .L204+16
 3056 00b8 1846     		mov	r0, r3
 3057 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3058 00be 0246     		mov	r2, r0
 3059 00c0 7B69     		ldr	r3, [r7, #20]
 3060 00c2 1344     		add	r3, r3, r2
 3061 00c4 7B61     		str	r3, [r7, #20]
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cciF1PDz.s 			page 100


2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3062              		.loc 1 2356 0
 3063 00c6 7A69     		ldr	r2, [r7, #20]
 3064 00c8 1346     		mov	r3, r2
 3065 00ca DB00     		lsls	r3, r3, #3
 3066 00cc 1344     		add	r3, r3, r2
 3067 00ce 9B00     		lsls	r3, r3, #2
 3068 00d0 1A46     		mov	r2, r3
 3069 00d2 FB68     		ldr	r3, [r7, #12]
 3070 00d4 1344     		add	r3, r3, r2
 3071 00d6 0322     		movs	r2, #3
 3072 00d8 0F49     		ldr	r1, .L204+20
 3073 00da 1846     		mov	r0, r3
 3074 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3075 00e0 0246     		mov	r2, r0
 3076 00e2 7B69     		ldr	r3, [r7, #20]
 3077 00e4 1344     		add	r3, r3, r2
 3078 00e6 7B61     		str	r3, [r7, #20]
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3079              		.loc 1 2373 0
 3080 00e8 7B68     		ldr	r3, [r7, #4]
 3081 00ea 002B     		cmp	r3, #0
 3082 00ec 02D0     		beq	.L200
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3083              		.loc 1 2375 0
 3084 00ee 7B68     		ldr	r3, [r7, #4]
 3085 00f0 0022     		movs	r2, #0
 3086 00f2 1A60     		str	r2, [r3]
 3087              	.L200:
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciF1PDz.s 			page 101


2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3088              		.loc 1 2385 0
 3089 00f4 FFF7FEFF 		bl	xTaskResumeAll
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3090              		.loc 1 2387 0
 3091 00f8 7B69     		ldr	r3, [r7, #20]
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3092              		.loc 1 2388 0
 3093 00fa 1846     		mov	r0, r3
 3094 00fc 1837     		adds	r7, r7, #24
 3095              	.LCFI114:
 3096              		.cfi_def_cfa_offset 8
 3097 00fe BD46     		mov	sp, r7
 3098              	.LCFI115:
 3099              		.cfi_def_cfa_register 13
 3100              		@ sp needed
 3101 0100 80BD     		pop	{r7, pc}
 3102              	.L205:
 3103 0102 00BF     		.align	2
 3104              	.L204:
 3105 0104 00000000 		.word	uxCurrentNumberOfTasks
 3106 0108 00000000 		.word	pxReadyTasksLists
 3107 010c 00000000 		.word	pxDelayedTaskList
 3108 0110 00000000 		.word	pxOverflowDelayedTaskList
 3109 0114 00000000 		.word	xTasksWaitingTermination
 3110 0118 00000000 		.word	xSuspendedTaskList
 3111              		.cfi_endproc
 3112              	.LFE27:
 3114              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3115              		.align	1
 3116              		.global	xTaskIncrementTick
 3117              		.syntax unified
 3118              		.thumb
 3119              		.thumb_func
 3120              		.fpu fpv4-sp-d16
 3122              	xTaskIncrementTick:
 3123              	.LFB28:
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
ARM GAS  /tmp/cciF1PDz.s 			page 102


2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cciF1PDz.s 			page 103


2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3124              		.loc 1 2500 0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 24
 3127              		@ frame_needed = 1, uses_anonymous_args = 0
 3128 0000 80B5     		push	{r7, lr}
 3129              	.LCFI116:
 3130              		.cfi_def_cfa_offset 8
 3131              		.cfi_offset 7, -8
 3132              		.cfi_offset 14, -4
 3133 0002 86B0     		sub	sp, sp, #24
 3134              	.LCFI117:
 3135              		.cfi_def_cfa_offset 32
 3136 0004 00AF     		add	r7, sp, #0
 3137              	.LCFI118:
 3138              		.cfi_def_cfa_register 7
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3139              		.loc 1 2503 0
 3140 0006 0023     		movs	r3, #0
 3141 0008 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/cciF1PDz.s 			page 104


2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3142              		.loc 1 2509 0
 3143 000a 414B     		ldr	r3, .L220
 3144 000c 1B68     		ldr	r3, [r3]
 3145 000e 002B     		cmp	r3, #0
 3146 0010 73D1     		bne	.L207
 3147              	.LBB140:
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 3148              		.loc 1 2513 0
 3149 0012 404B     		ldr	r3, .L220+4
 3150 0014 1B68     		ldr	r3, [r3]
 3151 0016 0133     		adds	r3, r3, #1
 3152 0018 3B61     		str	r3, [r7, #16]
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3153              		.loc 1 2517 0
 3154 001a 3E4A     		ldr	r2, .L220+4
 3155 001c 3B69     		ldr	r3, [r7, #16]
 3156 001e 1360     		str	r3, [r2]
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 3157              		.loc 1 2519 0
 3158 0020 3B69     		ldr	r3, [r7, #16]
 3159 0022 002B     		cmp	r3, #0
 3160 0024 1FD1     		bne	.L208
 3161              	.LBB141:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3162              		.loc 1 2521 0
 3163 0026 3C4B     		ldr	r3, .L220+8
 3164 0028 1B68     		ldr	r3, [r3]
 3165 002a 1B68     		ldr	r3, [r3]
 3166 002c 002B     		cmp	r3, #0
 3167 002e 09D0     		beq	.L209
 3168              	.LBB142:
 3169              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3170              		.loc 2 237 0 discriminator 1
 3171              		.syntax unified
 3172              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3173 0030 4FF05003 			mov r3, #80												
 3174 0034 83F31188 		msr basepri, r3											
 3175 0038 BFF36F8F 		isb														
 3176 003c BFF34F8F 		dsb														
 3177              	
 3178              	@ 0 "" 2
 3179              		.thumb
ARM GAS  /tmp/cciF1PDz.s 			page 105


 3180              		.syntax unified
 3181 0040 3B60     		str	r3, [r7]
 3182              	.L210:
 3183              	.LBE143:
 3184              	.LBE142:
 3185              		.loc 1 2521 0 discriminator 1
 3186 0042 FEE7     		b	.L210
 3187              	.L209:
 3188              		.loc 1 2521 0 is_stmt 0 discriminator 2
 3189 0044 344B     		ldr	r3, .L220+8
 3190 0046 1B68     		ldr	r3, [r3]
 3191 0048 FB60     		str	r3, [r7, #12]
 3192 004a 344B     		ldr	r3, .L220+12
 3193 004c 1B68     		ldr	r3, [r3]
 3194 004e 324A     		ldr	r2, .L220+8
 3195 0050 1360     		str	r3, [r2]
 3196 0052 324A     		ldr	r2, .L220+12
 3197 0054 FB68     		ldr	r3, [r7, #12]
 3198 0056 1360     		str	r3, [r2]
 3199 0058 314B     		ldr	r3, .L220+16
 3200 005a 1B68     		ldr	r3, [r3]
 3201 005c 0133     		adds	r3, r3, #1
 3202 005e 304A     		ldr	r2, .L220+16
 3203 0060 1360     		str	r3, [r2]
 3204 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3205              	.L208:
 3206              	.LBE141:
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3207              		.loc 1 2532 0 is_stmt 1
 3208 0066 2F4B     		ldr	r3, .L220+20
 3209 0068 1B68     		ldr	r3, [r3]
 3210 006a 3A69     		ldr	r2, [r7, #16]
 3211 006c 9A42     		cmp	r2, r3
 3212 006e 49D3     		bcc	.L218
 3213              	.L217:
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3214              		.loc 1 2536 0
 3215 0070 294B     		ldr	r3, .L220+8
 3216 0072 1B68     		ldr	r3, [r3]
 3217 0074 1B68     		ldr	r3, [r3]
 3218 0076 002B     		cmp	r3, #0
 3219 0078 01D1     		bne	.L212
 3220              		.loc 1 2536 0 is_stmt 0 discriminator 1
 3221 007a 0123     		movs	r3, #1
ARM GAS  /tmp/cciF1PDz.s 			page 106


 3222 007c 00E0     		b	.L213
 3223              	.L212:
 3224              		.loc 1 2536 0 discriminator 2
 3225 007e 0023     		movs	r3, #0
 3226              	.L213:
 3227              		.loc 1 2536 0 discriminator 4
 3228 0080 002B     		cmp	r3, #0
 3229 0082 04D0     		beq	.L214
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3230              		.loc 1 2543 0 is_stmt 1
 3231 0084 274B     		ldr	r3, .L220+20
 3232 0086 4FF0FF32 		mov	r2, #-1
 3233 008a 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3234              		.loc 1 2544 0
 3235 008c 3AE0     		b	.L218
 3236              	.L214:
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3237              		.loc 1 2552 0
 3238 008e 224B     		ldr	r3, .L220+8
 3239 0090 1B68     		ldr	r3, [r3]
 3240 0092 DB68     		ldr	r3, [r3, #12]
 3241 0094 DB68     		ldr	r3, [r3, #12]
 3242 0096 BB60     		str	r3, [r7, #8]
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3243              		.loc 1 2553 0
 3244 0098 BB68     		ldr	r3, [r7, #8]
 3245 009a 5B68     		ldr	r3, [r3, #4]
 3246 009c 7B60     		str	r3, [r7, #4]
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3247              		.loc 1 2555 0
 3248 009e 3A69     		ldr	r2, [r7, #16]
 3249 00a0 7B68     		ldr	r3, [r7, #4]
 3250 00a2 9A42     		cmp	r2, r3
 3251 00a4 03D2     		bcs	.L215
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3252              		.loc 1 2562 0
ARM GAS  /tmp/cciF1PDz.s 			page 107


 3253 00a6 1F4A     		ldr	r2, .L220+20
 3254 00a8 7B68     		ldr	r3, [r7, #4]
 3255 00aa 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 3256              		.loc 1 2563 0
 3257 00ac 2AE0     		b	.L218
 3258              	.L215:
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3259              		.loc 1 2571 0
 3260 00ae BB68     		ldr	r3, [r7, #8]
 3261 00b0 0433     		adds	r3, r3, #4
 3262 00b2 1846     		mov	r0, r3
 3263 00b4 FFF7FEFF 		bl	uxListRemove
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3264              		.loc 1 2575 0
 3265 00b8 BB68     		ldr	r3, [r7, #8]
 3266 00ba 9B6A     		ldr	r3, [r3, #40]
 3267 00bc 002B     		cmp	r3, #0
 3268 00be 04D0     		beq	.L216
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3269              		.loc 1 2577 0
 3270 00c0 BB68     		ldr	r3, [r7, #8]
 3271 00c2 1833     		adds	r3, r3, #24
 3272 00c4 1846     		mov	r0, r3
 3273 00c6 FFF7FEFF 		bl	uxListRemove
 3274              	.L216:
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3275              		.loc 1 2586 0
 3276 00ca BB68     		ldr	r3, [r7, #8]
 3277 00cc DB6A     		ldr	r3, [r3, #44]
 3278 00ce 0122     		movs	r2, #1
 3279 00d0 9A40     		lsls	r2, r2, r3
 3280 00d2 154B     		ldr	r3, .L220+24
 3281 00d4 1B68     		ldr	r3, [r3]
 3282 00d6 1343     		orrs	r3, r3, r2
 3283 00d8 134A     		ldr	r2, .L220+24
 3284 00da 1360     		str	r3, [r2]
 3285 00dc BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cciF1PDz.s 			page 108


 3286 00de DA6A     		ldr	r2, [r3, #44]
 3287 00e0 1346     		mov	r3, r2
 3288 00e2 9B00     		lsls	r3, r3, #2
 3289 00e4 1344     		add	r3, r3, r2
 3290 00e6 9B00     		lsls	r3, r3, #2
 3291 00e8 104A     		ldr	r2, .L220+28
 3292 00ea 1A44     		add	r2, r2, r3
 3293 00ec BB68     		ldr	r3, [r7, #8]
 3294 00ee 0433     		adds	r3, r3, #4
 3295 00f0 1946     		mov	r1, r3
 3296 00f2 1046     		mov	r0, r2
 3297 00f4 FFF7FEFF 		bl	vListInsertEnd
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3298              		.loc 1 2536 0
 3299 00f8 BAE7     		b	.L217
 3300              	.L207:
 3301              	.LBE140:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
ARM GAS  /tmp/cciF1PDz.s 			page 109


2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 3302              		.loc 1 2643 0
 3303 00fa 0D4B     		ldr	r3, .L220+32
 3304 00fc 1B68     		ldr	r3, [r3]
 3305 00fe 0133     		adds	r3, r3, #1
 3306 0100 0B4A     		ldr	r2, .L220+32
 3307 0102 1360     		str	r3, [r2]
 3308              	.L218:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3309              		.loc 1 2667 0
 3310 0104 7B69     		ldr	r3, [r7, #20]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3311              		.loc 1 2668 0
 3312 0106 1846     		mov	r0, r3
 3313 0108 1837     		adds	r7, r7, #24
 3314              	.LCFI119:
 3315              		.cfi_def_cfa_offset 8
 3316 010a BD46     		mov	sp, r7
ARM GAS  /tmp/cciF1PDz.s 			page 110


 3317              	.LCFI120:
 3318              		.cfi_def_cfa_register 13
 3319              		@ sp needed
 3320 010c 80BD     		pop	{r7, pc}
 3321              	.L221:
 3322 010e 00BF     		.align	2
 3323              	.L220:
 3324 0110 00000000 		.word	uxSchedulerSuspended
 3325 0114 00000000 		.word	xTickCount
 3326 0118 00000000 		.word	pxDelayedTaskList
 3327 011c 00000000 		.word	pxOverflowDelayedTaskList
 3328 0120 00000000 		.word	xNumOfOverflows
 3329 0124 00000000 		.word	xNextTaskUnblockTime
 3330 0128 00000000 		.word	uxTopReadyPriority
 3331 012c 00000000 		.word	pxReadyTasksLists
 3332 0130 00000000 		.word	uxPendedTicks
 3333              		.cfi_endproc
 3334              	.LFE28:
 3336              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3337              		.align	1
 3338              		.global	vTaskSwitchContext
 3339              		.syntax unified
 3340              		.thumb
 3341              		.thumb_func
 3342              		.fpu fpv4-sp-d16
 3344              	vTaskSwitchContext:
 3345              	.LFB29:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/cciF1PDz.s 			page 111


2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/cciF1PDz.s 			page 112


2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3346              		.loc 1 2762 0
 3347              		.cfi_startproc
 3348              		@ args = 0, pretend = 0, frame = 24
 3349              		@ frame_needed = 1, uses_anonymous_args = 0
 3350              		@ link register save eliminated.
 3351 0000 80B4     		push	{r7}
 3352              	.LCFI121:
 3353              		.cfi_def_cfa_offset 4
 3354              		.cfi_offset 7, -4
 3355 0002 87B0     		sub	sp, sp, #28
 3356              	.LCFI122:
 3357              		.cfi_def_cfa_offset 32
 3358 0004 00AF     		add	r7, sp, #0
 3359              	.LCFI123:
 3360              		.cfi_def_cfa_register 7
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3361              		.loc 1 2763 0
 3362 0006 264B     		ldr	r3, .L230
 3363 0008 1B68     		ldr	r3, [r3]
 3364 000a 002B     		cmp	r3, #0
 3365 000c 03D0     		beq	.L223
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3366              		.loc 1 2767 0
 3367 000e 254B     		ldr	r3, .L230+4
 3368 0010 0122     		movs	r2, #1
 3369 0012 1A60     		str	r2, [r3]
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
ARM GAS  /tmp/cciF1PDz.s 			page 113


2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3370              		.loc 1 2817 0
 3371 0014 3EE0     		b	.L229
 3372              	.L223:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3373              		.loc 1 2771 0
 3374 0016 234B     		ldr	r3, .L230+4
 3375 0018 0022     		movs	r2, #0
 3376 001a 1A60     		str	r2, [r3]
 3377              	.LBB144:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3378              		.loc 1 2806 0
 3379 001c 224B     		ldr	r3, .L230+8
 3380 001e 1B68     		ldr	r3, [r3]
 3381 0020 FB60     		str	r3, [r7, #12]
 3382              	.LBB145:
 3383              	.LBB146:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3384              		.loc 2 176 0
 3385 0022 FB68     		ldr	r3, [r7, #12]
 3386              		.syntax unified
 3387              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3388 0024 B3FA83F3 		clz r3, r3
 3389              	@ 0 "" 2
 3390              		.thumb
 3391              		.syntax unified
 3392 0028 FB72     		strb	r3, [r7, #11]
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3393              		.loc 2 177 0
ARM GAS  /tmp/cciF1PDz.s 			page 114


 3394 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3395              	.LBE146:
 3396              	.LBE145:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3397              		.loc 1 2806 0
 3398 002c C3F11F03 		rsb	r3, r3, #31
 3399 0030 7B61     		str	r3, [r7, #20]
 3400 0032 1E49     		ldr	r1, .L230+12
 3401 0034 7A69     		ldr	r2, [r7, #20]
 3402 0036 1346     		mov	r3, r2
 3403 0038 9B00     		lsls	r3, r3, #2
 3404 003a 1344     		add	r3, r3, r2
 3405 003c 9B00     		lsls	r3, r3, #2
 3406 003e 0B44     		add	r3, r3, r1
 3407 0040 1B68     		ldr	r3, [r3]
 3408 0042 002B     		cmp	r3, #0
 3409 0044 09D1     		bne	.L226
 3410              	.LBB147:
 3411              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3412              		.loc 2 237 0 discriminator 1
 3413              		.syntax unified
 3414              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3415 0046 4FF05003 			mov r3, #80												
 3416 004a 83F31188 		msr basepri, r3											
 3417 004e BFF36F8F 		isb														
 3418 0052 BFF34F8F 		dsb														
 3419              	
 3420              	@ 0 "" 2
 3421              		.thumb
 3422              		.syntax unified
 3423 0056 7B60     		str	r3, [r7, #4]
 3424              	.L227:
 3425              	.LBE148:
 3426              	.LBE147:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3427              		.loc 1 2806 0 discriminator 1
 3428 0058 FEE7     		b	.L227
 3429              	.L226:
 3430              	.LBB149:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3431              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3432 005a 7A69     		ldr	r2, [r7, #20]
 3433 005c 1346     		mov	r3, r2
 3434 005e 9B00     		lsls	r3, r3, #2
 3435 0060 1344     		add	r3, r3, r2
 3436 0062 9B00     		lsls	r3, r3, #2
 3437 0064 114A     		ldr	r2, .L230+12
 3438 0066 1344     		add	r3, r3, r2
 3439 0068 3B61     		str	r3, [r7, #16]
 3440 006a 3B69     		ldr	r3, [r7, #16]
 3441 006c 5B68     		ldr	r3, [r3, #4]
 3442 006e 5A68     		ldr	r2, [r3, #4]
 3443 0070 3B69     		ldr	r3, [r7, #16]
 3444 0072 5A60     		str	r2, [r3, #4]
 3445 0074 3B69     		ldr	r3, [r7, #16]
 3446 0076 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 115


 3447 0078 3B69     		ldr	r3, [r7, #16]
 3448 007a 0833     		adds	r3, r3, #8
 3449 007c 9A42     		cmp	r2, r3
 3450 007e 04D1     		bne	.L228
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3451              		.loc 1 2806 0 discriminator 3
 3452 0080 3B69     		ldr	r3, [r7, #16]
 3453 0082 5B68     		ldr	r3, [r3, #4]
 3454 0084 5A68     		ldr	r2, [r3, #4]
 3455 0086 3B69     		ldr	r3, [r7, #16]
 3456 0088 5A60     		str	r2, [r3, #4]
 3457              	.L228:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3458              		.loc 1 2806 0 discriminator 5
 3459 008a 3B69     		ldr	r3, [r7, #16]
 3460 008c 5B68     		ldr	r3, [r3, #4]
 3461 008e DB68     		ldr	r3, [r3, #12]
 3462 0090 074A     		ldr	r2, .L230+16
 3463 0092 1360     		str	r3, [r2]
 3464              	.L229:
 3465              	.LBE149:
 3466              	.LBE144:
 3467              		.loc 1 2817 0 is_stmt 1
 3468 0094 00BF     		nop
 3469 0096 1C37     		adds	r7, r7, #28
 3470              	.LCFI124:
 3471              		.cfi_def_cfa_offset 4
 3472 0098 BD46     		mov	sp, r7
 3473              	.LCFI125:
 3474              		.cfi_def_cfa_register 13
 3475              		@ sp needed
 3476 009a 5DF8047B 		ldr	r7, [sp], #4
 3477              	.LCFI126:
 3478              		.cfi_restore 7
 3479              		.cfi_def_cfa_offset 0
 3480 009e 7047     		bx	lr
 3481              	.L231:
 3482              		.align	2
 3483              	.L230:
 3484 00a0 00000000 		.word	uxSchedulerSuspended
 3485 00a4 00000000 		.word	xYieldPending
 3486 00a8 00000000 		.word	uxTopReadyPriority
 3487 00ac 00000000 		.word	pxReadyTasksLists
 3488 00b0 00000000 		.word	pxCurrentTCB
 3489              		.cfi_endproc
 3490              	.LFE29:
 3492              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3493              		.align	1
 3494              		.global	vTaskPlaceOnEventList
 3495              		.syntax unified
 3496              		.thumb
 3497              		.thumb_func
 3498              		.fpu fpv4-sp-d16
 3500              	vTaskPlaceOnEventList:
 3501              	.LFB30:
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 116


2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3502              		.loc 1 2821 0
 3503              		.cfi_startproc
 3504              		@ args = 0, pretend = 0, frame = 16
 3505              		@ frame_needed = 1, uses_anonymous_args = 0
 3506 0000 80B5     		push	{r7, lr}
 3507              	.LCFI127:
 3508              		.cfi_def_cfa_offset 8
 3509              		.cfi_offset 7, -8
 3510              		.cfi_offset 14, -4
 3511 0002 84B0     		sub	sp, sp, #16
 3512              	.LCFI128:
 3513              		.cfi_def_cfa_offset 24
 3514 0004 00AF     		add	r7, sp, #0
 3515              	.LCFI129:
 3516              		.cfi_def_cfa_register 7
 3517 0006 7860     		str	r0, [r7, #4]
 3518 0008 3960     		str	r1, [r7]
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3519              		.loc 1 2822 0
 3520 000a 7B68     		ldr	r3, [r7, #4]
 3521 000c 002B     		cmp	r3, #0
 3522 000e 09D1     		bne	.L233
 3523              	.LBB150:
 3524              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3525              		.loc 2 237 0 discriminator 1
 3526              		.syntax unified
 3527              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3528 0010 4FF05003 			mov r3, #80												
 3529 0014 83F31188 		msr basepri, r3											
 3530 0018 BFF36F8F 		isb														
 3531 001c BFF34F8F 		dsb														
 3532              	
 3533              	@ 0 "" 2
 3534              		.thumb
 3535              		.syntax unified
 3536 0020 FB60     		str	r3, [r7, #12]
 3537              	.L234:
 3538              	.LBE151:
 3539              	.LBE150:
 3540              		.loc 1 2822 0 discriminator 1
 3541 0022 FEE7     		b	.L234
 3542              	.L233:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3543              		.loc 1 2831 0
 3544 0024 074B     		ldr	r3, .L235
 3545 0026 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciF1PDz.s 			page 117


 3546 0028 1833     		adds	r3, r3, #24
 3547 002a 1946     		mov	r1, r3
 3548 002c 7868     		ldr	r0, [r7, #4]
 3549 002e FFF7FEFF 		bl	vListInsert
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3550              		.loc 1 2833 0
 3551 0032 0121     		movs	r1, #1
 3552 0034 3868     		ldr	r0, [r7]
 3553 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3554              		.loc 1 2834 0
 3555 003a 00BF     		nop
 3556 003c 1037     		adds	r7, r7, #16
 3557              	.LCFI130:
 3558              		.cfi_def_cfa_offset 8
 3559 003e BD46     		mov	sp, r7
 3560              	.LCFI131:
 3561              		.cfi_def_cfa_register 13
 3562              		@ sp needed
 3563 0040 80BD     		pop	{r7, pc}
 3564              	.L236:
 3565 0042 00BF     		.align	2
 3566              	.L235:
 3567 0044 00000000 		.word	pxCurrentTCB
 3568              		.cfi_endproc
 3569              	.LFE30:
 3571              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3572              		.align	1
 3573              		.global	vTaskPlaceOnUnorderedEventList
 3574              		.syntax unified
 3575              		.thumb
 3576              		.thumb_func
 3577              		.fpu fpv4-sp-d16
 3579              	vTaskPlaceOnUnorderedEventList:
 3580              	.LFB31:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3581              		.loc 1 2838 0
 3582              		.cfi_startproc
 3583              		@ args = 0, pretend = 0, frame = 24
 3584              		@ frame_needed = 1, uses_anonymous_args = 0
 3585 0000 80B5     		push	{r7, lr}
 3586              	.LCFI132:
 3587              		.cfi_def_cfa_offset 8
 3588              		.cfi_offset 7, -8
 3589              		.cfi_offset 14, -4
 3590 0002 86B0     		sub	sp, sp, #24
 3591              	.LCFI133:
 3592              		.cfi_def_cfa_offset 32
 3593 0004 00AF     		add	r7, sp, #0
 3594              	.LCFI134:
 3595              		.cfi_def_cfa_register 7
 3596 0006 F860     		str	r0, [r7, #12]
 3597 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cciF1PDz.s 			page 118


 3598 000a 7A60     		str	r2, [r7, #4]
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3599              		.loc 1 2839 0
 3600 000c FB68     		ldr	r3, [r7, #12]
 3601 000e 002B     		cmp	r3, #0
 3602 0010 09D1     		bne	.L238
 3603              	.LBB152:
 3604              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3605              		.loc 2 237 0 discriminator 1
 3606              		.syntax unified
 3607              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3608 0012 4FF05003 			mov r3, #80												
 3609 0016 83F31188 		msr basepri, r3											
 3610 001a BFF36F8F 		isb														
 3611 001e BFF34F8F 		dsb														
 3612              	
 3613              	@ 0 "" 2
 3614              		.thumb
 3615              		.syntax unified
 3616 0022 7B61     		str	r3, [r7, #20]
 3617              	.L239:
 3618              	.LBE153:
 3619              	.LBE152:
 3620              		.loc 1 2839 0 discriminator 1
 3621 0024 FEE7     		b	.L239
 3622              	.L238:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3623              		.loc 1 2843 0
 3624 0026 114B     		ldr	r3, .L242
 3625 0028 1B68     		ldr	r3, [r3]
 3626 002a 002B     		cmp	r3, #0
 3627 002c 09D1     		bne	.L240
 3628              	.LBB154:
 3629              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3630              		.loc 2 237 0 discriminator 1
 3631              		.syntax unified
 3632              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3633 002e 4FF05003 			mov r3, #80												
 3634 0032 83F31188 		msr basepri, r3											
 3635 0036 BFF36F8F 		isb														
 3636 003a BFF34F8F 		dsb														
 3637              	
 3638              	@ 0 "" 2
 3639              		.thumb
 3640              		.syntax unified
 3641 003e 3B61     		str	r3, [r7, #16]
 3642              	.L241:
 3643              	.LBE155:
 3644              	.LBE154:
 3645              		.loc 1 2843 0 discriminator 2
 3646 0040 FEE7     		b	.L241
 3647              	.L240:
ARM GAS  /tmp/cciF1PDz.s 			page 119


2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3648              		.loc 1 2848 0
 3649 0042 0B4B     		ldr	r3, .L242+4
 3650 0044 1B68     		ldr	r3, [r3]
 3651 0046 BA68     		ldr	r2, [r7, #8]
 3652 0048 42F00042 		orr	r2, r2, #-2147483648
 3653 004c 9A61     		str	r2, [r3, #24]
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3654              		.loc 1 2855 0
 3655 004e 084B     		ldr	r3, .L242+4
 3656 0050 1B68     		ldr	r3, [r3]
 3657 0052 1833     		adds	r3, r3, #24
 3658 0054 1946     		mov	r1, r3
 3659 0056 F868     		ldr	r0, [r7, #12]
 3660 0058 FFF7FEFF 		bl	vListInsertEnd
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3661              		.loc 1 2857 0
 3662 005c 0121     		movs	r1, #1
 3663 005e 7868     		ldr	r0, [r7, #4]
 3664 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3665              		.loc 1 2858 0
 3666 0064 00BF     		nop
 3667 0066 1837     		adds	r7, r7, #24
 3668              	.LCFI135:
 3669              		.cfi_def_cfa_offset 8
 3670 0068 BD46     		mov	sp, r7
 3671              	.LCFI136:
 3672              		.cfi_def_cfa_register 13
 3673              		@ sp needed
 3674 006a 80BD     		pop	{r7, pc}
 3675              	.L243:
 3676              		.align	2
 3677              	.L242:
 3678 006c 00000000 		.word	uxSchedulerSuspended
 3679 0070 00000000 		.word	pxCurrentTCB
 3680              		.cfi_endproc
 3681              	.LFE31:
 3683              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3684              		.align	1
 3685              		.global	xTaskRemoveFromEventList
 3686              		.syntax unified
 3687              		.thumb
 3688              		.thumb_func
 3689              		.fpu fpv4-sp-d16
 3691              	xTaskRemoveFromEventList:
ARM GAS  /tmp/cciF1PDz.s 			page 120


 3692              	.LFB32:
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3693              		.loc 1 2895 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 24
 3696              		@ frame_needed = 1, uses_anonymous_args = 0
 3697 0000 80B5     		push	{r7, lr}
 3698              	.LCFI137:
 3699              		.cfi_def_cfa_offset 8
 3700              		.cfi_offset 7, -8
 3701              		.cfi_offset 14, -4
 3702 0002 86B0     		sub	sp, sp, #24
 3703              	.LCFI138:
 3704              		.cfi_def_cfa_offset 32
 3705 0004 00AF     		add	r7, sp, #0
 3706              	.LCFI139:
 3707              		.cfi_def_cfa_register 7
 3708 0006 7860     		str	r0, [r7, #4]
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 121


2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3709              		.loc 1 2912 0
 3710 0008 7B68     		ldr	r3, [r7, #4]
 3711 000a DB68     		ldr	r3, [r3, #12]
 3712 000c DB68     		ldr	r3, [r3, #12]
 3713 000e 3B61     		str	r3, [r7, #16]
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3714              		.loc 1 2913 0
 3715 0010 3B69     		ldr	r3, [r7, #16]
 3716 0012 002B     		cmp	r3, #0
 3717 0014 09D1     		bne	.L245
 3718              	.LBB156:
 3719              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3720              		.loc 2 237 0 discriminator 1
 3721              		.syntax unified
 3722              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3723 0016 4FF05003 			mov r3, #80												
 3724 001a 83F31188 		msr basepri, r3											
 3725 001e BFF36F8F 		isb														
 3726 0022 BFF34F8F 		dsb														
 3727              	
 3728              	@ 0 "" 2
 3729              		.thumb
 3730              		.syntax unified
 3731 0026 FB60     		str	r3, [r7, #12]
 3732              	.L246:
 3733              	.LBE157:
 3734              	.LBE156:
 3735              		.loc 1 2913 0 discriminator 1
 3736 0028 FEE7     		b	.L246
 3737              	.L245:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3738              		.loc 1 2914 0
 3739 002a 3B69     		ldr	r3, [r7, #16]
 3740 002c 1833     		adds	r3, r3, #24
 3741 002e 1846     		mov	r0, r3
 3742 0030 FFF7FEFF 		bl	uxListRemove
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3743              		.loc 1 2916 0
 3744 0034 1D4B     		ldr	r3, .L252
 3745 0036 1B68     		ldr	r3, [r3]
 3746 0038 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 122


 3747 003a 1CD1     		bne	.L247
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3748              		.loc 1 2918 0
 3749 003c 3B69     		ldr	r3, [r7, #16]
 3750 003e 0433     		adds	r3, r3, #4
 3751 0040 1846     		mov	r0, r3
 3752 0042 FFF7FEFF 		bl	uxListRemove
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3753              		.loc 1 2919 0
 3754 0046 3B69     		ldr	r3, [r7, #16]
 3755 0048 DB6A     		ldr	r3, [r3, #44]
 3756 004a 0122     		movs	r2, #1
 3757 004c 9A40     		lsls	r2, r2, r3
 3758 004e 184B     		ldr	r3, .L252+4
 3759 0050 1B68     		ldr	r3, [r3]
 3760 0052 1343     		orrs	r3, r3, r2
 3761 0054 164A     		ldr	r2, .L252+4
 3762 0056 1360     		str	r3, [r2]
 3763 0058 3B69     		ldr	r3, [r7, #16]
 3764 005a DA6A     		ldr	r2, [r3, #44]
 3765 005c 1346     		mov	r3, r2
 3766 005e 9B00     		lsls	r3, r3, #2
 3767 0060 1344     		add	r3, r3, r2
 3768 0062 9B00     		lsls	r3, r3, #2
 3769 0064 134A     		ldr	r2, .L252+8
 3770 0066 1A44     		add	r2, r2, r3
 3771 0068 3B69     		ldr	r3, [r7, #16]
 3772 006a 0433     		adds	r3, r3, #4
 3773 006c 1946     		mov	r1, r3
 3774 006e 1046     		mov	r0, r2
 3775 0070 FFF7FEFF 		bl	vListInsertEnd
 3776 0074 05E0     		b	.L248
 3777              	.L247:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3778              		.loc 1 2925 0
 3779 0076 3B69     		ldr	r3, [r7, #16]
 3780 0078 1833     		adds	r3, r3, #24
 3781 007a 1946     		mov	r1, r3
 3782 007c 0E48     		ldr	r0, .L252+12
 3783 007e FFF7FEFF 		bl	vListInsertEnd
 3784              	.L248:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3785              		.loc 1 2928 0
 3786 0082 3B69     		ldr	r3, [r7, #16]
 3787 0084 DA6A     		ldr	r2, [r3, #44]
 3788 0086 0D4B     		ldr	r3, .L252+16
 3789 0088 1B68     		ldr	r3, [r3]
 3790 008a DB6A     		ldr	r3, [r3, #44]
 3791 008c 9A42     		cmp	r2, r3
ARM GAS  /tmp/cciF1PDz.s 			page 123


 3792 008e 05D9     		bls	.L249
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3793              		.loc 1 2933 0
 3794 0090 0123     		movs	r3, #1
 3795 0092 7B61     		str	r3, [r7, #20]
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3796              		.loc 1 2937 0
 3797 0094 0A4B     		ldr	r3, .L252+20
 3798 0096 0122     		movs	r2, #1
 3799 0098 1A60     		str	r2, [r3]
 3800 009a 01E0     		b	.L250
 3801              	.L249:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3802              		.loc 1 2941 0
 3803 009c 0023     		movs	r3, #0
 3804 009e 7B61     		str	r3, [r7, #20]
 3805              	.L250:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3806              		.loc 1 2958 0
 3807 00a0 7B69     		ldr	r3, [r7, #20]
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3808              		.loc 1 2959 0
 3809 00a2 1846     		mov	r0, r3
 3810 00a4 1837     		adds	r7, r7, #24
 3811              	.LCFI140:
 3812              		.cfi_def_cfa_offset 8
 3813 00a6 BD46     		mov	sp, r7
 3814              	.LCFI141:
 3815              		.cfi_def_cfa_register 13
 3816              		@ sp needed
 3817 00a8 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cciF1PDz.s 			page 124


 3818              	.L253:
 3819 00aa 00BF     		.align	2
 3820              	.L252:
 3821 00ac 00000000 		.word	uxSchedulerSuspended
 3822 00b0 00000000 		.word	uxTopReadyPriority
 3823 00b4 00000000 		.word	pxReadyTasksLists
 3824 00b8 00000000 		.word	xPendingReadyList
 3825 00bc 00000000 		.word	pxCurrentTCB
 3826 00c0 00000000 		.word	xYieldPending
 3827              		.cfi_endproc
 3828              	.LFE32:
 3830              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3831              		.align	1
 3832              		.global	xTaskRemoveFromUnorderedEventList
 3833              		.syntax unified
 3834              		.thumb
 3835              		.thumb_func
 3836              		.fpu fpv4-sp-d16
 3838              	xTaskRemoveFromUnorderedEventList:
 3839              	.LFB33:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3840              		.loc 1 2963 0
 3841              		.cfi_startproc
 3842              		@ args = 0, pretend = 0, frame = 24
 3843              		@ frame_needed = 1, uses_anonymous_args = 0
 3844 0000 80B5     		push	{r7, lr}
 3845              	.LCFI142:
 3846              		.cfi_def_cfa_offset 8
 3847              		.cfi_offset 7, -8
 3848              		.cfi_offset 14, -4
 3849 0002 86B0     		sub	sp, sp, #24
 3850              	.LCFI143:
 3851              		.cfi_def_cfa_offset 32
 3852 0004 00AF     		add	r7, sp, #0
 3853              	.LCFI144:
 3854              		.cfi_def_cfa_register 7
 3855 0006 7860     		str	r0, [r7, #4]
 3856 0008 3960     		str	r1, [r7]
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3857              		.loc 1 2969 0
 3858 000a 2B4B     		ldr	r3, .L262
 3859 000c 1B68     		ldr	r3, [r3]
 3860 000e 002B     		cmp	r3, #0
 3861 0010 09D1     		bne	.L255
 3862              	.LBB158:
 3863              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3864              		.loc 2 237 0 discriminator 1
 3865              		.syntax unified
ARM GAS  /tmp/cciF1PDz.s 			page 125


 3866              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3867 0012 4FF05003 			mov r3, #80												
 3868 0016 83F31188 		msr basepri, r3											
 3869 001a BFF36F8F 		isb														
 3870 001e BFF34F8F 		dsb														
 3871              	
 3872              	@ 0 "" 2
 3873              		.thumb
 3874              		.syntax unified
 3875 0022 FB60     		str	r3, [r7, #12]
 3876              	.L256:
 3877              	.LBE159:
 3878              	.LBE158:
 3879              		.loc 1 2969 0 discriminator 1
 3880 0024 FEE7     		b	.L256
 3881              	.L255:
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3882              		.loc 1 2972 0
 3883 0026 3B68     		ldr	r3, [r7]
 3884 0028 43F00042 		orr	r2, r3, #-2147483648
 3885 002c 7B68     		ldr	r3, [r7, #4]
 3886 002e 1A60     		str	r2, [r3]
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3887              		.loc 1 2976 0
 3888 0030 7B68     		ldr	r3, [r7, #4]
 3889 0032 DB68     		ldr	r3, [r3, #12]
 3890 0034 3B61     		str	r3, [r7, #16]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3891              		.loc 1 2977 0
 3892 0036 3B69     		ldr	r3, [r7, #16]
 3893 0038 002B     		cmp	r3, #0
 3894 003a 09D1     		bne	.L257
 3895              	.LBB160:
 3896              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3897              		.loc 2 237 0 discriminator 1
 3898              		.syntax unified
 3899              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3900 003c 4FF05003 			mov r3, #80												
 3901 0040 83F31188 		msr basepri, r3											
 3902 0044 BFF36F8F 		isb														
 3903 0048 BFF34F8F 		dsb														
 3904              	
 3905              	@ 0 "" 2
 3906              		.thumb
 3907              		.syntax unified
 3908 004c BB60     		str	r3, [r7, #8]
 3909              	.L258:
 3910              	.LBE161:
 3911              	.LBE160:
 3912              		.loc 1 2977 0 discriminator 2
 3913 004e FEE7     		b	.L258
ARM GAS  /tmp/cciF1PDz.s 			page 126


 3914              	.L257:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3915              		.loc 1 2978 0
 3916 0050 7868     		ldr	r0, [r7, #4]
 3917 0052 FFF7FEFF 		bl	uxListRemove
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3918              		.loc 1 2983 0
 3919 0056 3B69     		ldr	r3, [r7, #16]
 3920 0058 0433     		adds	r3, r3, #4
 3921 005a 1846     		mov	r0, r3
 3922 005c FFF7FEFF 		bl	uxListRemove
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3923              		.loc 1 2984 0
 3924 0060 3B69     		ldr	r3, [r7, #16]
 3925 0062 DB6A     		ldr	r3, [r3, #44]
 3926 0064 0122     		movs	r2, #1
 3927 0066 9A40     		lsls	r2, r2, r3
 3928 0068 144B     		ldr	r3, .L262+4
 3929 006a 1B68     		ldr	r3, [r3]
 3930 006c 1343     		orrs	r3, r3, r2
 3931 006e 134A     		ldr	r2, .L262+4
 3932 0070 1360     		str	r3, [r2]
 3933 0072 3B69     		ldr	r3, [r7, #16]
 3934 0074 DA6A     		ldr	r2, [r3, #44]
 3935 0076 1346     		mov	r3, r2
 3936 0078 9B00     		lsls	r3, r3, #2
 3937 007a 1344     		add	r3, r3, r2
 3938 007c 9B00     		lsls	r3, r3, #2
 3939 007e 104A     		ldr	r2, .L262+8
 3940 0080 1A44     		add	r2, r2, r3
 3941 0082 3B69     		ldr	r3, [r7, #16]
 3942 0084 0433     		adds	r3, r3, #4
 3943 0086 1946     		mov	r1, r3
 3944 0088 1046     		mov	r0, r2
 3945 008a FFF7FEFF 		bl	vListInsertEnd
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3946              		.loc 1 2986 0
 3947 008e 3B69     		ldr	r3, [r7, #16]
 3948 0090 DA6A     		ldr	r2, [r3, #44]
 3949 0092 0C4B     		ldr	r3, .L262+12
 3950 0094 1B68     		ldr	r3, [r3]
 3951 0096 DB6A     		ldr	r3, [r3, #44]
 3952 0098 9A42     		cmp	r2, r3
 3953 009a 05D9     		bls	.L259
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3954              		.loc 1 2992 0
 3955 009c 0123     		movs	r3, #1
ARM GAS  /tmp/cciF1PDz.s 			page 127


 3956 009e 7B61     		str	r3, [r7, #20]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3957              		.loc 1 2996 0
 3958 00a0 094B     		ldr	r3, .L262+16
 3959 00a2 0122     		movs	r2, #1
 3960 00a4 1A60     		str	r2, [r3]
 3961 00a6 01E0     		b	.L260
 3962              	.L259:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3963              		.loc 1 3000 0
 3964 00a8 0023     		movs	r3, #0
 3965 00aa 7B61     		str	r3, [r7, #20]
 3966              	.L260:
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3967              		.loc 1 3003 0
 3968 00ac 7B69     		ldr	r3, [r7, #20]
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3969              		.loc 1 3004 0
 3970 00ae 1846     		mov	r0, r3
 3971 00b0 1837     		adds	r7, r7, #24
 3972              	.LCFI145:
 3973              		.cfi_def_cfa_offset 8
 3974 00b2 BD46     		mov	sp, r7
 3975              	.LCFI146:
 3976              		.cfi_def_cfa_register 13
 3977              		@ sp needed
 3978 00b4 80BD     		pop	{r7, pc}
 3979              	.L263:
 3980 00b6 00BF     		.align	2
 3981              	.L262:
 3982 00b8 00000000 		.word	uxSchedulerSuspended
 3983 00bc 00000000 		.word	uxTopReadyPriority
 3984 00c0 00000000 		.word	pxReadyTasksLists
 3985 00c4 00000000 		.word	pxCurrentTCB
 3986 00c8 00000000 		.word	xYieldPending
 3987              		.cfi_endproc
 3988              	.LFE33:
 3990              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3991              		.align	1
 3992              		.global	vTaskSetTimeOutState
 3993              		.syntax unified
 3994              		.thumb
 3995              		.thumb_func
 3996              		.fpu fpv4-sp-d16
 3998              	vTaskSetTimeOutState:
 3999              	.LFB34:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  /tmp/cciF1PDz.s 			page 128


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4000              		.loc 1 3008 0
 4001              		.cfi_startproc
 4002              		@ args = 0, pretend = 0, frame = 16
 4003              		@ frame_needed = 1, uses_anonymous_args = 0
 4004              		@ link register save eliminated.
 4005 0000 80B4     		push	{r7}
 4006              	.LCFI147:
 4007              		.cfi_def_cfa_offset 4
 4008              		.cfi_offset 7, -4
 4009 0002 85B0     		sub	sp, sp, #20
 4010              	.LCFI148:
 4011              		.cfi_def_cfa_offset 24
 4012 0004 00AF     		add	r7, sp, #0
 4013              	.LCFI149:
 4014              		.cfi_def_cfa_register 7
 4015 0006 7860     		str	r0, [r7, #4]
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4016              		.loc 1 3009 0
 4017 0008 7B68     		ldr	r3, [r7, #4]
 4018 000a 002B     		cmp	r3, #0
 4019 000c 09D1     		bne	.L265
 4020              	.LBB162:
 4021              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4022              		.loc 2 237 0 discriminator 1
 4023              		.syntax unified
 4024              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4025 000e 4FF05003 			mov r3, #80												
 4026 0012 83F31188 		msr basepri, r3											
 4027 0016 BFF36F8F 		isb														
 4028 001a BFF34F8F 		dsb														
 4029              	
 4030              	@ 0 "" 2
 4031              		.thumb
 4032              		.syntax unified
 4033 001e FB60     		str	r3, [r7, #12]
 4034              	.L266:
 4035              	.LBE163:
 4036              	.LBE162:
 4037              		.loc 1 3009 0 discriminator 1
 4038 0020 FEE7     		b	.L266
 4039              	.L265:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4040              		.loc 1 3010 0
 4041 0022 074B     		ldr	r3, .L267
 4042 0024 1A68     		ldr	r2, [r3]
 4043 0026 7B68     		ldr	r3, [r7, #4]
 4044 0028 1A60     		str	r2, [r3]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4045              		.loc 1 3011 0
 4046 002a 064B     		ldr	r3, .L267+4
 4047 002c 1A68     		ldr	r2, [r3]
 4048 002e 7B68     		ldr	r3, [r7, #4]
 4049 0030 5A60     		str	r2, [r3, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4050              		.loc 1 3012 0
ARM GAS  /tmp/cciF1PDz.s 			page 129


 4051 0032 00BF     		nop
 4052 0034 1437     		adds	r7, r7, #20
 4053              	.LCFI150:
 4054              		.cfi_def_cfa_offset 4
 4055 0036 BD46     		mov	sp, r7
 4056              	.LCFI151:
 4057              		.cfi_def_cfa_register 13
 4058              		@ sp needed
 4059 0038 5DF8047B 		ldr	r7, [sp], #4
 4060              	.LCFI152:
 4061              		.cfi_restore 7
 4062              		.cfi_def_cfa_offset 0
 4063 003c 7047     		bx	lr
 4064              	.L268:
 4065 003e 00BF     		.align	2
 4066              	.L267:
 4067 0040 00000000 		.word	xNumOfOverflows
 4068 0044 00000000 		.word	xTickCount
 4069              		.cfi_endproc
 4070              	.LFE34:
 4072              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4073              		.align	1
 4074              		.global	xTaskCheckForTimeOut
 4075              		.syntax unified
 4076              		.thumb
 4077              		.thumb_func
 4078              		.fpu fpv4-sp-d16
 4080              	xTaskCheckForTimeOut:
 4081              	.LFB35:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4082              		.loc 1 3016 0
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 24
 4085              		@ frame_needed = 1, uses_anonymous_args = 0
 4086 0000 80B5     		push	{r7, lr}
 4087              	.LCFI153:
 4088              		.cfi_def_cfa_offset 8
 4089              		.cfi_offset 7, -8
 4090              		.cfi_offset 14, -4
 4091 0002 86B0     		sub	sp, sp, #24
 4092              	.LCFI154:
 4093              		.cfi_def_cfa_offset 32
 4094 0004 00AF     		add	r7, sp, #0
 4095              	.LCFI155:
 4096              		.cfi_def_cfa_register 7
 4097 0006 7860     		str	r0, [r7, #4]
 4098 0008 3960     		str	r1, [r7]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4099              		.loc 1 3019 0
 4100 000a 7B68     		ldr	r3, [r7, #4]
 4101 000c 002B     		cmp	r3, #0
 4102 000e 09D1     		bne	.L270
ARM GAS  /tmp/cciF1PDz.s 			page 130


 4103              	.LBB164:
 4104              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4105              		.loc 2 237 0 discriminator 1
 4106              		.syntax unified
 4107              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4108 0010 4FF05003 			mov r3, #80												
 4109 0014 83F31188 		msr basepri, r3											
 4110 0018 BFF36F8F 		isb														
 4111 001c BFF34F8F 		dsb														
 4112              	
 4113              	@ 0 "" 2
 4114              		.thumb
 4115              		.syntax unified
 4116 0020 FB60     		str	r3, [r7, #12]
 4117              	.L271:
 4118              	.LBE165:
 4119              	.LBE164:
 4120              		.loc 1 3019 0 discriminator 1
 4121 0022 FEE7     		b	.L271
 4122              	.L270:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4123              		.loc 1 3020 0
 4124 0024 3B68     		ldr	r3, [r7]
 4125 0026 002B     		cmp	r3, #0
 4126 0028 09D1     		bne	.L272
 4127              	.LBB166:
 4128              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4129              		.loc 2 237 0 discriminator 1
 4130              		.syntax unified
 4131              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4132 002a 4FF05003 			mov r3, #80												
 4133 002e 83F31188 		msr basepri, r3											
 4134 0032 BFF36F8F 		isb														
 4135 0036 BFF34F8F 		dsb														
 4136              	
 4137              	@ 0 "" 2
 4138              		.thumb
 4139              		.syntax unified
 4140 003a BB60     		str	r3, [r7, #8]
 4141              	.L273:
 4142              	.LBE167:
 4143              	.LBE166:
 4144              		.loc 1 3020 0 discriminator 2
 4145 003c FEE7     		b	.L273
 4146              	.L272:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4147              		.loc 1 3022 0
 4148 003e FFF7FEFF 		bl	vPortEnterCritical
 4149              	.LBB168:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4150              		.loc 1 3025 0
 4151 0042 1C4B     		ldr	r3, .L279
ARM GAS  /tmp/cciF1PDz.s 			page 131


 4152 0044 1B68     		ldr	r3, [r3]
 4153 0046 3B61     		str	r3, [r7, #16]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4154              		.loc 1 3039 0
 4155 0048 3B68     		ldr	r3, [r7]
 4156 004a 1B68     		ldr	r3, [r3]
 4157 004c B3F1FF3F 		cmp	r3, #-1
 4158 0050 02D1     		bne	.L274
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4159              		.loc 1 3044 0
 4160 0052 0023     		movs	r3, #0
 4161 0054 7B61     		str	r3, [r7, #20]
 4162 0056 26E0     		b	.L275
 4163              	.L274:
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4164              		.loc 1 3049 0
 4165 0058 7B68     		ldr	r3, [r7, #4]
 4166 005a 1A68     		ldr	r2, [r3]
 4167 005c 164B     		ldr	r3, .L279+4
 4168 005e 1B68     		ldr	r3, [r3]
 4169 0060 9A42     		cmp	r2, r3
 4170 0062 07D0     		beq	.L276
 4171              		.loc 1 3049 0 is_stmt 0 discriminator 1
 4172 0064 7B68     		ldr	r3, [r7, #4]
 4173 0066 5A68     		ldr	r2, [r3, #4]
 4174 0068 3B69     		ldr	r3, [r7, #16]
 4175 006a 9A42     		cmp	r2, r3
 4176 006c 02D8     		bhi	.L276
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4177              		.loc 1 3056 0 is_stmt 1
ARM GAS  /tmp/cciF1PDz.s 			page 132


 4178 006e 0123     		movs	r3, #1
 4179 0070 7B61     		str	r3, [r7, #20]
 4180 0072 18E0     		b	.L275
 4181              	.L276:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 4182              		.loc 1 3058 0
 4183 0074 7B68     		ldr	r3, [r7, #4]
 4184 0076 5B68     		ldr	r3, [r3, #4]
 4185 0078 3A69     		ldr	r2, [r7, #16]
 4186 007a D21A     		subs	r2, r2, r3
 4187 007c 3B68     		ldr	r3, [r7]
 4188 007e 1B68     		ldr	r3, [r3]
 4189 0080 9A42     		cmp	r2, r3
 4190 0082 0ED2     		bcs	.L277
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 4191              		.loc 1 3061 0
 4192 0084 3B68     		ldr	r3, [r7]
 4193 0086 1A68     		ldr	r2, [r3]
 4194 0088 7B68     		ldr	r3, [r7, #4]
 4195 008a 5968     		ldr	r1, [r3, #4]
 4196 008c 3B69     		ldr	r3, [r7, #16]
 4197 008e CB1A     		subs	r3, r1, r3
 4198 0090 1A44     		add	r2, r2, r3
 4199 0092 3B68     		ldr	r3, [r7]
 4200 0094 1A60     		str	r2, [r3]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4201              		.loc 1 3062 0
 4202 0096 7868     		ldr	r0, [r7, #4]
 4203 0098 FFF7FEFF 		bl	vTaskSetTimeOutState
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4204              		.loc 1 3063 0
 4205 009c 0023     		movs	r3, #0
 4206 009e 7B61     		str	r3, [r7, #20]
 4207 00a0 01E0     		b	.L275
 4208              	.L277:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4209              		.loc 1 3067 0
 4210 00a2 0123     		movs	r3, #1
 4211 00a4 7B61     		str	r3, [r7, #20]
 4212              	.L275:
 4213              	.LBE168:
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4214              		.loc 1 3070 0
 4215 00a6 FFF7FEFF 		bl	vPortExitCritical
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4216              		.loc 1 3072 0
 4217 00aa 7B69     		ldr	r3, [r7, #20]
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cciF1PDz.s 			page 133


 4218              		.loc 1 3073 0
 4219 00ac 1846     		mov	r0, r3
 4220 00ae 1837     		adds	r7, r7, #24
 4221              	.LCFI156:
 4222              		.cfi_def_cfa_offset 8
 4223 00b0 BD46     		mov	sp, r7
 4224              	.LCFI157:
 4225              		.cfi_def_cfa_register 13
 4226              		@ sp needed
 4227 00b2 80BD     		pop	{r7, pc}
 4228              	.L280:
 4229              		.align	2
 4230              	.L279:
 4231 00b4 00000000 		.word	xTickCount
 4232 00b8 00000000 		.word	xNumOfOverflows
 4233              		.cfi_endproc
 4234              	.LFE35:
 4236              		.section	.text.vTaskMissedYield,"ax",%progbits
 4237              		.align	1
 4238              		.global	vTaskMissedYield
 4239              		.syntax unified
 4240              		.thumb
 4241              		.thumb_func
 4242              		.fpu fpv4-sp-d16
 4244              	vTaskMissedYield:
 4245              	.LFB36:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4246              		.loc 1 3077 0
 4247              		.cfi_startproc
 4248              		@ args = 0, pretend = 0, frame = 0
 4249              		@ frame_needed = 1, uses_anonymous_args = 0
 4250              		@ link register save eliminated.
 4251 0000 80B4     		push	{r7}
 4252              	.LCFI158:
 4253              		.cfi_def_cfa_offset 4
 4254              		.cfi_offset 7, -4
 4255 0002 00AF     		add	r7, sp, #0
 4256              	.LCFI159:
 4257              		.cfi_def_cfa_register 7
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4258              		.loc 1 3078 0
 4259 0004 034B     		ldr	r3, .L282
 4260 0006 0122     		movs	r2, #1
 4261 0008 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4262              		.loc 1 3079 0
 4263 000a 00BF     		nop
 4264 000c BD46     		mov	sp, r7
 4265              	.LCFI160:
 4266              		.cfi_def_cfa_register 13
 4267              		@ sp needed
 4268 000e 5DF8047B 		ldr	r7, [sp], #4
 4269              	.LCFI161:
 4270              		.cfi_restore 7
ARM GAS  /tmp/cciF1PDz.s 			page 134


 4271              		.cfi_def_cfa_offset 0
 4272 0012 7047     		bx	lr
 4273              	.L283:
 4274              		.align	2
 4275              	.L282:
 4276 0014 00000000 		.word	xYieldPending
 4277              		.cfi_endproc
 4278              	.LFE36:
 4280              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4281              		.align	1
 4282              		.global	uxTaskGetTaskNumber
 4283              		.syntax unified
 4284              		.thumb
 4285              		.thumb_func
 4286              		.fpu fpv4-sp-d16
 4288              	uxTaskGetTaskNumber:
 4289              	.LFB37:
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4290              		.loc 1 3085 0
 4291              		.cfi_startproc
 4292              		@ args = 0, pretend = 0, frame = 16
 4293              		@ frame_needed = 1, uses_anonymous_args = 0
 4294              		@ link register save eliminated.
 4295 0000 80B4     		push	{r7}
 4296              	.LCFI162:
 4297              		.cfi_def_cfa_offset 4
 4298              		.cfi_offset 7, -4
 4299 0002 85B0     		sub	sp, sp, #20
 4300              	.LCFI163:
 4301              		.cfi_def_cfa_offset 24
 4302 0004 00AF     		add	r7, sp, #0
 4303              	.LCFI164:
 4304              		.cfi_def_cfa_register 7
 4305 0006 7860     		str	r0, [r7, #4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4306              		.loc 1 3089 0
 4307 0008 7B68     		ldr	r3, [r7, #4]
 4308 000a 002B     		cmp	r3, #0
 4309 000c 05D0     		beq	.L285
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4310              		.loc 1 3091 0
 4311 000e 7B68     		ldr	r3, [r7, #4]
 4312 0010 BB60     		str	r3, [r7, #8]
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4313              		.loc 1 3092 0
 4314 0012 BB68     		ldr	r3, [r7, #8]
 4315 0014 9B6C     		ldr	r3, [r3, #72]
 4316 0016 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cciF1PDz.s 			page 135


 4317 0018 01E0     		b	.L286
 4318              	.L285:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 4319              		.loc 1 3096 0
 4320 001a 0023     		movs	r3, #0
 4321 001c FB60     		str	r3, [r7, #12]
 4322              	.L286:
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 4323              		.loc 1 3099 0
 4324 001e FB68     		ldr	r3, [r7, #12]
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4325              		.loc 1 3100 0
 4326 0020 1846     		mov	r0, r3
 4327 0022 1437     		adds	r7, r7, #20
 4328              	.LCFI165:
 4329              		.cfi_def_cfa_offset 4
 4330 0024 BD46     		mov	sp, r7
 4331              	.LCFI166:
 4332              		.cfi_def_cfa_register 13
 4333              		@ sp needed
 4334 0026 5DF8047B 		ldr	r7, [sp], #4
 4335              	.LCFI167:
 4336              		.cfi_restore 7
 4337              		.cfi_def_cfa_offset 0
 4338 002a 7047     		bx	lr
 4339              		.cfi_endproc
 4340              	.LFE37:
 4342              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4343              		.align	1
 4344              		.global	vTaskSetTaskNumber
 4345              		.syntax unified
 4346              		.thumb
 4347              		.thumb_func
 4348              		.fpu fpv4-sp-d16
 4350              	vTaskSetTaskNumber:
 4351              	.LFB38:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4352              		.loc 1 3108 0
 4353              		.cfi_startproc
 4354              		@ args = 0, pretend = 0, frame = 16
 4355              		@ frame_needed = 1, uses_anonymous_args = 0
 4356              		@ link register save eliminated.
 4357 0000 80B4     		push	{r7}
 4358              	.LCFI168:
 4359              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cciF1PDz.s 			page 136


 4360              		.cfi_offset 7, -4
 4361 0002 85B0     		sub	sp, sp, #20
 4362              	.LCFI169:
 4363              		.cfi_def_cfa_offset 24
 4364 0004 00AF     		add	r7, sp, #0
 4365              	.LCFI170:
 4366              		.cfi_def_cfa_register 7
 4367 0006 7860     		str	r0, [r7, #4]
 4368 0008 3960     		str	r1, [r7]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4369              		.loc 1 3111 0
 4370 000a 7B68     		ldr	r3, [r7, #4]
 4371 000c 002B     		cmp	r3, #0
 4372 000e 04D0     		beq	.L290
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4373              		.loc 1 3113 0
 4374 0010 7B68     		ldr	r3, [r7, #4]
 4375 0012 FB60     		str	r3, [r7, #12]
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4376              		.loc 1 3114 0
 4377 0014 FB68     		ldr	r3, [r7, #12]
 4378 0016 3A68     		ldr	r2, [r7]
 4379 0018 9A64     		str	r2, [r3, #72]
 4380              	.L290:
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4381              		.loc 1 3116 0
 4382 001a 00BF     		nop
 4383 001c 1437     		adds	r7, r7, #20
 4384              	.LCFI171:
 4385              		.cfi_def_cfa_offset 4
 4386 001e BD46     		mov	sp, r7
 4387              	.LCFI172:
 4388              		.cfi_def_cfa_register 13
 4389              		@ sp needed
 4390 0020 5DF8047B 		ldr	r7, [sp], #4
 4391              	.LCFI173:
 4392              		.cfi_restore 7
 4393              		.cfi_def_cfa_offset 0
 4394 0024 7047     		bx	lr
 4395              		.cfi_endproc
 4396              	.LFE38:
 4398              		.section	.text.prvIdleTask,"ax",%progbits
 4399              		.align	1
 4400              		.syntax unified
 4401              		.thumb
 4402              		.thumb_func
 4403              		.fpu fpv4-sp-d16
 4405              	prvIdleTask:
 4406              	.LFB39:
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/cciF1PDz.s 			page 137


3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4407              		.loc 1 3132 0
 4408              		.cfi_startproc
 4409              		@ args = 0, pretend = 0, frame = 8
 4410              		@ frame_needed = 1, uses_anonymous_args = 0
 4411 0000 80B5     		push	{r7, lr}
 4412              	.LCFI174:
 4413              		.cfi_def_cfa_offset 8
 4414              		.cfi_offset 7, -8
 4415              		.cfi_offset 14, -4
 4416 0002 82B0     		sub	sp, sp, #8
 4417              	.LCFI175:
 4418              		.cfi_def_cfa_offset 16
 4419 0004 00AF     		add	r7, sp, #0
 4420              	.LCFI176:
 4421              		.cfi_def_cfa_register 7
 4422 0006 7860     		str	r0, [r7, #4]
 4423              	.L292:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4424              		.loc 1 3143 0 discriminator 1
 4425 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
 4426              		.loc 1 3151 0 discriminator 1
 4427 000c 044B     		ldr	r3, .L293
 4428 000e 4FF08052 		mov	r2, #268435456
 4429 0012 1A60     		str	r2, [r3]
 4430              		.syntax unified
 4431              	@ 3151 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4432 0014 BFF34F8F 		dsb
ARM GAS  /tmp/cciF1PDz.s 			page 138


 4433              	@ 0 "" 2
 4434              	@ 3151 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4435 0018 BFF36F8F 		isb
 4436              	@ 0 "" 2
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4437              		.loc 1 3143 0 discriminator 1
 4438              		.thumb
 4439              		.syntax unified
 4440 001c F4E7     		b	.L292
 4441              	.L294:
 4442 001e 00BF     		.align	2
 4443              	.L293:
 4444 0020 04ED00E0 		.word	-536810236
 4445              		.cfi_endproc
 4446              	.LFE39:
 4448              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4449              		.align	1
 4450              		.syntax unified
 4451              		.thumb
 4452              		.thumb_func
 4453              		.fpu fpv4-sp-d16
 4455              	prvInitialiseTaskLists:
 4456              	.LFB40:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
ARM GAS  /tmp/cciF1PDz.s 			page 139


3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  /tmp/cciF1PDz.s 			page 140


3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cciF1PDz.s 			page 141


3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4457              		.loc 1 3334 0
 4458              		.cfi_startproc
 4459              		@ args = 0, pretend = 0, frame = 8
 4460              		@ frame_needed = 1, uses_anonymous_args = 0
 4461 0000 80B5     		push	{r7, lr}
 4462              	.LCFI177:
 4463              		.cfi_def_cfa_offset 8
 4464              		.cfi_offset 7, -8
 4465              		.cfi_offset 14, -4
 4466 0002 82B0     		sub	sp, sp, #8
 4467              	.LCFI178:
 4468              		.cfi_def_cfa_offset 16
 4469 0004 00AF     		add	r7, sp, #0
 4470              	.LCFI179:
 4471              		.cfi_def_cfa_register 7
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4472              		.loc 1 3337 0
 4473 0006 0023     		movs	r3, #0
 4474 0008 7B60     		str	r3, [r7, #4]
 4475 000a 0CE0     		b	.L296
ARM GAS  /tmp/cciF1PDz.s 			page 142


 4476              	.L297:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4477              		.loc 1 3339 0 discriminator 3
 4478 000c 7A68     		ldr	r2, [r7, #4]
 4479 000e 1346     		mov	r3, r2
 4480 0010 9B00     		lsls	r3, r3, #2
 4481 0012 1344     		add	r3, r3, r2
 4482 0014 9B00     		lsls	r3, r3, #2
 4483 0016 124A     		ldr	r2, .L298
 4484 0018 1344     		add	r3, r3, r2
 4485 001a 1846     		mov	r0, r3
 4486 001c FFF7FEFF 		bl	vListInitialise
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4487              		.loc 1 3337 0 discriminator 3
 4488 0020 7B68     		ldr	r3, [r7, #4]
 4489 0022 0133     		adds	r3, r3, #1
 4490 0024 7B60     		str	r3, [r7, #4]
 4491              	.L296:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4492              		.loc 1 3337 0 is_stmt 0 discriminator 1
 4493 0026 7B68     		ldr	r3, [r7, #4]
 4494 0028 062B     		cmp	r3, #6
 4495 002a EFD9     		bls	.L297
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4496              		.loc 1 3342 0 is_stmt 1
 4497 002c 0D48     		ldr	r0, .L298+4
 4498 002e FFF7FEFF 		bl	vListInitialise
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4499              		.loc 1 3343 0
 4500 0032 0D48     		ldr	r0, .L298+8
 4501 0034 FFF7FEFF 		bl	vListInitialise
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4502              		.loc 1 3344 0
 4503 0038 0C48     		ldr	r0, .L298+12
 4504 003a FFF7FEFF 		bl	vListInitialise
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4505              		.loc 1 3348 0
 4506 003e 0C48     		ldr	r0, .L298+16
 4507 0040 FFF7FEFF 		bl	vListInitialise
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4508              		.loc 1 3354 0
 4509 0044 0B48     		ldr	r0, .L298+20
 4510 0046 FFF7FEFF 		bl	vListInitialise
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 143


3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4511              		.loc 1 3360 0
 4512 004a 0B4B     		ldr	r3, .L298+24
 4513 004c 054A     		ldr	r2, .L298+4
 4514 004e 1A60     		str	r2, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4515              		.loc 1 3361 0
 4516 0050 0A4B     		ldr	r3, .L298+28
 4517 0052 054A     		ldr	r2, .L298+8
 4518 0054 1A60     		str	r2, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4519              		.loc 1 3362 0
 4520 0056 00BF     		nop
 4521 0058 0837     		adds	r7, r7, #8
 4522              	.LCFI180:
 4523              		.cfi_def_cfa_offset 8
 4524 005a BD46     		mov	sp, r7
 4525              	.LCFI181:
 4526              		.cfi_def_cfa_register 13
 4527              		@ sp needed
 4528 005c 80BD     		pop	{r7, pc}
 4529              	.L299:
 4530 005e 00BF     		.align	2
 4531              	.L298:
 4532 0060 00000000 		.word	pxReadyTasksLists
 4533 0064 00000000 		.word	xDelayedTaskList1
 4534 0068 00000000 		.word	xDelayedTaskList2
 4535 006c 00000000 		.word	xPendingReadyList
 4536 0070 00000000 		.word	xTasksWaitingTermination
 4537 0074 00000000 		.word	xSuspendedTaskList
 4538 0078 00000000 		.word	pxDelayedTaskList
 4539 007c 00000000 		.word	pxOverflowDelayedTaskList
 4540              		.cfi_endproc
 4541              	.LFE40:
 4543              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4544              		.align	1
 4545              		.syntax unified
 4546              		.thumb
 4547              		.thumb_func
 4548              		.fpu fpv4-sp-d16
 4550              	prvCheckTasksWaitingTermination:
 4551              	.LFB41:
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4552              		.loc 1 3366 0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 8
 4555              		@ frame_needed = 1, uses_anonymous_args = 0
 4556 0000 80B5     		push	{r7, lr}
 4557              	.LCFI182:
 4558              		.cfi_def_cfa_offset 8
 4559              		.cfi_offset 7, -8
 4560              		.cfi_offset 14, -4
ARM GAS  /tmp/cciF1PDz.s 			page 144


 4561 0002 82B0     		sub	sp, sp, #8
 4562              	.LCFI183:
 4563              		.cfi_def_cfa_offset 16
 4564 0004 00AF     		add	r7, sp, #0
 4565              	.LCFI184:
 4566              		.cfi_def_cfa_register 7
 4567              	.LBB169:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4568              		.loc 1 3376 0
 4569 0006 28E0     		b	.L301
 4570              	.L302:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 4571              		.loc 1 3378 0
 4572 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4573              		.loc 1 3380 0
 4574 000c 174B     		ldr	r3, .L303
 4575 000e 1B68     		ldr	r3, [r3]
 4576 0010 002B     		cmp	r3, #0
 4577 0012 0CBF     		ite	eq
 4578 0014 0123     		moveq	r3, #1
 4579 0016 0023     		movne	r3, #0
 4580 0018 DBB2     		uxtb	r3, r3
 4581 001a 7B60     		str	r3, [r7, #4]
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 4582              		.loc 1 3382 0
 4583 001c FFF7FEFF 		bl	xTaskResumeAll
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4584              		.loc 1 3384 0
 4585 0020 7B68     		ldr	r3, [r7, #4]
 4586 0022 002B     		cmp	r3, #0
 4587 0024 19D1     		bne	.L301
 4588              	.LBB170:
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 4589              		.loc 1 3388 0
 4590 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4591              		.loc 1 3390 0
 4592 002a 104B     		ldr	r3, .L303
 4593 002c DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cciF1PDz.s 			page 145


 4594 002e DB68     		ldr	r3, [r3, #12]
 4595 0030 3B60     		str	r3, [r7]
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4596              		.loc 1 3391 0
 4597 0032 3B68     		ldr	r3, [r7]
 4598 0034 0433     		adds	r3, r3, #4
 4599 0036 1846     		mov	r0, r3
 4600 0038 FFF7FEFF 		bl	uxListRemove
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4601              		.loc 1 3392 0
 4602 003c 0C4B     		ldr	r3, .L303+4
 4603 003e 1B68     		ldr	r3, [r3]
 4604 0040 013B     		subs	r3, r3, #1
 4605 0042 0B4A     		ldr	r2, .L303+4
 4606 0044 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4607              		.loc 1 3393 0
 4608 0046 0B4B     		ldr	r3, .L303+8
 4609 0048 1B68     		ldr	r3, [r3]
 4610 004a 013B     		subs	r3, r3, #1
 4611 004c 094A     		ldr	r2, .L303+8
 4612 004e 1360     		str	r3, [r2]
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 4613              		.loc 1 3395 0
 4614 0050 FFF7FEFF 		bl	vPortExitCritical
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4615              		.loc 1 3397 0
 4616 0054 3868     		ldr	r0, [r7]
 4617 0056 FFF7FEFF 		bl	prvDeleteTCB
 4618              	.L301:
 4619              	.LBE170:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4620              		.loc 1 3376 0
 4621 005a 064B     		ldr	r3, .L303+8
 4622 005c 1B68     		ldr	r3, [r3]
 4623 005e 002B     		cmp	r3, #0
 4624 0060 D2D1     		bne	.L302
 4625              	.LBE169:
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4626              		.loc 1 3406 0
 4627 0062 00BF     		nop
 4628 0064 0837     		adds	r7, r7, #8
 4629              	.LCFI185:
 4630              		.cfi_def_cfa_offset 8
 4631 0066 BD46     		mov	sp, r7
 4632              	.LCFI186:
 4633              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cciF1PDz.s 			page 146


 4634              		@ sp needed
 4635 0068 80BD     		pop	{r7, pc}
 4636              	.L304:
 4637 006a 00BF     		.align	2
 4638              	.L303:
 4639 006c 00000000 		.word	xTasksWaitingTermination
 4640 0070 00000000 		.word	uxCurrentNumberOfTasks
 4641 0074 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4642              		.cfi_endproc
 4643              	.LFE41:
 4645              		.section	.text.vTaskGetInfo,"ax",%progbits
 4646              		.align	1
 4647              		.global	vTaskGetInfo
 4648              		.syntax unified
 4649              		.thumb
 4650              		.thumb_func
 4651              		.fpu fpv4-sp-d16
 4653              	vTaskGetInfo:
 4654              	.LFB42:
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4655              		.loc 1 3412 0
 4656              		.cfi_startproc
 4657              		@ args = 0, pretend = 0, frame = 24
 4658              		@ frame_needed = 1, uses_anonymous_args = 0
 4659 0000 80B5     		push	{r7, lr}
 4660              	.LCFI187:
 4661              		.cfi_def_cfa_offset 8
 4662              		.cfi_offset 7, -8
 4663              		.cfi_offset 14, -4
 4664 0002 86B0     		sub	sp, sp, #24
 4665              	.LCFI188:
 4666              		.cfi_def_cfa_offset 32
 4667 0004 00AF     		add	r7, sp, #0
 4668              	.LCFI189:
 4669              		.cfi_def_cfa_register 7
 4670 0006 F860     		str	r0, [r7, #12]
 4671 0008 B960     		str	r1, [r7, #8]
 4672 000a 7A60     		str	r2, [r7, #4]
 4673 000c FB70     		strb	r3, [r7, #3]
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4674              		.loc 1 3416 0
 4675 000e FB68     		ldr	r3, [r7, #12]
 4676 0010 002B     		cmp	r3, #0
 4677 0012 02D1     		bne	.L306
 4678              		.loc 1 3416 0 is_stmt 0 discriminator 1
 4679 0014 274B     		ldr	r3, .L315
 4680 0016 1B68     		ldr	r3, [r3]
 4681 0018 00E0     		b	.L307
 4682              	.L306:
ARM GAS  /tmp/cciF1PDz.s 			page 147


 4683              		.loc 1 3416 0 discriminator 2
 4684 001a FB68     		ldr	r3, [r7, #12]
 4685              	.L307:
 4686              		.loc 1 3416 0 discriminator 4
 4687 001c 7B61     		str	r3, [r7, #20]
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4688              		.loc 1 3418 0 is_stmt 1 discriminator 4
 4689 001e BB68     		ldr	r3, [r7, #8]
 4690 0020 7A69     		ldr	r2, [r7, #20]
 4691 0022 1A60     		str	r2, [r3]
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4692              		.loc 1 3419 0 discriminator 4
 4693 0024 7B69     		ldr	r3, [r7, #20]
 4694 0026 03F13402 		add	r2, r3, #52
 4695 002a BB68     		ldr	r3, [r7, #8]
 4696 002c 5A60     		str	r2, [r3, #4]
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4697              		.loc 1 3420 0 discriminator 4
 4698 002e 7B69     		ldr	r3, [r7, #20]
 4699 0030 DA6A     		ldr	r2, [r3, #44]
 4700 0032 BB68     		ldr	r3, [r7, #8]
 4701 0034 1A61     		str	r2, [r3, #16]
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4702              		.loc 1 3421 0 discriminator 4
 4703 0036 7B69     		ldr	r3, [r7, #20]
 4704 0038 1A6B     		ldr	r2, [r3, #48]
 4705 003a BB68     		ldr	r3, [r7, #8]
 4706 003c DA61     		str	r2, [r3, #28]
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4707              		.loc 1 3422 0 discriminator 4
 4708 003e 7B69     		ldr	r3, [r7, #20]
 4709 0040 5A6C     		ldr	r2, [r3, #68]
 4710 0042 BB68     		ldr	r3, [r7, #8]
 4711 0044 9A60     		str	r2, [r3, #8]
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
 4712              		.loc 1 3429 0 discriminator 4
 4713 0046 BB68     		ldr	r3, [r7, #8]
 4714 0048 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4715 004a 032B     		cmp	r3, #3
 4716 004c 0AD1     		bne	.L308
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
 4717              		.loc 1 3431 0
 4718 004e FFF7FEFF 		bl	vTaskSuspendAll
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4719              		.loc 1 3433 0
 4720 0052 7B69     		ldr	r3, [r7, #20]
 4721 0054 9B6A     		ldr	r3, [r3, #40]
 4722 0056 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 148


 4723 0058 02D0     		beq	.L309
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
 4724              		.loc 1 3435 0
 4725 005a BB68     		ldr	r3, [r7, #8]
 4726 005c 0222     		movs	r2, #2
 4727 005e 1A73     		strb	r2, [r3, #12]
 4728              	.L309:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
 4729              		.loc 1 3438 0
 4730 0060 FFF7FEFF 		bl	xTaskResumeAll
 4731              	.L308:
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
 4732              		.loc 1 3449 0
 4733 0064 BB68     		ldr	r3, [r7, #8]
 4734 0066 0022     		movs	r2, #0
 4735 0068 5A61     		str	r2, [r3, #20]
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 4736              		.loc 1 3459 0
 4737 006a BB68     		ldr	r3, [r7, #8]
 4738 006c 0022     		movs	r2, #0
 4739 006e 9A61     		str	r2, [r3, #24]
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 4740              		.loc 1 3466 0
 4741 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4742 0072 052B     		cmp	r3, #5
 4743 0074 03D0     		beq	.L310
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
 4744              		.loc 1 3468 0
ARM GAS  /tmp/cciF1PDz.s 			page 149


 4745 0076 BB68     		ldr	r3, [r7, #8]
 4746 0078 FA78     		ldrb	r2, [r7, #3]
 4747 007a 1A73     		strb	r2, [r3, #12]
 4748 007c 06E0     		b	.L311
 4749              	.L310:
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 4750              		.loc 1 3472 0
 4751 007e F868     		ldr	r0, [r7, #12]
 4752 0080 FFF7FEFF 		bl	eTaskGetState
 4753 0084 0346     		mov	r3, r0
 4754 0086 1A46     		mov	r2, r3
 4755 0088 BB68     		ldr	r3, [r7, #8]
 4756 008a 1A73     		strb	r2, [r3, #12]
 4757              	.L311:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 4758              		.loc 1 3477 0
 4759 008c 7B68     		ldr	r3, [r7, #4]
 4760 008e 002B     		cmp	r3, #0
 4761 0090 09D0     		beq	.L312
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 4762              		.loc 1 3485 0
 4763 0092 7B69     		ldr	r3, [r7, #20]
 4764 0094 1B6B     		ldr	r3, [r3, #48]
 4765 0096 1846     		mov	r0, r3
 4766 0098 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4767 009c 0346     		mov	r3, r0
 4768 009e 1A46     		mov	r2, r3
 4769 00a0 BB68     		ldr	r3, [r7, #8]
 4770 00a2 1A84     		strh	r2, [r3, #32]	@ movhi
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4771              		.loc 1 3493 0
 4772 00a4 02E0     		b	.L314
 4773              	.L312:
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4774              		.loc 1 3491 0
 4775 00a6 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cciF1PDz.s 			page 150


 4776 00a8 0022     		movs	r2, #0
 4777 00aa 1A84     		strh	r2, [r3, #32]	@ movhi
 4778              	.L314:
 4779              		.loc 1 3493 0
 4780 00ac 00BF     		nop
 4781 00ae 1837     		adds	r7, r7, #24
 4782              	.LCFI190:
 4783              		.cfi_def_cfa_offset 8
 4784 00b0 BD46     		mov	sp, r7
 4785              	.LCFI191:
 4786              		.cfi_def_cfa_register 13
 4787              		@ sp needed
 4788 00b2 80BD     		pop	{r7, pc}
 4789              	.L316:
 4790              		.align	2
 4791              	.L315:
 4792 00b4 00000000 		.word	pxCurrentTCB
 4793              		.cfi_endproc
 4794              	.LFE42:
 4796              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4797              		.align	1
 4798              		.syntax unified
 4799              		.thumb
 4800              		.thumb_func
 4801              		.fpu fpv4-sp-d16
 4803              	prvListTasksWithinSingleList:
 4804              	.LFB43:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4805              		.loc 1 3501 0
 4806              		.cfi_startproc
 4807              		@ args = 0, pretend = 0, frame = 40
 4808              		@ frame_needed = 1, uses_anonymous_args = 0
 4809 0000 80B5     		push	{r7, lr}
 4810              	.LCFI192:
 4811              		.cfi_def_cfa_offset 8
 4812              		.cfi_offset 7, -8
 4813              		.cfi_offset 14, -4
 4814 0002 8AB0     		sub	sp, sp, #40
 4815              	.LCFI193:
 4816              		.cfi_def_cfa_offset 48
 4817 0004 00AF     		add	r7, sp, #0
 4818              	.LCFI194:
 4819              		.cfi_def_cfa_register 7
 4820 0006 F860     		str	r0, [r7, #12]
 4821 0008 B960     		str	r1, [r7, #8]
 4822 000a 1346     		mov	r3, r2
 4823 000c FB71     		strb	r3, [r7, #7]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 4824              		.loc 1 3503 0
ARM GAS  /tmp/cciF1PDz.s 			page 151


 4825 000e 0023     		movs	r3, #0
 4826 0010 7B62     		str	r3, [r7, #36]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4827              		.loc 1 3505 0
 4828 0012 BB68     		ldr	r3, [r7, #8]
 4829 0014 1B68     		ldr	r3, [r3]
 4830 0016 002B     		cmp	r3, #0
 4831 0018 3FD0     		beq	.L318
 4832              	.LBB171:
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4833              		.loc 1 3507 0
 4834 001a BB68     		ldr	r3, [r7, #8]
 4835 001c 3B62     		str	r3, [r7, #32]
 4836 001e 3B6A     		ldr	r3, [r7, #32]
 4837 0020 5B68     		ldr	r3, [r3, #4]
 4838 0022 5A68     		ldr	r2, [r3, #4]
 4839 0024 3B6A     		ldr	r3, [r7, #32]
 4840 0026 5A60     		str	r2, [r3, #4]
 4841 0028 3B6A     		ldr	r3, [r7, #32]
 4842 002a 5A68     		ldr	r2, [r3, #4]
 4843 002c 3B6A     		ldr	r3, [r7, #32]
 4844 002e 0833     		adds	r3, r3, #8
 4845 0030 9A42     		cmp	r2, r3
 4846 0032 04D1     		bne	.L319
 4847              		.loc 1 3507 0 is_stmt 0 discriminator 1
 4848 0034 3B6A     		ldr	r3, [r7, #32]
 4849 0036 5B68     		ldr	r3, [r3, #4]
 4850 0038 5A68     		ldr	r2, [r3, #4]
 4851 003a 3B6A     		ldr	r3, [r7, #32]
 4852 003c 5A60     		str	r2, [r3, #4]
 4853              	.L319:
 4854              		.loc 1 3507 0 discriminator 3
 4855 003e 3B6A     		ldr	r3, [r7, #32]
 4856 0040 5B68     		ldr	r3, [r3, #4]
 4857 0042 DB68     		ldr	r3, [r3, #12]
 4858 0044 FB61     		str	r3, [r7, #28]
 4859              	.L321:
 4860              	.LBE171:
 4861              	.LBB172:
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4862              		.loc 1 3515 0 is_stmt 1
 4863 0046 BB68     		ldr	r3, [r7, #8]
 4864 0048 BB61     		str	r3, [r7, #24]
 4865 004a BB69     		ldr	r3, [r7, #24]
 4866 004c 5B68     		ldr	r3, [r3, #4]
 4867 004e 5A68     		ldr	r2, [r3, #4]
 4868 0050 BB69     		ldr	r3, [r7, #24]
 4869 0052 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 152


 4870 0054 BB69     		ldr	r3, [r7, #24]
 4871 0056 5A68     		ldr	r2, [r3, #4]
 4872 0058 BB69     		ldr	r3, [r7, #24]
 4873 005a 0833     		adds	r3, r3, #8
 4874 005c 9A42     		cmp	r2, r3
 4875 005e 04D1     		bne	.L320
 4876              		.loc 1 3515 0 is_stmt 0 discriminator 1
 4877 0060 BB69     		ldr	r3, [r7, #24]
 4878 0062 5B68     		ldr	r3, [r3, #4]
 4879 0064 5A68     		ldr	r2, [r3, #4]
 4880 0066 BB69     		ldr	r3, [r7, #24]
 4881 0068 5A60     		str	r2, [r3, #4]
 4882              	.L320:
 4883              		.loc 1 3515 0 discriminator 3
 4884 006a BB69     		ldr	r3, [r7, #24]
 4885 006c 5B68     		ldr	r3, [r3, #4]
 4886 006e DB68     		ldr	r3, [r3, #12]
 4887 0070 7B61     		str	r3, [r7, #20]
 4888              	.LBE172:
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4889              		.loc 1 3516 0 is_stmt 1 discriminator 3
 4890 0072 7A6A     		ldr	r2, [r7, #36]
 4891 0074 1346     		mov	r3, r2
 4892 0076 DB00     		lsls	r3, r3, #3
 4893 0078 1344     		add	r3, r3, r2
 4894 007a 9B00     		lsls	r3, r3, #2
 4895 007c 1A46     		mov	r2, r3
 4896 007e FB68     		ldr	r3, [r7, #12]
 4897 0080 9918     		adds	r1, r3, r2
 4898 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4899 0084 0122     		movs	r2, #1
 4900 0086 7869     		ldr	r0, [r7, #20]
 4901 0088 FFF7FEFF 		bl	vTaskGetInfo
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4902              		.loc 1 3517 0 discriminator 3
 4903 008c 7B6A     		ldr	r3, [r7, #36]
 4904 008e 0133     		adds	r3, r3, #1
 4905 0090 7B62     		str	r3, [r7, #36]
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4906              		.loc 1 3518 0 discriminator 3
 4907 0092 7A69     		ldr	r2, [r7, #20]
 4908 0094 FB69     		ldr	r3, [r7, #28]
 4909 0096 9A42     		cmp	r2, r3
 4910 0098 D5D1     		bne	.L321
 4911              	.L318:
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 4912              		.loc 1 3525 0
 4913 009a 7B6A     		ldr	r3, [r7, #36]
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4914              		.loc 1 3526 0
 4915 009c 1846     		mov	r0, r3
ARM GAS  /tmp/cciF1PDz.s 			page 153


 4916 009e 2837     		adds	r7, r7, #40
 4917              	.LCFI195:
 4918              		.cfi_def_cfa_offset 8
 4919 00a0 BD46     		mov	sp, r7
 4920              	.LCFI196:
 4921              		.cfi_def_cfa_register 13
 4922              		@ sp needed
 4923 00a2 80BD     		pop	{r7, pc}
 4924              		.cfi_endproc
 4925              	.LFE43:
 4927              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4928              		.align	1
 4929              		.syntax unified
 4930              		.thumb
 4931              		.thumb_func
 4932              		.fpu fpv4-sp-d16
 4934              	prvTaskCheckFreeStackSpace:
 4935              	.LFB44:
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4936              		.loc 1 3534 0
 4937              		.cfi_startproc
 4938              		@ args = 0, pretend = 0, frame = 16
 4939              		@ frame_needed = 1, uses_anonymous_args = 0
 4940              		@ link register save eliminated.
 4941 0000 80B4     		push	{r7}
 4942              	.LCFI197:
 4943              		.cfi_def_cfa_offset 4
 4944              		.cfi_offset 7, -4
 4945 0002 85B0     		sub	sp, sp, #20
 4946              	.LCFI198:
 4947              		.cfi_def_cfa_offset 24
 4948 0004 00AF     		add	r7, sp, #0
 4949              	.LCFI199:
 4950              		.cfi_def_cfa_register 7
 4951 0006 7860     		str	r0, [r7, #4]
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 4952              		.loc 1 3535 0
 4953 0008 0023     		movs	r3, #0
 4954 000a FB60     		str	r3, [r7, #12]
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4955              		.loc 1 3537 0
 4956 000c 05E0     		b	.L324
 4957              	.L325:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4958              		.loc 1 3539 0
 4959 000e 7B68     		ldr	r3, [r7, #4]
 4960 0010 0133     		adds	r3, r3, #1
 4961 0012 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cciF1PDz.s 			page 154


3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 4962              		.loc 1 3540 0
 4963 0014 FB68     		ldr	r3, [r7, #12]
 4964 0016 0133     		adds	r3, r3, #1
 4965 0018 FB60     		str	r3, [r7, #12]
 4966              	.L324:
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4967              		.loc 1 3537 0
 4968 001a 7B68     		ldr	r3, [r7, #4]
 4969 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4970 001e A52B     		cmp	r3, #165
 4971 0020 F5D0     		beq	.L325
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4972              		.loc 1 3543 0
 4973 0022 FB68     		ldr	r3, [r7, #12]
 4974 0024 9B08     		lsrs	r3, r3, #2
 4975 0026 FB60     		str	r3, [r7, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 4976              		.loc 1 3545 0
 4977 0028 FB68     		ldr	r3, [r7, #12]
 4978 002a 9BB2     		uxth	r3, r3
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4979              		.loc 1 3546 0
 4980 002c 1846     		mov	r0, r3
 4981 002e 1437     		adds	r7, r7, #20
 4982              	.LCFI200:
 4983              		.cfi_def_cfa_offset 4
 4984 0030 BD46     		mov	sp, r7
 4985              	.LCFI201:
 4986              		.cfi_def_cfa_register 13
 4987              		@ sp needed
 4988 0032 5DF8047B 		ldr	r7, [sp], #4
 4989              	.LCFI202:
 4990              		.cfi_restore 7
 4991              		.cfi_def_cfa_offset 0
 4992 0036 7047     		bx	lr
 4993              		.cfi_endproc
 4994              	.LFE44:
 4996              		.section	.text.prvDeleteTCB,"ax",%progbits
 4997              		.align	1
 4998              		.syntax unified
 4999              		.thumb
 5000              		.thumb_func
 5001              		.fpu fpv4-sp-d16
 5003              	prvDeleteTCB:
 5004              	.LFB45:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cciF1PDz.s 			page 155


3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5005              		.loc 1 3582 0
 5006              		.cfi_startproc
 5007              		@ args = 0, pretend = 0, frame = 8
 5008              		@ frame_needed = 1, uses_anonymous_args = 0
 5009 0000 80B5     		push	{r7, lr}
 5010              	.LCFI203:
 5011              		.cfi_def_cfa_offset 8
 5012              		.cfi_offset 7, -8
 5013              		.cfi_offset 14, -4
 5014 0002 82B0     		sub	sp, sp, #8
 5015              	.LCFI204:
 5016              		.cfi_def_cfa_offset 16
 5017 0004 00AF     		add	r7, sp, #0
 5018              	.LCFI205:
 5019              		.cfi_def_cfa_register 7
 5020 0006 7860     		str	r0, [r7, #4]
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 156


3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 5021              		.loc 1 3600 0
 5022 0008 7B68     		ldr	r3, [r7, #4]
 5023 000a 1B6B     		ldr	r3, [r3, #48]
 5024 000c 1846     		mov	r0, r3
 5025 000e FFF7FEFF 		bl	vPortFree
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 5026              		.loc 1 3601 0
 5027 0012 7868     		ldr	r0, [r7, #4]
 5028 0014 FFF7FEFF 		bl	vPortFree
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5029              		.loc 1 3630 0
 5030 0018 00BF     		nop
 5031 001a 0837     		adds	r7, r7, #8
 5032              	.LCFI206:
 5033              		.cfi_def_cfa_offset 8
 5034 001c BD46     		mov	sp, r7
 5035              	.LCFI207:
 5036              		.cfi_def_cfa_register 13
 5037              		@ sp needed
 5038 001e 80BD     		pop	{r7, pc}
 5039              		.cfi_endproc
 5040              	.LFE45:
 5042              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5043              		.align	1
ARM GAS  /tmp/cciF1PDz.s 			page 157


 5044              		.syntax unified
 5045              		.thumb
 5046              		.thumb_func
 5047              		.fpu fpv4-sp-d16
 5049              	prvResetNextTaskUnblockTime:
 5050              	.LFB46:
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5051              		.loc 1 3636 0
 5052              		.cfi_startproc
 5053              		@ args = 0, pretend = 0, frame = 8
 5054              		@ frame_needed = 1, uses_anonymous_args = 0
 5055              		@ link register save eliminated.
 5056 0000 80B4     		push	{r7}
 5057              	.LCFI208:
 5058              		.cfi_def_cfa_offset 4
 5059              		.cfi_offset 7, -4
 5060 0002 83B0     		sub	sp, sp, #12
 5061              	.LCFI209:
 5062              		.cfi_def_cfa_offset 16
 5063 0004 00AF     		add	r7, sp, #0
 5064              	.LCFI210:
 5065              		.cfi_def_cfa_register 7
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5066              		.loc 1 3639 0
 5067 0006 0F4B     		ldr	r3, .L334
 5068 0008 1B68     		ldr	r3, [r3]
 5069 000a 1B68     		ldr	r3, [r3]
 5070 000c 002B     		cmp	r3, #0
 5071 000e 01D1     		bne	.L329
 5072              		.loc 1 3639 0 is_stmt 0 discriminator 1
 5073 0010 0123     		movs	r3, #1
 5074 0012 00E0     		b	.L330
 5075              	.L329:
 5076              		.loc 1 3639 0 discriminator 2
 5077 0014 0023     		movs	r3, #0
 5078              	.L330:
 5079              		.loc 1 3639 0 discriminator 4
 5080 0016 002B     		cmp	r3, #0
 5081 0018 04D0     		beq	.L331
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5082              		.loc 1 3645 0 is_stmt 1
 5083 001a 0B4B     		ldr	r3, .L334+4
 5084 001c 4FF0FF32 		mov	r2, #-1
 5085 0020 1A60     		str	r2, [r3]
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cciF1PDz.s 			page 158


3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5086              		.loc 1 3656 0
 5087 0022 08E0     		b	.L333
 5088              	.L331:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5089              		.loc 1 3653 0
 5090 0024 074B     		ldr	r3, .L334
 5091 0026 1B68     		ldr	r3, [r3]
 5092 0028 DB68     		ldr	r3, [r3, #12]
 5093 002a DB68     		ldr	r3, [r3, #12]
 5094 002c 7B60     		str	r3, [r7, #4]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5095              		.loc 1 3654 0
 5096 002e 7B68     		ldr	r3, [r7, #4]
 5097 0030 5B68     		ldr	r3, [r3, #4]
 5098 0032 054A     		ldr	r2, .L334+4
 5099 0034 1360     		str	r3, [r2]
 5100              	.L333:
 5101              		.loc 1 3656 0
 5102 0036 00BF     		nop
 5103 0038 0C37     		adds	r7, r7, #12
 5104              	.LCFI211:
 5105              		.cfi_def_cfa_offset 4
 5106 003a BD46     		mov	sp, r7
 5107              	.LCFI212:
 5108              		.cfi_def_cfa_register 13
 5109              		@ sp needed
 5110 003c 5DF8047B 		ldr	r7, [sp], #4
 5111              	.LCFI213:
 5112              		.cfi_restore 7
 5113              		.cfi_def_cfa_offset 0
 5114 0040 7047     		bx	lr
 5115              	.L335:
 5116 0042 00BF     		.align	2
 5117              	.L334:
 5118 0044 00000000 		.word	pxDelayedTaskList
 5119 0048 00000000 		.word	xNextTaskUnblockTime
 5120              		.cfi_endproc
 5121              	.LFE46:
 5123              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5124              		.align	1
 5125              		.global	xTaskGetSchedulerState
 5126              		.syntax unified
 5127              		.thumb
 5128              		.thumb_func
 5129              		.fpu fpv4-sp-d16
 5131              	xTaskGetSchedulerState:
 5132              	.LFB47:
ARM GAS  /tmp/cciF1PDz.s 			page 159


3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5133              		.loc 1 3679 0
 5134              		.cfi_startproc
 5135              		@ args = 0, pretend = 0, frame = 8
 5136              		@ frame_needed = 1, uses_anonymous_args = 0
 5137              		@ link register save eliminated.
 5138 0000 80B4     		push	{r7}
 5139              	.LCFI214:
 5140              		.cfi_def_cfa_offset 4
 5141              		.cfi_offset 7, -4
 5142 0002 83B0     		sub	sp, sp, #12
 5143              	.LCFI215:
 5144              		.cfi_def_cfa_offset 16
 5145 0004 00AF     		add	r7, sp, #0
 5146              	.LCFI216:
 5147              		.cfi_def_cfa_register 7
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5148              		.loc 1 3682 0
 5149 0006 0B4B     		ldr	r3, .L341
 5150 0008 1B68     		ldr	r3, [r3]
 5151 000a 002B     		cmp	r3, #0
 5152 000c 02D1     		bne	.L337
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5153              		.loc 1 3684 0
 5154 000e 0123     		movs	r3, #1
 5155 0010 7B60     		str	r3, [r7, #4]
 5156 0012 08E0     		b	.L338
 5157              	.L337:
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /tmp/cciF1PDz.s 			page 160


 5158              		.loc 1 3688 0
 5159 0014 084B     		ldr	r3, .L341+4
 5160 0016 1B68     		ldr	r3, [r3]
 5161 0018 002B     		cmp	r3, #0
 5162 001a 02D1     		bne	.L339
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5163              		.loc 1 3690 0
 5164 001c 0223     		movs	r3, #2
 5165 001e 7B60     		str	r3, [r7, #4]
 5166 0020 01E0     		b	.L338
 5167              	.L339:
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5168              		.loc 1 3694 0
 5169 0022 0023     		movs	r3, #0
 5170 0024 7B60     		str	r3, [r7, #4]
 5171              	.L338:
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5172              		.loc 1 3698 0
 5173 0026 7B68     		ldr	r3, [r7, #4]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5174              		.loc 1 3699 0
 5175 0028 1846     		mov	r0, r3
 5176 002a 0C37     		adds	r7, r7, #12
 5177              	.LCFI217:
 5178              		.cfi_def_cfa_offset 4
 5179 002c BD46     		mov	sp, r7
 5180              	.LCFI218:
 5181              		.cfi_def_cfa_register 13
 5182              		@ sp needed
 5183 002e 5DF8047B 		ldr	r7, [sp], #4
 5184              	.LCFI219:
 5185              		.cfi_restore 7
 5186              		.cfi_def_cfa_offset 0
 5187 0032 7047     		bx	lr
 5188              	.L342:
 5189              		.align	2
 5190              	.L341:
 5191 0034 00000000 		.word	xSchedulerRunning
 5192 0038 00000000 		.word	uxSchedulerSuspended
 5193              		.cfi_endproc
 5194              	.LFE47:
 5196              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5197              		.align	1
 5198              		.global	uxTaskResetEventItemValue
 5199              		.syntax unified
 5200              		.thumb
 5201              		.thumb_func
 5202              		.fpu fpv4-sp-d16
 5204              	uxTaskResetEventItemValue:
 5205              	.LFB48:
ARM GAS  /tmp/cciF1PDz.s 			page 161


3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/cciF1PDz.s 			page 162


3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 163


3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cciF1PDz.s 			page 164


3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
ARM GAS  /tmp/cciF1PDz.s 			page 165


3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 166


3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
ARM GAS  /tmp/cciF1PDz.s 			page 167


4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
ARM GAS  /tmp/cciF1PDz.s 			page 168


4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cciF1PDz.s 			page 169


4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5206              		.loc 1 4163 0
 5207              		.cfi_startproc
 5208              		@ args = 0, pretend = 0, frame = 8
 5209              		@ frame_needed = 1, uses_anonymous_args = 0
 5210              		@ link register save eliminated.
 5211 0000 80B4     		push	{r7}
 5212              	.LCFI220:
 5213              		.cfi_def_cfa_offset 4
 5214              		.cfi_offset 7, -4
 5215 0002 83B0     		sub	sp, sp, #12
 5216              	.LCFI221:
 5217              		.cfi_def_cfa_offset 16
 5218 0004 00AF     		add	r7, sp, #0
 5219              	.LCFI222:
 5220              		.cfi_def_cfa_register 7
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5221              		.loc 1 4166 0
 5222 0006 094B     		ldr	r3, .L345
 5223 0008 1B68     		ldr	r3, [r3]
 5224 000a 9B69     		ldr	r3, [r3, #24]
 5225 000c 7B60     		str	r3, [r7, #4]
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5226              		.loc 1 4170 0
 5227 000e 074B     		ldr	r3, .L345
 5228 0010 1B68     		ldr	r3, [r3]
 5229 0012 064A     		ldr	r2, .L345
 5230 0014 1268     		ldr	r2, [r2]
 5231 0016 D26A     		ldr	r2, [r2, #44]
 5232 0018 C2F10702 		rsb	r2, r2, #7
 5233 001c 9A61     		str	r2, [r3, #24]
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5234              		.loc 1 4172 0
 5235 001e 7B68     		ldr	r3, [r7, #4]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5236              		.loc 1 4173 0
 5237 0020 1846     		mov	r0, r3
 5238 0022 0C37     		adds	r7, r7, #12
 5239              	.LCFI223:
 5240              		.cfi_def_cfa_offset 4
 5241 0024 BD46     		mov	sp, r7
 5242              	.LCFI224:
 5243              		.cfi_def_cfa_register 13
 5244              		@ sp needed
ARM GAS  /tmp/cciF1PDz.s 			page 170


 5245 0026 5DF8047B 		ldr	r7, [sp], #4
 5246              	.LCFI225:
 5247              		.cfi_restore 7
 5248              		.cfi_def_cfa_offset 0
 5249 002a 7047     		bx	lr
 5250              	.L346:
 5251              		.align	2
 5252              	.L345:
 5253 002c 00000000 		.word	pxCurrentTCB
 5254              		.cfi_endproc
 5255              	.LFE48:
 5257              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5258              		.align	1
 5259              		.global	ulTaskNotifyTake
 5260              		.syntax unified
 5261              		.thumb
 5262              		.thumb_func
 5263              		.fpu fpv4-sp-d16
 5265              	ulTaskNotifyTake:
 5266              	.LFB49:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5267              		.loc 1 4196 0
 5268              		.cfi_startproc
 5269              		@ args = 0, pretend = 0, frame = 16
 5270              		@ frame_needed = 1, uses_anonymous_args = 0
 5271 0000 80B5     		push	{r7, lr}
 5272              	.LCFI226:
 5273              		.cfi_def_cfa_offset 8
 5274              		.cfi_offset 7, -8
 5275              		.cfi_offset 14, -4
 5276 0002 84B0     		sub	sp, sp, #16
 5277              	.LCFI227:
 5278              		.cfi_def_cfa_offset 24
 5279 0004 00AF     		add	r7, sp, #0
 5280              	.LCFI228:
ARM GAS  /tmp/cciF1PDz.s 			page 171


 5281              		.cfi_def_cfa_register 7
 5282 0006 7860     		str	r0, [r7, #4]
 5283 0008 3960     		str	r1, [r7]
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5284              		.loc 1 4199 0
 5285 000a FFF7FEFF 		bl	vPortEnterCritical
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5286              		.loc 1 4202 0
 5287 000e 1E4B     		ldr	r3, .L353
 5288 0010 1B68     		ldr	r3, [r3]
 5289 0012 DB6C     		ldr	r3, [r3, #76]
 5290 0014 002B     		cmp	r3, #0
 5291 0016 13D1     		bne	.L348
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5292              		.loc 1 4205 0
 5293 0018 1B4B     		ldr	r3, .L353
 5294 001a 1B68     		ldr	r3, [r3]
 5295 001c 0122     		movs	r2, #1
 5296 001e 83F85020 		strb	r2, [r3, #80]
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5297              		.loc 1 4207 0
 5298 0022 3B68     		ldr	r3, [r7]
 5299 0024 002B     		cmp	r3, #0
 5300 0026 0BD0     		beq	.L348
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5301              		.loc 1 4209 0
 5302 0028 0121     		movs	r1, #1
 5303 002a 3868     		ldr	r0, [r7]
 5304 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5305              		.loc 1 4216 0
 5306 0030 164B     		ldr	r3, .L353+4
 5307 0032 4FF08052 		mov	r2, #268435456
 5308 0036 1A60     		str	r2, [r3]
 5309              		.syntax unified
 5310              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5311 0038 BFF34F8F 		dsb
 5312              	@ 0 "" 2
 5313              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5314 003c BFF36F8F 		isb
 5315              	@ 0 "" 2
 5316              		.thumb
 5317              		.syntax unified
ARM GAS  /tmp/cciF1PDz.s 			page 172


 5318              	.L348:
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5319              		.loc 1 4228 0
 5320 0040 FFF7FEFF 		bl	vPortExitCritical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5321              		.loc 1 4230 0
 5322 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5323              		.loc 1 4233 0
 5324 0048 0F4B     		ldr	r3, .L353
 5325 004a 1B68     		ldr	r3, [r3]
 5326 004c DB6C     		ldr	r3, [r3, #76]
 5327 004e FB60     		str	r3, [r7, #12]
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5328              		.loc 1 4235 0
 5329 0050 FB68     		ldr	r3, [r7, #12]
 5330 0052 002B     		cmp	r3, #0
 5331 0054 0CD0     		beq	.L349
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5332              		.loc 1 4237 0
 5333 0056 7B68     		ldr	r3, [r7, #4]
 5334 0058 002B     		cmp	r3, #0
 5335 005a 04D0     		beq	.L350
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5336              		.loc 1 4239 0
 5337 005c 0A4B     		ldr	r3, .L353
 5338 005e 1B68     		ldr	r3, [r3]
 5339 0060 0022     		movs	r2, #0
 5340 0062 DA64     		str	r2, [r3, #76]
 5341 0064 04E0     		b	.L349
 5342              	.L350:
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 5343              		.loc 1 4243 0
 5344 0066 084B     		ldr	r3, .L353
 5345 0068 1B68     		ldr	r3, [r3]
 5346 006a FA68     		ldr	r2, [r7, #12]
 5347 006c 013A     		subs	r2, r2, #1
ARM GAS  /tmp/cciF1PDz.s 			page 173


 5348 006e DA64     		str	r2, [r3, #76]
 5349              	.L349:
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5350              		.loc 1 4251 0
 5351 0070 054B     		ldr	r3, .L353
 5352 0072 1B68     		ldr	r3, [r3]
 5353 0074 0022     		movs	r2, #0
 5354 0076 83F85020 		strb	r2, [r3, #80]
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5355              		.loc 1 4253 0
 5356 007a FFF7FEFF 		bl	vPortExitCritical
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5357              		.loc 1 4255 0
 5358 007e FB68     		ldr	r3, [r7, #12]
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5359              		.loc 1 4256 0
 5360 0080 1846     		mov	r0, r3
 5361 0082 1037     		adds	r7, r7, #16
 5362              	.LCFI229:
 5363              		.cfi_def_cfa_offset 8
 5364 0084 BD46     		mov	sp, r7
 5365              	.LCFI230:
 5366              		.cfi_def_cfa_register 13
 5367              		@ sp needed
 5368 0086 80BD     		pop	{r7, pc}
 5369              	.L354:
 5370              		.align	2
 5371              	.L353:
 5372 0088 00000000 		.word	pxCurrentTCB
 5373 008c 04ED00E0 		.word	-536810236
 5374              		.cfi_endproc
 5375              	.LFE49:
 5377              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5378              		.align	1
 5379              		.global	xTaskNotifyWait
 5380              		.syntax unified
 5381              		.thumb
 5382              		.thumb_func
 5383              		.fpu fpv4-sp-d16
 5385              	xTaskNotifyWait:
 5386              	.LFB50:
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
ARM GAS  /tmp/cciF1PDz.s 			page 174


4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5387              		.loc 1 4264 0
 5388              		.cfi_startproc
 5389              		@ args = 0, pretend = 0, frame = 24
 5390              		@ frame_needed = 1, uses_anonymous_args = 0
 5391 0000 80B5     		push	{r7, lr}
 5392              	.LCFI231:
 5393              		.cfi_def_cfa_offset 8
 5394              		.cfi_offset 7, -8
 5395              		.cfi_offset 14, -4
 5396 0002 86B0     		sub	sp, sp, #24
 5397              	.LCFI232:
 5398              		.cfi_def_cfa_offset 32
 5399 0004 00AF     		add	r7, sp, #0
 5400              	.LCFI233:
 5401              		.cfi_def_cfa_register 7
 5402 0006 F860     		str	r0, [r7, #12]
 5403 0008 B960     		str	r1, [r7, #8]
 5404 000a 7A60     		str	r2, [r7, #4]
 5405 000c 3B60     		str	r3, [r7]
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5406              		.loc 1 4267 0
 5407 000e FFF7FEFF 		bl	vPortEnterCritical
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5408              		.loc 1 4270 0
 5409 0012 264B     		ldr	r3, .L361
 5410 0014 1B68     		ldr	r3, [r3]
 5411 0016 93F85030 		ldrb	r3, [r3, #80]
 5412 001a DBB2     		uxtb	r3, r3
 5413 001c 022B     		cmp	r3, #2
 5414 001e 1AD0     		beq	.L356
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5415              		.loc 1 4275 0
 5416 0020 224B     		ldr	r3, .L361
 5417 0022 1B68     		ldr	r3, [r3]
 5418 0024 D96C     		ldr	r1, [r3, #76]
 5419 0026 FA68     		ldr	r2, [r7, #12]
 5420 0028 D243     		mvns	r2, r2
 5421 002a 0A40     		ands	r2, r2, r1
 5422 002c DA64     		str	r2, [r3, #76]
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5423              		.loc 1 4278 0
 5424 002e 1F4B     		ldr	r3, .L361
 5425 0030 1B68     		ldr	r3, [r3]
 5426 0032 0122     		movs	r2, #1
 5427 0034 83F85020 		strb	r2, [r3, #80]
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 175


4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5428              		.loc 1 4280 0
 5429 0038 3B68     		ldr	r3, [r7]
 5430 003a 002B     		cmp	r3, #0
 5431 003c 0BD0     		beq	.L356
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5432              		.loc 1 4282 0
 5433 003e 0121     		movs	r1, #1
 5434 0040 3868     		ldr	r0, [r7]
 5435 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5436              		.loc 1 4289 0
 5437 0046 1A4B     		ldr	r3, .L361+4
 5438 0048 4FF08052 		mov	r2, #268435456
 5439 004c 1A60     		str	r2, [r3]
 5440              		.syntax unified
 5441              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5442 004e BFF34F8F 		dsb
 5443              	@ 0 "" 2
 5444              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5445 0052 BFF36F8F 		isb
 5446              	@ 0 "" 2
 5447              		.thumb
 5448              		.syntax unified
 5449              	.L356:
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5450              		.loc 1 4301 0
 5451 0056 FFF7FEFF 		bl	vPortExitCritical
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5452              		.loc 1 4303 0
 5453 005a FFF7FEFF 		bl	vPortEnterCritical
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5454              		.loc 1 4307 0
 5455 005e 7B68     		ldr	r3, [r7, #4]
 5456 0060 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 176


 5457 0062 04D0     		beq	.L357
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5458              		.loc 1 4311 0
 5459 0064 114B     		ldr	r3, .L361
 5460 0066 1B68     		ldr	r3, [r3]
 5461 0068 DA6C     		ldr	r2, [r3, #76]
 5462 006a 7B68     		ldr	r3, [r7, #4]
 5463 006c 1A60     		str	r2, [r3]
 5464              	.L357:
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5465              		.loc 1 4318 0
 5466 006e 0F4B     		ldr	r3, .L361
 5467 0070 1B68     		ldr	r3, [r3]
 5468 0072 93F85030 		ldrb	r3, [r3, #80]
 5469 0076 DBB2     		uxtb	r3, r3
 5470 0078 012B     		cmp	r3, #1
 5471 007a 02D1     		bne	.L358
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5472              		.loc 1 4321 0
 5473 007c 0023     		movs	r3, #0
 5474 007e 7B61     		str	r3, [r7, #20]
 5475 0080 08E0     		b	.L359
 5476              	.L358:
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5477              		.loc 1 4327 0
 5478 0082 0A4B     		ldr	r3, .L361
 5479 0084 1B68     		ldr	r3, [r3]
 5480 0086 D96C     		ldr	r1, [r3, #76]
 5481 0088 BA68     		ldr	r2, [r7, #8]
 5482 008a D243     		mvns	r2, r2
 5483 008c 0A40     		ands	r2, r2, r1
 5484 008e DA64     		str	r2, [r3, #76]
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5485              		.loc 1 4328 0
 5486 0090 0123     		movs	r3, #1
 5487 0092 7B61     		str	r3, [r7, #20]
 5488              	.L359:
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5489              		.loc 1 4331 0
ARM GAS  /tmp/cciF1PDz.s 			page 177


 5490 0094 054B     		ldr	r3, .L361
 5491 0096 1B68     		ldr	r3, [r3]
 5492 0098 0022     		movs	r2, #0
 5493 009a 83F85020 		strb	r2, [r3, #80]
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5494              		.loc 1 4333 0
 5495 009e FFF7FEFF 		bl	vPortExitCritical
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5496              		.loc 1 4335 0
 5497 00a2 7B69     		ldr	r3, [r7, #20]
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5498              		.loc 1 4336 0
 5499 00a4 1846     		mov	r0, r3
 5500 00a6 1837     		adds	r7, r7, #24
 5501              	.LCFI234:
 5502              		.cfi_def_cfa_offset 8
 5503 00a8 BD46     		mov	sp, r7
 5504              	.LCFI235:
 5505              		.cfi_def_cfa_register 13
 5506              		@ sp needed
 5507 00aa 80BD     		pop	{r7, pc}
 5508              	.L362:
 5509              		.align	2
 5510              	.L361:
 5511 00ac 00000000 		.word	pxCurrentTCB
 5512 00b0 04ED00E0 		.word	-536810236
 5513              		.cfi_endproc
 5514              	.LFE50:
 5516              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5517              		.align	1
 5518              		.global	xTaskGenericNotify
 5519              		.syntax unified
 5520              		.thumb
 5521              		.thumb_func
 5522              		.fpu fpv4-sp-d16
 5524              	xTaskGenericNotify:
 5525              	.LFB51:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5526              		.loc 1 4344 0
 5527              		.cfi_startproc
 5528              		@ args = 0, pretend = 0, frame = 40
 5529              		@ frame_needed = 1, uses_anonymous_args = 0
 5530 0000 80B5     		push	{r7, lr}
 5531              	.LCFI236:
 5532              		.cfi_def_cfa_offset 8
 5533              		.cfi_offset 7, -8
 5534              		.cfi_offset 14, -4
 5535 0002 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/cciF1PDz.s 			page 178


 5536              	.LCFI237:
 5537              		.cfi_def_cfa_offset 48
 5538 0004 00AF     		add	r7, sp, #0
 5539              	.LCFI238:
 5540              		.cfi_def_cfa_register 7
 5541 0006 F860     		str	r0, [r7, #12]
 5542 0008 B960     		str	r1, [r7, #8]
 5543 000a 3B60     		str	r3, [r7]
 5544 000c 1346     		mov	r3, r2
 5545 000e FB71     		strb	r3, [r7, #7]
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5546              		.loc 1 4346 0
 5547 0010 0123     		movs	r3, #1
 5548 0012 7B62     		str	r3, [r7, #36]
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5549              		.loc 1 4349 0
 5550 0014 FB68     		ldr	r3, [r7, #12]
 5551 0016 002B     		cmp	r3, #0
 5552 0018 09D1     		bne	.L364
 5553              	.LBB173:
 5554              	.LBB174:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5555              		.loc 2 237 0 discriminator 1
 5556              		.syntax unified
 5557              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5558 001a 4FF05003 			mov r3, #80												
 5559 001e 83F31188 		msr basepri, r3											
 5560 0022 BFF36F8F 		isb														
 5561 0026 BFF34F8F 		dsb														
 5562              	
 5563              	@ 0 "" 2
 5564              		.thumb
 5565              		.syntax unified
 5566 002a BB61     		str	r3, [r7, #24]
 5567              	.L365:
 5568              	.LBE174:
 5569              	.LBE173:
 5570              		.loc 1 4349 0 discriminator 1
 5571 002c FEE7     		b	.L365
 5572              	.L364:
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5573              		.loc 1 4350 0
 5574 002e FB68     		ldr	r3, [r7, #12]
 5575 0030 3B62     		str	r3, [r7, #32]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5576              		.loc 1 4352 0
 5577 0032 FFF7FEFF 		bl	vPortEnterCritical
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5578              		.loc 1 4354 0
 5579 0036 3B68     		ldr	r3, [r7]
 5580 0038 002B     		cmp	r3, #0
 5581 003a 03D0     		beq	.L366
ARM GAS  /tmp/cciF1PDz.s 			page 179


4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5582              		.loc 1 4356 0
 5583 003c 3B6A     		ldr	r3, [r7, #32]
 5584 003e DA6C     		ldr	r2, [r3, #76]
 5585 0040 3B68     		ldr	r3, [r7]
 5586 0042 1A60     		str	r2, [r3]
 5587              	.L366:
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5588              		.loc 1 4359 0
 5589 0044 3B6A     		ldr	r3, [r7, #32]
 5590 0046 93F85030 		ldrb	r3, [r3, #80]
 5591 004a FB77     		strb	r3, [r7, #31]
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5592              		.loc 1 4361 0
 5593 004c 3B6A     		ldr	r3, [r7, #32]
 5594 004e 0222     		movs	r2, #2
 5595 0050 83F85020 		strb	r2, [r3, #80]
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5596              		.loc 1 4363 0
 5597 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5598 0056 042B     		cmp	r3, #4
 5599 0058 27D8     		bhi	.L367
 5600 005a 01A2     		adr	r2, .L369
 5601 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5602              		.p2align 2
 5603              	.L369:
 5604 0060 AB000000 		.word	.L367+1
 5605 0064 75000000 		.word	.L370+1
 5606 0068 83000000 		.word	.L371+1
 5607 006c 8F000000 		.word	.L372+1
 5608 0070 97000000 		.word	.L373+1
 5609              		.p2align 1
 5610              	.L370:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5611              		.loc 1 4366 0
 5612 0074 3B6A     		ldr	r3, [r7, #32]
 5613 0076 DA6C     		ldr	r2, [r3, #76]
 5614 0078 BB68     		ldr	r3, [r7, #8]
 5615 007a 1A43     		orrs	r2, r2, r3
 5616 007c 3B6A     		ldr	r3, [r7, #32]
 5617 007e DA64     		str	r2, [r3, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5618              		.loc 1 4367 0
 5619 0080 13E0     		b	.L367
 5620              	.L371:
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5621              		.loc 1 4370 0
 5622 0082 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/cciF1PDz.s 			page 180


 5623 0084 DB6C     		ldr	r3, [r3, #76]
 5624 0086 5A1C     		adds	r2, r3, #1
 5625 0088 3B6A     		ldr	r3, [r7, #32]
 5626 008a DA64     		str	r2, [r3, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5627              		.loc 1 4371 0
 5628 008c 0DE0     		b	.L367
 5629              	.L372:
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5630              		.loc 1 4374 0
 5631 008e 3B6A     		ldr	r3, [r7, #32]
 5632 0090 BA68     		ldr	r2, [r7, #8]
 5633 0092 DA64     		str	r2, [r3, #76]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5634              		.loc 1 4375 0
 5635 0094 09E0     		b	.L367
 5636              	.L373:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5637              		.loc 1 4378 0
 5638 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5639 0098 022B     		cmp	r3, #2
 5640 009a 03D0     		beq	.L374
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5641              		.loc 1 4380 0
 5642 009c 3B6A     		ldr	r3, [r7, #32]
 5643 009e BA68     		ldr	r2, [r7, #8]
 5644 00a0 DA64     		str	r2, [r3, #76]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5645              		.loc 1 4387 0
 5646 00a2 01E0     		b	.L380
 5647              	.L374:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5648              		.loc 1 4385 0
 5649 00a4 0023     		movs	r3, #0
 5650 00a6 7B62     		str	r3, [r7, #36]
 5651              	.L380:
 5652              		.loc 1 4387 0
 5653 00a8 00BF     		nop
 5654              	.L367:
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cciF1PDz.s 			page 181


4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5655              		.loc 1 4399 0
 5656 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5657 00ac 012B     		cmp	r3, #1
 5658 00ae 2BD1     		bne	.L376
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5659              		.loc 1 4401 0
 5660 00b0 3B6A     		ldr	r3, [r7, #32]
 5661 00b2 0433     		adds	r3, r3, #4
 5662 00b4 1846     		mov	r0, r3
 5663 00b6 FFF7FEFF 		bl	uxListRemove
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5664              		.loc 1 4402 0
 5665 00ba 3B6A     		ldr	r3, [r7, #32]
 5666 00bc DB6A     		ldr	r3, [r3, #44]
 5667 00be 0122     		movs	r2, #1
 5668 00c0 9A40     		lsls	r2, r2, r3
 5669 00c2 154B     		ldr	r3, .L381
 5670 00c4 1B68     		ldr	r3, [r3]
 5671 00c6 1343     		orrs	r3, r3, r2
 5672 00c8 134A     		ldr	r2, .L381
 5673 00ca 1360     		str	r3, [r2]
 5674 00cc 3B6A     		ldr	r3, [r7, #32]
 5675 00ce DA6A     		ldr	r2, [r3, #44]
 5676 00d0 1346     		mov	r3, r2
 5677 00d2 9B00     		lsls	r3, r3, #2
 5678 00d4 1344     		add	r3, r3, r2
 5679 00d6 9B00     		lsls	r3, r3, #2
 5680 00d8 104A     		ldr	r2, .L381+4
 5681 00da 1A44     		add	r2, r2, r3
 5682 00dc 3B6A     		ldr	r3, [r7, #32]
 5683 00de 0433     		adds	r3, r3, #4
 5684 00e0 1946     		mov	r1, r3
 5685 00e2 1046     		mov	r0, r2
 5686 00e4 FFF7FEFF 		bl	vListInsertEnd
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5687              		.loc 1 4405 0
 5688 00e8 3B6A     		ldr	r3, [r7, #32]
 5689 00ea 9B6A     		ldr	r3, [r3, #40]
 5690 00ec 002B     		cmp	r3, #0
 5691 00ee 09D0     		beq	.L377
 5692              	.LBB175:
 5693              	.LBB176:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5694              		.loc 2 237 0 discriminator 1
 5695              		.syntax unified
 5696              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5697 00f0 4FF05003 			mov r3, #80												
 5698 00f4 83F31188 		msr basepri, r3											
 5699 00f8 BFF36F8F 		isb														
ARM GAS  /tmp/cciF1PDz.s 			page 182


 5700 00fc BFF34F8F 		dsb														
 5701              	
 5702              	@ 0 "" 2
 5703              		.thumb
 5704              		.syntax unified
 5705 0100 7B61     		str	r3, [r7, #20]
 5706              	.L378:
 5707              	.LBE176:
 5708              	.LBE175:
 5709              		.loc 1 4405 0 discriminator 2
 5710 0102 FEE7     		b	.L378
 5711              	.L377:
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5712              		.loc 1 4423 0
 5713 0104 064B     		ldr	r3, .L381+8
 5714 0106 1B68     		ldr	r3, [r3]
 5715              	.L376:
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5716              		.loc 1 4439 0
 5717 0108 FFF7FEFF 		bl	vPortExitCritical
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5718              		.loc 1 4441 0
 5719 010c 7B6A     		ldr	r3, [r7, #36]
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cciF1PDz.s 			page 183


 5720              		.loc 1 4442 0
 5721 010e 1846     		mov	r0, r3
 5722 0110 2837     		adds	r7, r7, #40
 5723              	.LCFI239:
 5724              		.cfi_def_cfa_offset 8
 5725 0112 BD46     		mov	sp, r7
 5726              	.LCFI240:
 5727              		.cfi_def_cfa_register 13
 5728              		@ sp needed
 5729 0114 80BD     		pop	{r7, pc}
 5730              	.L382:
 5731 0116 00BF     		.align	2
 5732              	.L381:
 5733 0118 00000000 		.word	uxTopReadyPriority
 5734 011c 00000000 		.word	pxReadyTasksLists
 5735 0120 00000000 		.word	pxCurrentTCB
 5736              		.cfi_endproc
 5737              	.LFE51:
 5739              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5740              		.align	1
 5741              		.global	xTaskGenericNotifyFromISR
 5742              		.syntax unified
 5743              		.thumb
 5744              		.thumb_func
 5745              		.fpu fpv4-sp-d16
 5747              	xTaskGenericNotifyFromISR:
 5748              	.LFB52:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5749              		.loc 1 4450 0
 5750              		.cfi_startproc
 5751              		@ args = 4, pretend = 0, frame = 56
 5752              		@ frame_needed = 1, uses_anonymous_args = 0
 5753 0000 80B5     		push	{r7, lr}
 5754              	.LCFI241:
 5755              		.cfi_def_cfa_offset 8
 5756              		.cfi_offset 7, -8
 5757              		.cfi_offset 14, -4
 5758 0002 8EB0     		sub	sp, sp, #56
 5759              	.LCFI242:
 5760              		.cfi_def_cfa_offset 64
 5761 0004 00AF     		add	r7, sp, #0
 5762              	.LCFI243:
 5763              		.cfi_def_cfa_register 7
 5764 0006 F860     		str	r0, [r7, #12]
 5765 0008 B960     		str	r1, [r7, #8]
 5766 000a 3B60     		str	r3, [r7]
 5767 000c 1346     		mov	r3, r2
 5768 000e FB71     		strb	r3, [r7, #7]
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  /tmp/cciF1PDz.s 			page 184


4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5769              		.loc 1 4453 0
 5770 0010 0123     		movs	r3, #1
 5771 0012 7B63     		str	r3, [r7, #52]
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5772              		.loc 1 4456 0
 5773 0014 FB68     		ldr	r3, [r7, #12]
 5774 0016 002B     		cmp	r3, #0
 5775 0018 09D1     		bne	.L384
 5776              	.LBB177:
 5777              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5778              		.loc 2 237 0 discriminator 1
 5779              		.syntax unified
 5780              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5781 001a 4FF05003 			mov r3, #80												
 5782 001e 83F31188 		msr basepri, r3											
 5783 0022 BFF36F8F 		isb														
 5784 0026 BFF34F8F 		dsb														
 5785              	
 5786              	@ 0 "" 2
 5787              		.thumb
 5788              		.syntax unified
 5789 002a 7B62     		str	r3, [r7, #36]
 5790              	.L385:
 5791              	.LBE178:
 5792              	.LBE177:
 5793              		.loc 1 4456 0 discriminator 1
 5794 002c FEE7     		b	.L385
 5795              	.L384:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5796              		.loc 1 4474 0
 5797 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5798              		.loc 1 4476 0
 5799 0032 FB68     		ldr	r3, [r7, #12]
 5800 0034 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/cciF1PDz.s 			page 185


 5801              	.LBB179:
 5802              	.LBB180:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5803              		.loc 2 253 0
 5804              		.syntax unified
 5805              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5806 0036 EFF31182 			mrs r2, basepri											
 5807 003a 4FF05003 		mov r3, #80												
 5808 003e 83F31188 		msr basepri, r3											
 5809 0042 BFF36F8F 		isb														
 5810 0046 BFF34F8F 		dsb														
 5811              	
 5812              	@ 0 "" 2
 5813              		.thumb
 5814              		.syntax unified
 5815 004a 3A62     		str	r2, [r7, #32]
 5816 004c FB61     		str	r3, [r7, #28]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5817              		.loc 2 265 0
 5818 004e 3B6A     		ldr	r3, [r7, #32]
 5819              	.LBE180:
 5820              	.LBE179:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5821              		.loc 1 4478 0
 5822 0050 FB62     		str	r3, [r7, #44]
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5823              		.loc 1 4480 0
 5824 0052 3B68     		ldr	r3, [r7]
 5825 0054 002B     		cmp	r3, #0
 5826 0056 03D0     		beq	.L387
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5827              		.loc 1 4482 0
 5828 0058 3B6B     		ldr	r3, [r7, #48]
 5829 005a DA6C     		ldr	r2, [r3, #76]
 5830 005c 3B68     		ldr	r3, [r7]
 5831 005e 1A60     		str	r2, [r3]
 5832              	.L387:
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5833              		.loc 1 4485 0
 5834 0060 3B6B     		ldr	r3, [r7, #48]
 5835 0062 93F85030 		ldrb	r3, [r3, #80]
 5836 0066 87F82B30 		strb	r3, [r7, #43]
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5837              		.loc 1 4486 0
 5838 006a 3B6B     		ldr	r3, [r7, #48]
 5839 006c 0222     		movs	r2, #2
 5840 006e 83F85020 		strb	r2, [r3, #80]
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5841              		.loc 1 4488 0
 5842 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5843 0074 042B     		cmp	r3, #4
ARM GAS  /tmp/cciF1PDz.s 			page 186


 5844 0076 29D8     		bhi	.L388
 5845 0078 01A2     		adr	r2, .L390
 5846 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5847 007e 00BF     		.p2align 2
 5848              	.L390:
 5849 0080 CD000000 		.word	.L388+1
 5850 0084 95000000 		.word	.L391+1
 5851 0088 A3000000 		.word	.L392+1
 5852 008c AF000000 		.word	.L393+1
 5853 0090 B7000000 		.word	.L394+1
 5854              		.p2align 1
 5855              	.L391:
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5856              		.loc 1 4491 0
 5857 0094 3B6B     		ldr	r3, [r7, #48]
 5858 0096 DA6C     		ldr	r2, [r3, #76]
 5859 0098 BB68     		ldr	r3, [r7, #8]
 5860 009a 1A43     		orrs	r2, r2, r3
 5861 009c 3B6B     		ldr	r3, [r7, #48]
 5862 009e DA64     		str	r2, [r3, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5863              		.loc 1 4492 0
 5864 00a0 14E0     		b	.L388
 5865              	.L392:
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5866              		.loc 1 4495 0
 5867 00a2 3B6B     		ldr	r3, [r7, #48]
 5868 00a4 DB6C     		ldr	r3, [r3, #76]
 5869 00a6 5A1C     		adds	r2, r3, #1
 5870 00a8 3B6B     		ldr	r3, [r7, #48]
 5871 00aa DA64     		str	r2, [r3, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5872              		.loc 1 4496 0
 5873 00ac 0EE0     		b	.L388
 5874              	.L393:
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5875              		.loc 1 4499 0
 5876 00ae 3B6B     		ldr	r3, [r7, #48]
 5877 00b0 BA68     		ldr	r2, [r7, #8]
 5878 00b2 DA64     		str	r2, [r3, #76]
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5879              		.loc 1 4500 0
 5880 00b4 0AE0     		b	.L388
 5881              	.L394:
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5882              		.loc 1 4503 0
 5883 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5884 00ba 022B     		cmp	r3, #2
 5885 00bc 03D0     		beq	.L395
ARM GAS  /tmp/cciF1PDz.s 			page 187


4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5886              		.loc 1 4505 0
 5887 00be 3B6B     		ldr	r3, [r7, #48]
 5888 00c0 BA68     		ldr	r2, [r7, #8]
 5889 00c2 DA64     		str	r2, [r3, #76]
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5890              		.loc 1 4512 0
 5891 00c4 01E0     		b	.L405
 5892              	.L395:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5893              		.loc 1 4510 0
 5894 00c6 0023     		movs	r3, #0
 5895 00c8 7B63     		str	r3, [r7, #52]
 5896              	.L405:
 5897              		.loc 1 4512 0
 5898 00ca 00BF     		nop
 5899              	.L388:
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5900              		.loc 1 4524 0
 5901 00cc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 5902 00d0 012B     		cmp	r3, #1
 5903 00d2 45D1     		bne	.L397
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5904              		.loc 1 4527 0
 5905 00d4 3B6B     		ldr	r3, [r7, #48]
 5906 00d6 9B6A     		ldr	r3, [r3, #40]
 5907 00d8 002B     		cmp	r3, #0
 5908 00da 09D0     		beq	.L398
 5909              	.LBB181:
 5910              	.LBB182:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5911              		.loc 2 237 0 discriminator 1
 5912              		.syntax unified
 5913              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5914 00dc 4FF05003 			mov r3, #80												
 5915 00e0 83F31188 		msr basepri, r3											
 5916 00e4 BFF36F8F 		isb														
ARM GAS  /tmp/cciF1PDz.s 			page 188


 5917 00e8 BFF34F8F 		dsb														
 5918              	
 5919              	@ 0 "" 2
 5920              		.thumb
 5921              		.syntax unified
 5922 00ec BB61     		str	r3, [r7, #24]
 5923              	.L399:
 5924              	.LBE182:
 5925              	.LBE181:
 5926              		.loc 1 4527 0 discriminator 2
 5927 00ee FEE7     		b	.L399
 5928              	.L398:
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5929              		.loc 1 4529 0
 5930 00f0 204B     		ldr	r3, .L406
 5931 00f2 1B68     		ldr	r3, [r3]
 5932 00f4 002B     		cmp	r3, #0
 5933 00f6 1CD1     		bne	.L400
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5934              		.loc 1 4531 0
 5935 00f8 3B6B     		ldr	r3, [r7, #48]
 5936 00fa 0433     		adds	r3, r3, #4
 5937 00fc 1846     		mov	r0, r3
 5938 00fe FFF7FEFF 		bl	uxListRemove
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5939              		.loc 1 4532 0
 5940 0102 3B6B     		ldr	r3, [r7, #48]
 5941 0104 DB6A     		ldr	r3, [r3, #44]
 5942 0106 0122     		movs	r2, #1
 5943 0108 9A40     		lsls	r2, r2, r3
 5944 010a 1B4B     		ldr	r3, .L406+4
 5945 010c 1B68     		ldr	r3, [r3]
 5946 010e 1343     		orrs	r3, r3, r2
 5947 0110 194A     		ldr	r2, .L406+4
 5948 0112 1360     		str	r3, [r2]
 5949 0114 3B6B     		ldr	r3, [r7, #48]
 5950 0116 DA6A     		ldr	r2, [r3, #44]
 5951 0118 1346     		mov	r3, r2
 5952 011a 9B00     		lsls	r3, r3, #2
 5953 011c 1344     		add	r3, r3, r2
 5954 011e 9B00     		lsls	r3, r3, #2
 5955 0120 164A     		ldr	r2, .L406+8
 5956 0122 1A44     		add	r2, r2, r3
 5957 0124 3B6B     		ldr	r3, [r7, #48]
 5958 0126 0433     		adds	r3, r3, #4
 5959 0128 1946     		mov	r1, r3
 5960 012a 1046     		mov	r0, r2
 5961 012c FFF7FEFF 		bl	vListInsertEnd
 5962 0130 05E0     		b	.L401
 5963              	.L400:
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
ARM GAS  /tmp/cciF1PDz.s 			page 189


4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5964              		.loc 1 4538 0
 5965 0132 3B6B     		ldr	r3, [r7, #48]
 5966 0134 1833     		adds	r3, r3, #24
 5967 0136 1946     		mov	r1, r3
 5968 0138 1148     		ldr	r0, .L406+12
 5969 013a FFF7FEFF 		bl	vListInsertEnd
 5970              	.L401:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5971              		.loc 1 4541 0
 5972 013e 3B6B     		ldr	r3, [r7, #48]
 5973 0140 DA6A     		ldr	r2, [r3, #44]
 5974 0142 104B     		ldr	r3, .L406+16
 5975 0144 1B68     		ldr	r3, [r3]
 5976 0146 DB6A     		ldr	r3, [r3, #44]
 5977 0148 9A42     		cmp	r2, r3
 5978 014a 09D9     		bls	.L397
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5979              		.loc 1 4545 0
 5980 014c 3B6C     		ldr	r3, [r7, #64]
 5981 014e 002B     		cmp	r3, #0
 5982 0150 03D0     		beq	.L402
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5983              		.loc 1 4547 0
 5984 0152 3B6C     		ldr	r3, [r7, #64]
 5985 0154 0122     		movs	r2, #1
 5986 0156 1A60     		str	r2, [r3]
 5987 0158 02E0     		b	.L397
 5988              	.L402:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 5989              		.loc 1 4554 0
 5990 015a 0B4B     		ldr	r3, .L406+20
 5991 015c 0122     		movs	r2, #1
 5992 015e 1A60     		str	r2, [r3]
 5993              	.L397:
 5994 0160 FB6A     		ldr	r3, [r7, #44]
 5995 0162 7B61     		str	r3, [r7, #20]
 5996              	.LBB183:
 5997              	.LBB184:
 5998              		.loc 2 271 0
 5999 0164 7B69     		ldr	r3, [r7, #20]
 6000              		.syntax unified
 6001              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6002 0166 83F31188 			msr basepri, r3	
 6003              	@ 0 "" 2
ARM GAS  /tmp/cciF1PDz.s 			page 190


 6004              		.thumb
 6005              		.syntax unified
 6006              	.LBE184:
 6007              	.LBE183:
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6008              		.loc 1 4565 0
 6009 016a 7B6B     		ldr	r3, [r7, #52]
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6010              		.loc 1 4566 0
 6011 016c 1846     		mov	r0, r3
 6012 016e 3837     		adds	r7, r7, #56
 6013              	.LCFI244:
 6014              		.cfi_def_cfa_offset 8
 6015 0170 BD46     		mov	sp, r7
 6016              	.LCFI245:
 6017              		.cfi_def_cfa_register 13
 6018              		@ sp needed
 6019 0172 80BD     		pop	{r7, pc}
 6020              	.L407:
 6021              		.align	2
 6022              	.L406:
 6023 0174 00000000 		.word	uxSchedulerSuspended
 6024 0178 00000000 		.word	uxTopReadyPriority
 6025 017c 00000000 		.word	pxReadyTasksLists
 6026 0180 00000000 		.word	xPendingReadyList
 6027 0184 00000000 		.word	pxCurrentTCB
 6028 0188 00000000 		.word	xYieldPending
 6029              		.cfi_endproc
 6030              	.LFE52:
 6032              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6033              		.align	1
 6034              		.global	vTaskNotifyGiveFromISR
 6035              		.syntax unified
 6036              		.thumb
 6037              		.thumb_func
 6038              		.fpu fpv4-sp-d16
 6040              	vTaskNotifyGiveFromISR:
 6041              	.LFB53:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6042              		.loc 1 4574 0
ARM GAS  /tmp/cciF1PDz.s 			page 191


 6043              		.cfi_startproc
 6044              		@ args = 0, pretend = 0, frame = 40
 6045              		@ frame_needed = 1, uses_anonymous_args = 0
 6046 0000 80B5     		push	{r7, lr}
 6047              	.LCFI246:
 6048              		.cfi_def_cfa_offset 8
 6049              		.cfi_offset 7, -8
 6050              		.cfi_offset 14, -4
 6051 0002 8AB0     		sub	sp, sp, #40
 6052              	.LCFI247:
 6053              		.cfi_def_cfa_offset 48
 6054 0004 00AF     		add	r7, sp, #0
 6055              	.LCFI248:
 6056              		.cfi_def_cfa_register 7
 6057 0006 7860     		str	r0, [r7, #4]
 6058 0008 3960     		str	r1, [r7]
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6059              		.loc 1 4579 0
 6060 000a 7B68     		ldr	r3, [r7, #4]
 6061 000c 002B     		cmp	r3, #0
 6062 000e 09D1     		bne	.L409
 6063              	.LBB185:
 6064              	.LBB186:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6065              		.loc 2 237 0 discriminator 1
 6066              		.syntax unified
 6067              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6068 0010 4FF05003 			mov r3, #80												
 6069 0014 83F31188 		msr basepri, r3											
 6070 0018 BFF36F8F 		isb														
 6071 001c BFF34F8F 		dsb														
 6072              	
 6073              	@ 0 "" 2
 6074              		.thumb
 6075              		.syntax unified
 6076 0020 BB61     		str	r3, [r7, #24]
 6077              	.L410:
 6078              	.LBE186:
 6079              	.LBE185:
 6080              		.loc 1 4579 0 discriminator 1
 6081 0022 FEE7     		b	.L410
 6082              	.L409:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  /tmp/cciF1PDz.s 			page 192


4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6083              		.loc 1 4597 0
 6084 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6085              		.loc 1 4599 0
 6086 0028 7B68     		ldr	r3, [r7, #4]
 6087 002a 7B62     		str	r3, [r7, #36]
 6088              	.LBB187:
 6089              	.LBB188:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6090              		.loc 2 253 0
 6091              		.syntax unified
 6092              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6093 002c EFF31182 			mrs r2, basepri											
 6094 0030 4FF05003 		mov r3, #80												
 6095 0034 83F31188 		msr basepri, r3											
 6096 0038 BFF36F8F 		isb														
 6097 003c BFF34F8F 		dsb														
 6098              	
 6099              	@ 0 "" 2
 6100              		.thumb
 6101              		.syntax unified
 6102 0040 7A61     		str	r2, [r7, #20]
 6103 0042 3B61     		str	r3, [r7, #16]
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6104              		.loc 2 265 0
 6105 0044 7B69     		ldr	r3, [r7, #20]
 6106              	.LBE188:
 6107              	.LBE187:
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6108              		.loc 1 4601 0
 6109 0046 3B62     		str	r3, [r7, #32]
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6110              		.loc 1 4603 0
 6111 0048 7B6A     		ldr	r3, [r7, #36]
 6112 004a 93F85030 		ldrb	r3, [r3, #80]
 6113 004e FB77     		strb	r3, [r7, #31]
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6114              		.loc 1 4604 0
 6115 0050 7B6A     		ldr	r3, [r7, #36]
 6116 0052 0222     		movs	r2, #2
 6117 0054 83F85020 		strb	r2, [r3, #80]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6118              		.loc 1 4608 0
 6119 0058 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/cciF1PDz.s 			page 193


 6120 005a DB6C     		ldr	r3, [r3, #76]
 6121 005c 5A1C     		adds	r2, r3, #1
 6122 005e 7B6A     		ldr	r3, [r7, #36]
 6123 0060 DA64     		str	r2, [r3, #76]
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6124              		.loc 1 4614 0
 6125 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6126 0064 012B     		cmp	r3, #1
 6127 0066 45D1     		bne	.L412
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6128              		.loc 1 4617 0
 6129 0068 7B6A     		ldr	r3, [r7, #36]
 6130 006a 9B6A     		ldr	r3, [r3, #40]
 6131 006c 002B     		cmp	r3, #0
 6132 006e 09D0     		beq	.L413
 6133              	.LBB189:
 6134              	.LBB190:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6135              		.loc 2 237 0 discriminator 1
 6136              		.syntax unified
 6137              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6138 0070 4FF05003 			mov r3, #80												
 6139 0074 83F31188 		msr basepri, r3											
 6140 0078 BFF36F8F 		isb														
 6141 007c BFF34F8F 		dsb														
 6142              	
 6143              	@ 0 "" 2
 6144              		.thumb
 6145              		.syntax unified
 6146 0080 FB60     		str	r3, [r7, #12]
 6147              	.L414:
 6148              	.LBE190:
 6149              	.LBE189:
 6150              		.loc 1 4617 0 discriminator 2
 6151 0082 FEE7     		b	.L414
 6152              	.L413:
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6153              		.loc 1 4619 0
 6154 0084 204B     		ldr	r3, .L419
 6155 0086 1B68     		ldr	r3, [r3]
 6156 0088 002B     		cmp	r3, #0
 6157 008a 1CD1     		bne	.L415
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6158              		.loc 1 4621 0
 6159 008c 7B6A     		ldr	r3, [r7, #36]
 6160 008e 0433     		adds	r3, r3, #4
 6161 0090 1846     		mov	r0, r3
 6162 0092 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cciF1PDz.s 			page 194


4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6163              		.loc 1 4622 0
 6164 0096 7B6A     		ldr	r3, [r7, #36]
 6165 0098 DB6A     		ldr	r3, [r3, #44]
 6166 009a 0122     		movs	r2, #1
 6167 009c 9A40     		lsls	r2, r2, r3
 6168 009e 1B4B     		ldr	r3, .L419+4
 6169 00a0 1B68     		ldr	r3, [r3]
 6170 00a2 1343     		orrs	r3, r3, r2
 6171 00a4 194A     		ldr	r2, .L419+4
 6172 00a6 1360     		str	r3, [r2]
 6173 00a8 7B6A     		ldr	r3, [r7, #36]
 6174 00aa DA6A     		ldr	r2, [r3, #44]
 6175 00ac 1346     		mov	r3, r2
 6176 00ae 9B00     		lsls	r3, r3, #2
 6177 00b0 1344     		add	r3, r3, r2
 6178 00b2 9B00     		lsls	r3, r3, #2
 6179 00b4 164A     		ldr	r2, .L419+8
 6180 00b6 1A44     		add	r2, r2, r3
 6181 00b8 7B6A     		ldr	r3, [r7, #36]
 6182 00ba 0433     		adds	r3, r3, #4
 6183 00bc 1946     		mov	r1, r3
 6184 00be 1046     		mov	r0, r2
 6185 00c0 FFF7FEFF 		bl	vListInsertEnd
 6186 00c4 05E0     		b	.L416
 6187              	.L415:
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6188              		.loc 1 4628 0
 6189 00c6 7B6A     		ldr	r3, [r7, #36]
 6190 00c8 1833     		adds	r3, r3, #24
 6191 00ca 1946     		mov	r1, r3
 6192 00cc 1148     		ldr	r0, .L419+12
 6193 00ce FFF7FEFF 		bl	vListInsertEnd
 6194              	.L416:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6195              		.loc 1 4631 0
 6196 00d2 7B6A     		ldr	r3, [r7, #36]
 6197 00d4 DA6A     		ldr	r2, [r3, #44]
 6198 00d6 104B     		ldr	r3, .L419+16
 6199 00d8 1B68     		ldr	r3, [r3]
 6200 00da DB6A     		ldr	r3, [r3, #44]
 6201 00dc 9A42     		cmp	r2, r3
 6202 00de 09D9     		bls	.L412
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6203              		.loc 1 4635 0
 6204 00e0 3B68     		ldr	r3, [r7]
 6205 00e2 002B     		cmp	r3, #0
ARM GAS  /tmp/cciF1PDz.s 			page 195


 6206 00e4 03D0     		beq	.L417
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6207              		.loc 1 4637 0
 6208 00e6 3B68     		ldr	r3, [r7]
 6209 00e8 0122     		movs	r2, #1
 6210 00ea 1A60     		str	r2, [r3]
 6211 00ec 02E0     		b	.L412
 6212              	.L417:
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 6213              		.loc 1 4644 0
 6214 00ee 0B4B     		ldr	r3, .L419+20
 6215 00f0 0122     		movs	r2, #1
 6216 00f2 1A60     		str	r2, [r3]
 6217              	.L412:
 6218 00f4 3B6A     		ldr	r3, [r7, #32]
 6219 00f6 BB60     		str	r3, [r7, #8]
 6220              	.LBB191:
 6221              	.LBB192:
 6222              		.loc 2 271 0
 6223 00f8 BB68     		ldr	r3, [r7, #8]
 6224              		.syntax unified
 6225              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6226 00fa 83F31188 			msr basepri, r3	
 6227              	@ 0 "" 2
 6228              		.thumb
 6229              		.syntax unified
 6230              	.LBE192:
 6231              	.LBE191:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6232              		.loc 1 4654 0
 6233 00fe 00BF     		nop
 6234 0100 2837     		adds	r7, r7, #40
 6235              	.LCFI249:
 6236              		.cfi_def_cfa_offset 8
 6237 0102 BD46     		mov	sp, r7
 6238              	.LCFI250:
 6239              		.cfi_def_cfa_register 13
 6240              		@ sp needed
 6241 0104 80BD     		pop	{r7, pc}
 6242              	.L420:
 6243 0106 00BF     		.align	2
ARM GAS  /tmp/cciF1PDz.s 			page 196


 6244              	.L419:
 6245 0108 00000000 		.word	uxSchedulerSuspended
 6246 010c 00000000 		.word	uxTopReadyPriority
 6247 0110 00000000 		.word	pxReadyTasksLists
 6248 0114 00000000 		.word	xPendingReadyList
 6249 0118 00000000 		.word	pxCurrentTCB
 6250 011c 00000000 		.word	xYieldPending
 6251              		.cfi_endproc
 6252              	.LFE53:
 6254              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6255              		.align	1
 6256              		.global	xTaskNotifyStateClear
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.fpu fpv4-sp-d16
 6262              	xTaskNotifyStateClear:
 6263              	.LFB54:
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6264              		.loc 1 4663 0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 16
 6267              		@ frame_needed = 1, uses_anonymous_args = 0
 6268 0000 80B5     		push	{r7, lr}
 6269              	.LCFI251:
 6270              		.cfi_def_cfa_offset 8
 6271              		.cfi_offset 7, -8
 6272              		.cfi_offset 14, -4
 6273 0002 84B0     		sub	sp, sp, #16
 6274              	.LCFI252:
 6275              		.cfi_def_cfa_offset 24
 6276 0004 00AF     		add	r7, sp, #0
 6277              	.LCFI253:
 6278              		.cfi_def_cfa_register 7
 6279 0006 7860     		str	r0, [r7, #4]
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6280              		.loc 1 4669 0
 6281 0008 7B68     		ldr	r3, [r7, #4]
 6282 000a 002B     		cmp	r3, #0
 6283 000c 02D1     		bne	.L422
 6284              		.loc 1 4669 0 is_stmt 0 discriminator 1
 6285 000e 0E4B     		ldr	r3, .L427
 6286 0010 1B68     		ldr	r3, [r3]
 6287 0012 00E0     		b	.L423
ARM GAS  /tmp/cciF1PDz.s 			page 197


 6288              	.L422:
 6289              		.loc 1 4669 0 discriminator 2
 6290 0014 7B68     		ldr	r3, [r7, #4]
 6291              	.L423:
 6292              		.loc 1 4669 0 discriminator 4
 6293 0016 BB60     		str	r3, [r7, #8]
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6294              		.loc 1 4671 0 is_stmt 1 discriminator 4
 6295 0018 FFF7FEFF 		bl	vPortEnterCritical
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6296              		.loc 1 4673 0 discriminator 4
 6297 001c BB68     		ldr	r3, [r7, #8]
 6298 001e 93F85030 		ldrb	r3, [r3, #80]
 6299 0022 DBB2     		uxtb	r3, r3
 6300 0024 022B     		cmp	r3, #2
 6301 0026 06D1     		bne	.L424
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6302              		.loc 1 4675 0
 6303 0028 BB68     		ldr	r3, [r7, #8]
 6304 002a 0022     		movs	r2, #0
 6305 002c 83F85020 		strb	r2, [r3, #80]
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6306              		.loc 1 4676 0
 6307 0030 0123     		movs	r3, #1
 6308 0032 FB60     		str	r3, [r7, #12]
 6309 0034 01E0     		b	.L425
 6310              	.L424:
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 6311              		.loc 1 4680 0
 6312 0036 0023     		movs	r3, #0
 6313 0038 FB60     		str	r3, [r7, #12]
 6314              	.L425:
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6315              		.loc 1 4683 0
 6316 003a FFF7FEFF 		bl	vPortExitCritical
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6317              		.loc 1 4685 0
 6318 003e FB68     		ldr	r3, [r7, #12]
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6319              		.loc 1 4686 0
 6320 0040 1846     		mov	r0, r3
 6321 0042 1037     		adds	r7, r7, #16
 6322              	.LCFI254:
 6323              		.cfi_def_cfa_offset 8
 6324 0044 BD46     		mov	sp, r7
 6325              	.LCFI255:
 6326              		.cfi_def_cfa_register 13
 6327              		@ sp needed
ARM GAS  /tmp/cciF1PDz.s 			page 198


 6328 0046 80BD     		pop	{r7, pc}
 6329              	.L428:
 6330              		.align	2
 6331              	.L427:
 6332 0048 00000000 		.word	pxCurrentTCB
 6333              		.cfi_endproc
 6334              	.LFE54:
 6336              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6337              		.align	1
 6338              		.syntax unified
 6339              		.thumb
 6340              		.thumb_func
 6341              		.fpu fpv4-sp-d16
 6343              	prvAddCurrentTaskToDelayedList:
 6344              	.LFB55:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6345              		.loc 1 4693 0
 6346              		.cfi_startproc
 6347              		@ args = 0, pretend = 0, frame = 16
 6348              		@ frame_needed = 1, uses_anonymous_args = 0
 6349 0000 80B5     		push	{r7, lr}
 6350              	.LCFI256:
 6351              		.cfi_def_cfa_offset 8
 6352              		.cfi_offset 7, -8
 6353              		.cfi_offset 14, -4
 6354 0002 84B0     		sub	sp, sp, #16
 6355              	.LCFI257:
 6356              		.cfi_def_cfa_offset 24
 6357 0004 00AF     		add	r7, sp, #0
 6358              	.LCFI258:
 6359              		.cfi_def_cfa_register 7
 6360 0006 7860     		str	r0, [r7, #4]
 6361 0008 3960     		str	r1, [r7]
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6362              		.loc 1 4695 0
 6363 000a 294B     		ldr	r3, .L435
 6364 000c 1B68     		ldr	r3, [r3]
 6365 000e FB60     		str	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
ARM GAS  /tmp/cciF1PDz.s 			page 199


4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6366              		.loc 1 4708 0
 6367 0010 284B     		ldr	r3, .L435+4
 6368 0012 1B68     		ldr	r3, [r3]
 6369 0014 0433     		adds	r3, r3, #4
 6370 0016 1846     		mov	r0, r3
 6371 0018 FFF7FEFF 		bl	uxListRemove
 6372 001c 0346     		mov	r3, r0
 6373 001e 002B     		cmp	r3, #0
 6374 0020 0BD1     		bne	.L430
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6375              		.loc 1 4712 0
 6376 0022 244B     		ldr	r3, .L435+4
 6377 0024 1B68     		ldr	r3, [r3]
 6378 0026 DB6A     		ldr	r3, [r3, #44]
 6379 0028 0122     		movs	r2, #1
 6380 002a 02FA03F3 		lsl	r3, r2, r3
 6381 002e DA43     		mvns	r2, r3
 6382 0030 214B     		ldr	r3, .L435+8
 6383 0032 1B68     		ldr	r3, [r3]
 6384 0034 1340     		ands	r3, r3, r2
 6385 0036 204A     		ldr	r2, .L435+8
 6386 0038 1360     		str	r3, [r2]
 6387              	.L430:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6388              		.loc 1 4721 0
 6389 003a 7B68     		ldr	r3, [r7, #4]
 6390 003c B3F1FF3F 		cmp	r3, #-1
 6391 0040 0AD1     		bne	.L431
 6392              		.loc 1 4721 0 is_stmt 0 discriminator 1
 6393 0042 3B68     		ldr	r3, [r7]
 6394 0044 002B     		cmp	r3, #0
 6395 0046 07D0     		beq	.L431
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6396              		.loc 1 4726 0 is_stmt 1
 6397 0048 1A4B     		ldr	r3, .L435+4
 6398 004a 1B68     		ldr	r3, [r3]
 6399 004c 0433     		adds	r3, r3, #4
 6400 004e 1946     		mov	r1, r3
 6401 0050 1A48     		ldr	r0, .L435+12
 6402 0052 FFF7FEFF 		bl	vListInsertEnd
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cciF1PDz.s 			page 200


4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
ARM GAS  /tmp/cciF1PDz.s 			page 201


4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6403              		.loc 1 4801 0
 6404 0056 26E0     		b	.L434
 6405              	.L431:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6406              		.loc 1 4733 0
 6407 0058 FA68     		ldr	r2, [r7, #12]
 6408 005a 7B68     		ldr	r3, [r7, #4]
 6409 005c 1344     		add	r3, r3, r2
 6410 005e BB60     		str	r3, [r7, #8]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6411              		.loc 1 4736 0
 6412 0060 144B     		ldr	r3, .L435+4
 6413 0062 1B68     		ldr	r3, [r3]
 6414 0064 BA68     		ldr	r2, [r7, #8]
 6415 0066 5A60     		str	r2, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6416              		.loc 1 4738 0
 6417 0068 BA68     		ldr	r2, [r7, #8]
 6418 006a FB68     		ldr	r3, [r7, #12]
 6419 006c 9A42     		cmp	r2, r3
 6420 006e 09D2     		bcs	.L433
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6421              		.loc 1 4742 0
 6422 0070 134B     		ldr	r3, .L435+16
 6423 0072 1A68     		ldr	r2, [r3]
 6424 0074 0F4B     		ldr	r3, .L435+4
 6425 0076 1B68     		ldr	r3, [r3]
 6426 0078 0433     		adds	r3, r3, #4
 6427 007a 1946     		mov	r1, r3
 6428 007c 1046     		mov	r0, r2
 6429 007e FFF7FEFF 		bl	vListInsert
 6430              		.loc 1 4801 0
 6431 0082 10E0     		b	.L434
 6432              	.L433:
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6433              		.loc 1 4748 0
 6434 0084 0F4B     		ldr	r3, .L435+20
 6435 0086 1A68     		ldr	r2, [r3]
 6436 0088 0A4B     		ldr	r3, .L435+4
 6437 008a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciF1PDz.s 			page 202


 6438 008c 0433     		adds	r3, r3, #4
 6439 008e 1946     		mov	r1, r3
 6440 0090 1046     		mov	r0, r2
 6441 0092 FFF7FEFF 		bl	vListInsert
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6442              		.loc 1 4753 0
 6443 0096 0C4B     		ldr	r3, .L435+24
 6444 0098 1B68     		ldr	r3, [r3]
 6445 009a BA68     		ldr	r2, [r7, #8]
 6446 009c 9A42     		cmp	r2, r3
 6447 009e 02D2     		bcs	.L434
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6448              		.loc 1 4755 0
 6449 00a0 094A     		ldr	r2, .L435+24
 6450 00a2 BB68     		ldr	r3, [r7, #8]
 6451 00a4 1360     		str	r3, [r2]
 6452              	.L434:
 6453              		.loc 1 4801 0
 6454 00a6 00BF     		nop
 6455 00a8 1037     		adds	r7, r7, #16
 6456              	.LCFI259:
 6457              		.cfi_def_cfa_offset 8
 6458 00aa BD46     		mov	sp, r7
 6459              	.LCFI260:
 6460              		.cfi_def_cfa_register 13
 6461              		@ sp needed
 6462 00ac 80BD     		pop	{r7, pc}
 6463              	.L436:
 6464 00ae 00BF     		.align	2
 6465              	.L435:
 6466 00b0 00000000 		.word	xTickCount
 6467 00b4 00000000 		.word	pxCurrentTCB
 6468 00b8 00000000 		.word	uxTopReadyPriority
 6469 00bc 00000000 		.word	xSuspendedTaskList
 6470 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6471 00c4 00000000 		.word	pxDelayedTaskList
 6472 00c8 00000000 		.word	xNextTaskUnblockTime
 6473              		.cfi_endproc
 6474              	.LFE55:
 6476              		.text
 6477              	.Letext0:
 6478              		.file 3 "/opt/gcc4mbed/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6479              		.file 4 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 6480              		.file 5 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 6481              		.file 6 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 6482              		.file 7 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 6483              		.file 8 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 6484              		.file 9 "Inc/FreeRTOSConfig.h"
 6485              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6486              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6487              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cciF1PDz.s 			page 203


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cciF1PDz.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cciF1PDz.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cciF1PDz.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cciF1PDz.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cciF1PDz.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cciF1PDz.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cciF1PDz.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cciF1PDz.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cciF1PDz.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cciF1PDz.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cciF1PDz.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cciF1PDz.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cciF1PDz.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cciF1PDz.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cciF1PDz.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cciF1PDz.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cciF1PDz.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cciF1PDz.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cciF1PDz.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cciF1PDz.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cciF1PDz.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cciF1PDz.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cciF1PDz.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/cciF1PDz.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cciF1PDz.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cciF1PDz.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cciF1PDz.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cciF1PDz.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cciF1PDz.s:103    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cciF1PDz.s:106    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cciF1PDz.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/cciF1PDz.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cciF1PDz.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cciF1PDz.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cciF1PDz.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cciF1PDz.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cciF1PDz.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cciF1PDz.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cciF1PDz.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cciF1PDz.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cciF1PDz.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cciF1PDz.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cciF1PDz.s:145    .text.xTaskCreate:0000000000000000 $t
     /tmp/cciF1PDz.s:152    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cciF1PDz.s:262    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cciF1PDz.s:451    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cciF1PDz.s:256    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cciF1PDz.s:445    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cciF1PDz.s:4455   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cciF1PDz.s:571    .text.prvAddNewTaskToReadyList:00000000000000a8 $d
     /tmp/cciF1PDz.s:581    .text.vTaskDelete:0000000000000000 $t
     /tmp/cciF1PDz.s:588    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cciF1PDz.s:5003   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cciF1PDz.s:5049   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cciF1PDz.s:768    .text.vTaskDelete:00000000000000f4 $d
ARM GAS  /tmp/cciF1PDz.s 			page 204


     /tmp/cciF1PDz.s:782    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cciF1PDz.s:789    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cciF1PDz.s:2456   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cciF1PDz.s:6343   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cciF1PDz.s:2502   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cciF1PDz.s:986    .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/cciF1PDz.s:993    .text.vTaskDelay:0000000000000000 $t
     /tmp/cciF1PDz.s:1000   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cciF1PDz.s:1091   .text.vTaskDelay:0000000000000060 $d
     /tmp/cciF1PDz.s:1097   .text.eTaskGetState:0000000000000000 $t
     /tmp/cciF1PDz.s:1104   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cciF1PDz.s:1240   .text.eTaskGetState:000000000000009c $d
     /tmp/cciF1PDz.s:1249   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cciF1PDz.s:1256   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cciF1PDz.s:1311   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cciF1PDz.s:1316   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cciF1PDz.s:1323   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cciF1PDz.s:1412   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cciF1PDz.s:1417   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cciF1PDz.s:1424   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cciF1PDz.s:1635   .text.vTaskPrioritySet:0000000000000124 $d
     /tmp/cciF1PDz.s:1642   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cciF1PDz.s:1649   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cciF1PDz.s:3344   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cciF1PDz.s:1828   .text.vTaskSuspend:00000000000000f0 $d
     /tmp/cciF1PDz.s:1840   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cciF1PDz.s:1846   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cciF1PDz.s:1954   .text.prvTaskIsTaskSuspended:000000000000006c $d
     /tmp/cciF1PDz.s:1960   .text.vTaskResume:0000000000000000 $t
     /tmp/cciF1PDz.s:1967   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cciF1PDz.s:2078   .text.vTaskResume:0000000000000090 $d
     /tmp/cciF1PDz.s:2085   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cciF1PDz.s:2092   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cciF1PDz.s:2253   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/cciF1PDz.s:2262   .rodata:0000000000000000 $d
     /tmp/cciF1PDz.s:2266   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cciF1PDz.s:2273   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cciF1PDz.s:2375   .text.vTaskStartScheduler:0000000000000074 $d
     /tmp/cciF1PDz.s:4405   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cciF1PDz.s:2385   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cciF1PDz.s:2392   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cciF1PDz.s:2444   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/cciF1PDz.s:2449   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cciF1PDz.s:2490   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cciF1PDz.s:2495   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cciF1PDz.s:3122   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cciF1PDz.s:2689   .text.xTaskResumeAll:00000000000000fc $d
     /tmp/cciF1PDz.s:2701   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cciF1PDz.s:2708   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cciF1PDz.s:2748   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cciF1PDz.s:2753   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cciF1PDz.s:2760   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cciF1PDz.s:2801   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/cciF1PDz.s:2806   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cciF1PDz.s:2813   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cciF1PDz.s:2844   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/cciF1PDz.s:2849   .text.pcTaskGetName:0000000000000000 $t
ARM GAS  /tmp/cciF1PDz.s 			page 205


     /tmp/cciF1PDz.s:2856   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cciF1PDz.s:2932   .text.pcTaskGetName:0000000000000044 $d
     /tmp/cciF1PDz.s:2937   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cciF1PDz.s:2944   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cciF1PDz.s:4803   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cciF1PDz.s:3105   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/cciF1PDz.s:3115   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cciF1PDz.s:3324   .text.xTaskIncrementTick:0000000000000110 $d
     /tmp/cciF1PDz.s:3337   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cciF1PDz.s:3484   .text.vTaskSwitchContext:00000000000000a0 $d
     /tmp/cciF1PDz.s:3493   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cciF1PDz.s:3500   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cciF1PDz.s:3567   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/cciF1PDz.s:3572   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cciF1PDz.s:3579   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cciF1PDz.s:3678   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/cciF1PDz.s:3684   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cciF1PDz.s:3691   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cciF1PDz.s:3821   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/cciF1PDz.s:3831   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cciF1PDz.s:3838   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/cciF1PDz.s:3982   .text.xTaskRemoveFromUnorderedEventList:00000000000000b8 $d
     /tmp/cciF1PDz.s:3991   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cciF1PDz.s:3998   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cciF1PDz.s:4067   .text.vTaskSetTimeOutState:0000000000000040 $d
     /tmp/cciF1PDz.s:4073   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cciF1PDz.s:4080   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cciF1PDz.s:4231   .text.xTaskCheckForTimeOut:00000000000000b4 $d
     /tmp/cciF1PDz.s:4237   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cciF1PDz.s:4244   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cciF1PDz.s:4276   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cciF1PDz.s:4281   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cciF1PDz.s:4288   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cciF1PDz.s:4343   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cciF1PDz.s:4350   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cciF1PDz.s:4399   .text.prvIdleTask:0000000000000000 $t
     /tmp/cciF1PDz.s:4550   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cciF1PDz.s:4444   .text.prvIdleTask:0000000000000020 $d
     /tmp/cciF1PDz.s:4449   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cciF1PDz.s:4532   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/cciF1PDz.s:4544   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cciF1PDz.s:4639   .text.prvCheckTasksWaitingTermination:000000000000006c $d
     /tmp/cciF1PDz.s:4646   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cciF1PDz.s:4653   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cciF1PDz.s:4934   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cciF1PDz.s:4792   .text.vTaskGetInfo:00000000000000b4 $d
     /tmp/cciF1PDz.s:4797   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cciF1PDz.s:4928   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cciF1PDz.s:4997   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cciF1PDz.s:5043   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cciF1PDz.s:5118   .text.prvResetNextTaskUnblockTime:0000000000000044 $d
     /tmp/cciF1PDz.s:5124   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cciF1PDz.s:5131   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cciF1PDz.s:5191   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cciF1PDz.s:5197   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cciF1PDz.s:5204   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cciF1PDz.s:5253   .text.uxTaskResetEventItemValue:000000000000002c $d
ARM GAS  /tmp/cciF1PDz.s 			page 206


     /tmp/cciF1PDz.s:5258   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cciF1PDz.s:5265   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cciF1PDz.s:5372   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/cciF1PDz.s:5378   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cciF1PDz.s:5385   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cciF1PDz.s:5511   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/cciF1PDz.s:5517   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cciF1PDz.s:5524   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cciF1PDz.s:5604   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cciF1PDz.s:5609   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cciF1PDz.s:5733   .text.xTaskGenericNotify:0000000000000118 $d
     /tmp/cciF1PDz.s:5740   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cciF1PDz.s:5747   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cciF1PDz.s:5849   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cciF1PDz.s:5854   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cciF1PDz.s:6023   .text.xTaskGenericNotifyFromISR:0000000000000174 $d
     /tmp/cciF1PDz.s:6033   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cciF1PDz.s:6040   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cciF1PDz.s:6245   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/cciF1PDz.s:6255   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cciF1PDz.s:6262   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cciF1PDz.s:6332   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/cciF1PDz.s:6337   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cciF1PDz.s:6466   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
